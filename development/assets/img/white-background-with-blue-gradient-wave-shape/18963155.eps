%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: SL-100820-36540-01.eps
%%Creator: Adobe Illustrator(R) 23.1
%%For: Akash Gupta
%%CreationDate: 10/8/2020
%%BoundingBox: 0 0 504 288
%%HiResBoundingBox: 0 0 504 288
%%CropBox: 0 0 504 288
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 23.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 23.1.0 x670 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c148 79.163858, 2019/03/06-03:18:36        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:CreatorTool="Adobe Illustrator CC 23.1 (Windows)"
   xmp:CreateDate="2020-10-08T16:49:52+05:30"
   xmp:ModifyDate="2020-10-08T16:49:52+05:30"
   xmp:MetadataDate="2020-10-09T09:24:26+05:30"
   xmpMM:OriginalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
   xmpMM:DocumentID="xmp.did:0499f1fa-b528-7447-801d-484a78b4e9b8"
   xmpMM:InstanceID="xmp.iid:e1c8f1f5-19a0-3e41-aa1e-006abd4101a2"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Basic RGB"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">white background with blue gradient wave shape</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Akash Gupta</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:subject>
    <rdf:Bag>
     <rdf:li>abstract</rdf:li>
     <rdf:li>line</rdf:li>
     <rdf:li>wave</rdf:li>
     <rdf:li>duotone</rdf:li>
     <rdf:li>presentation</rdf:li>
     <rdf:li>shape</rdf:li>
     <rdf:li>gradient</rdf:li>
     <rdf:li>curve</rdf:li>
     <rdf:li>clean</rdf:li>
     <rdf:li>effect</rdf:li>
     <rdf:li>flow</rdf:li>
     <rdf:li>wavy</rdf:li>
     <rdf:li>motion</rdf:li>
     <rdf:li>movement</rdf:li>
     <rdf:li>dynamic</rdf:li>
     <rdf:li>fluid</rdf:li>
     <rdf:li>smooth</rdf:li>
     <rdf:li>background</rdf:li>
     <rdf:li>banner</rdf:li>
     <rdf:li>elegant</rdf:li>
     <rdf:li>backdrop</rdf:li>
     <rdf:li>blue</rdf:li>
     <rdf:li>business</rdf:li>
     <rdf:li>white</rdf:li>
     <rdf:li>vector</rdf:li>
     <rdf:li>design</rdf:li>
    </rdf:Bag>
   </dc:subject>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">white background with blue gradient wave shape</rdf:li>
    </rdf:Alt>
   </dc:description>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="188"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgED6APoAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAD6AAAAAEA&#xA;AQPoAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgAvAEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A8/2lnPdSFIRUgVJOwH05vtVq4YI8Uy1dm9lZ9bMwxCyBZ7vn59HXdnPayBJh&#xA;QkVBG4P046XVwzx4oFPafZWfRTEMookWO4/FQzJdajdG5jUoWVC9DRqCtAw48vorXNb2tX5aYJEd&#xA;vnW9fHk9F7KcY7QxSjAzqW9D6RIcPF1+m+L4Pr//AJxV9Q/lxevIxaRtWueVdwOMUKUH/A5rp4oQ&#xA;EeAUDEH5o1+pzZs0vFPFKMjH5F7JlbiNN9k/LFWO+ZfNemeXoIZr5ZX9diqLEqk7CpNXZF28K19s&#xA;zdFoJ6gkQrbv/BcDX9o49KAZ3v3ftpW8v+YNP17TxfWPMRFijLItGVl7GhZffYnIavSTwT4J82zR&#xA;a2GohxwuvNM8xXLdiqtbujx1UhgCQSPHCRSAQVTAlLPM3/HBvf8AjGf1jNT25/ieT+q5mg/v4+95&#xA;xcgPZwTE/GP3dPEL3+jpnjkNpEPV4zUyPig8ub18UMsrFY15MBUgeGRlIDmiUxHm1JG8blHHFh1B&#xA;wgg7hYyBFh6j5Z/44Nl/xjH6znr3Yf8AieP+q8dr/wC/l70zzbOGo3v+87fMfrxVJ7u9s7OMSXUy&#xA;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"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:b3222762-2407-f145-bdba-a631407472cb"
    stRef:documentID="xmp.did:b3222762-2407-f145-bdba-a631407472cb"
    stRef:originalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:28c83b25-d31c-0d44-9a20-fab4840af1fb"
      stEvt:when="2019-02-16T15:08:04+05:30"
      stEvt:softwareAgent="Adobe Illustrator CC 23.0 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:0499f1fa-b528-7447-801d-484a78b4e9b8"
      stEvt:when="2020-10-08T16:49:52+05:30"
      stEvt:softwareAgent="Adobe Illustrator CC 23.1 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:efa58720-a16d-8e47-8963-a715152e9053"
      stEvt:when="2020-10-09T09:21:44+05:30"
      stEvt:softwareAgent="Adobe Bridge 2019 (Windows)"
      stEvt:changed="/metadata"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:e1c8f1f5-19a0-3e41-aa1e-006abd4101a2"
      stEvt:when="2020-10-09T09:24:26+05:30"
      stEvt:softwareAgent="Adobe Bridge 2019 (Windows)"
      stEvt:changed="/metadata"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="7.000000"
    stDim:h="4.000000"
    stDim:unit="Inches"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Default Swatch Group"
       xmpG:groupType="0">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="White"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="255"
         xmpG:green="255"
         xmpG:blue="255"/>
        <rdf:li
         xmpG:swatchName="Black"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="0"
         xmpG:green="0"
         xmpG:blue="0"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                     
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -288 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 288 li
504 288 li
504 0 li
cp
clp
504 288 mo
-.00012207 288 li
-.00012207 -7.96037e-05 li
504 -7.96037e-05 li
504 288 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.968627 .968627 .968627 rgb
f
gsave
504 288 mo
-.00012207 288 li
-.00012207 -7.96037e-05 li
504 -7.96037e-05 li
504 288 li
cp
clp
-70.9938 214.034 mo
-74.8141 212.85 li
-69.7618 196.558 -48.6193 190.771 -31.1056 194.585 cv
-24.2574 196.077 -17.6007 198.546 -11.1632 200.934 cv
-2.07825 204.305 6.50232 207.488 15.7152 208.248 cv
34.4457 209.79 52.264 200.837 69.5038 192.177 cv
87.0858 183.344 105.264 174.213 124.941 175.619 cv
139.174 176.638 152.112 183.103 164.625 189.355 cv
169.226 191.654 173.985 194.031 178.706 196.081 cv
186.656 199.534 213.885 209.606 230.533 194.293 cv
237.471 187.912 240.667 178.832 244.051 169.22 cv
247.438 159.597 250.941 149.647 258.564 142.588 cv
273.922 128.366 299.209 132.658 316.249 144.246 cv
325.737 150.697 333.817 159.005 341.63 167.039 cv
347.523 173.099 353.617 179.365 360.224 184.724 cv
373.733 195.682 395.694 205.147 413.127 195.758 cv
427.494 188.02 432.677 171.986 438.164 155.011 cv
440.655 147.309 443.23 139.343 446.744 132.202 cv
455.231 114.954 471.601 101.394 491.654 94.9985 cv
511.707 88.603 532.904 90.1821 549.81 99.331 cv
547.906 102.849 li
531.952 94.2148 511.892 92.7431 492.869 98.809 cv
473.847 104.876 458.343 117.691 450.333 133.968 cv
446.947 140.849 444.417 148.674 441.971 156.242 cv
436.481 173.222 430.805 190.78 415.023 199.279 cv
395.882 209.591 372.862 200.125 357.704 187.83 cv
350.914 182.323 344.737 175.971 338.763 169.828 cv
331.088 161.936 323.152 153.776 314 147.553 cv
298.267 136.855 275.105 132.722 261.282 145.523 cv
254.385 151.909 251.198 160.963 247.824 170.548 cv
244.426 180.2 240.913 190.181 233.241 197.238 cv
220.807 208.673 199.825 209.613 177.113 199.75 cv
172.293 197.658 167.486 195.256 162.837 192.933 cv
150.674 186.855 138.096 180.571 124.655 179.609 cv
106.082 178.276 88.3978 187.161 71.2992 195.751 cv
53.5658 204.66 35.2294 213.872 15.3861 212.234 cv
5.62585 211.429 -3.61633 208 -12.5543 204.684 cv
-18.8619 202.345 -25.3839 199.925 -31.9572 198.494 cv
-47.712 195.061 -66.6222 199.936 -70.9938 214.034 cv
cp
f
-69.4313 213.119 mo
-73.2262 211.855 li
-67.6949 195.243 -46.1222 189.657 -28.4645 193.855 cv
-21.631 195.458 -15.0177 198.068 -8.62219 200.591 cv
.515015 204.197 9.14587 207.601 18.5043 208.416 cv
37.0687 210.038 54.746 201.186 71.8485 192.634 cv
88.9393 184.087 106.613 175.255 125.661 176.294 cv
139.745 177.068 152.526 182.965 164.885 188.668 cv
169.396 190.75 174.06 192.902 178.693 194.756 cv
186.523 197.891 213.374 206.959 230.177 192.083 cv
237.253 185.82 240.871 176.816 244.37 168.108 cv
248.032 158.993 251.819 149.568 259.573 142.986 cv
275.608 129.373 300.903 134.766 317.617 145.539 cv
327.182 151.704 335.296 159.68 343.143 167.393 cv
348.97 173.12 354.996 179.042 361.532 184.128 cv
375.833 195.179 397.236 203.851 414.397 195.038 cv
428.749 187.669 434.143 172.131 439.852 155.681 cv
442.401 148.337 445.038 140.743 448.547 133.889 cv
457.224 116.942 473.638 103.599 493.58 97.2797 cv
512.95 91.141 533.289 92.4716 549.381 100.928 cv
547.52 104.469 li
532.367 96.5063 513.148 95.2748 494.788 101.093 cv
475.857 107.092 460.301 119.709 452.107 135.712 cv
448.725 142.318 446.135 149.778 443.631 156.993 cv
437.914 173.463 432.002 190.495 416.224 198.597 cv
397.394 208.264 374.36 199.095 359.081 187.289 cv
352.356 182.058 346.247 176.053 340.339 170.246 cv
332.636 162.674 324.67 154.844 315.45 148.901 cv
299.443 138.584 275.998 134.288 262.162 146.036 cv
255.161 151.977 251.722 160.537 248.081 169.6 cv
244.41 178.738 240.613 188.188 232.829 195.079 cv
220.332 206.14 199.538 207.408 177.206 198.47 cv
172.478 196.578 167.766 194.403 163.209 192.301 cv
151.191 186.755 138.763 181.02 125.441 180.288 cv
107.456 179.305 90.2621 187.897 73.6381 196.211 cv
56.038 205.013 37.8392 214.115 18.1576 212.401 cv
8.21912 211.536 -1.08899 207.864 -10.09 204.312 cv
-16.3527 201.841 -22.8282 199.286 -29.3839 197.748 cv
-45.298 193.965 -64.6246 198.681 -69.4313 213.119 cv
cp
.937255 .956863 .968627 rgb
f
25.976 212.796 mo
24.3041 212.796 22.6219 212.722 20.9286 212.567 cv
10.7782 211.639 1.37439 207.711 -7.71985 203.913 cv
-13.9103 201.327 -20.3112 198.654 -26.8156 197 cv
-42.5416 193.001 -62.7081 197.678 -67.8683 212.202 cv
-71.6378 210.863 li
-65.6447 193.994 -43.6398 188.597 -25.8302 193.123 cv
-19.0406 194.849 -12.5021 197.58 -6.17834 200.222 cv
3.04333 204.073 11.7538 207.711 21.2928 208.584 cv
39.6864 210.268 57.2367 201.531 74.2079 193.081 cv
90.8026 184.819 107.971 176.266 126.379 176.971 cv
140.321 177.496 152.943 182.826 165.151 187.979 cv
169.568 189.845 174.136 191.773 178.676 193.432 cv
186.388 196.249 212.865 204.318 229.822 189.874 cv
237.023 183.74 240.907 175.249 244.663 167.038 cv
248.607 158.413 252.686 149.496 260.588 143.384 cv
276.556 131.029 302.051 136.51 318.982 146.833 cv
328.559 152.671 336.654 160.265 344.481 167.609 cv
350.29 173.058 356.296 178.693 362.833 183.528 cv
377.237 194.182 398.68 202.614 415.668 194.32 cv
430.014 187.316 435.622 172.268 441.56 156.337 cv
444.162 149.356 446.852 142.137 450.351 135.575 cv
458.961 119.426 474.869 106.477 493.996 100.048 cv
513.161 93.6064 533.19 94.5082 548.95 102.525 cv
547.137 106.09 li
516.19 90.3476 470.87 105.592 453.88 137.456 cv
450.507 143.784 447.864 150.876 445.308 157.734 cv
439.357 173.701 433.204 190.21 417.423 197.915 cv
398.827 206.992 375.803 198.096 360.454 186.744 cv
353.73 181.769 347.637 176.054 341.745 170.526 cv
334.065 163.322 326.124 155.872 316.9 150.248 cv
301.102 140.616 277.505 135.351 263.036 146.548 cv
255.914 152.056 252.216 160.141 248.3 168.701 cv
244.363 177.309 240.292 186.21 232.416 192.919 cv
219.86 203.613 199.259 205.21 177.303 197.189 cv
172.671 195.497 168.057 193.548 163.595 191.664 cv
151.172 186.419 139.439 181.465 126.228 180.968 cv
108.817 180.318 92.1366 188.624 75.9906 196.662 cv
60.035 204.605 43.5824 212.796 25.976 212.796 cv
cp
.905882 .945098 .972549 rgb
f
28.9344 212.982 mo
27.2001 212.982 25.4569 212.902 23.7001 212.734 cv
13.3666 211.743 3.89539 207.566 -5.26379 203.526 cv
-11.4078 200.817 -17.7609 198.016 -24.2433 196.253 cv
-40.1144 191.938 -60.7115 196.457 -66.3063 211.284 cv
-70.0485 209.872 li
-63.5773 192.718 -41.1422 187.515 -23.1935 192.393 cv
-16.4215 194.234 -9.92883 197.098 -3.65002 199.867 cv
5.62781 203.958 14.3905 207.823 24.0819 208.752 cv
42.3187 210.505 59.7362 201.869 76.5809 193.519 cv
92.6752 185.542 109.307 177.289 127.096 177.647 cv
140.903 177.922 153.37 182.684 165.427 187.289 cv
169.746 188.938 174.212 190.644 178.656 192.108 cv
188.389 195.315 212.825 201.302 229.468 187.665 cv
236.776 181.677 240.916 173.713 244.919 166.011 cv
249.157 157.859 253.539 149.43 261.609 143.783 cv
277.558 132.614 302.602 137.917 320.347 148.127 cv
329.961 153.659 338.065 160.891 345.902 167.884 cv
351.67 173.031 357.634 178.353 364.135 182.93 cv
378.68 193.171 400.192 201.351 416.941 193.602 cv
431.29 186.963 437.119 172.398 443.29 156.978 cv
445.938 150.364 448.675 143.524 452.156 137.26 cv
460.823 121.663 476.498 109.02 495.164 102.574 cv
513.886 96.1073 533.332 96.6718 548.518 104.121 cv
546.756 107.712 li
517.026 93.1288 472.75 108.431 455.652 139.203 cv
452.295 145.246 449.605 151.966 447.004 158.465 cv
440.814 173.932 434.413 189.925 418.621 197.232 cv
395.594 207.887 369.333 191.481 361.832 186.2 cv
355.143 181.491 349.092 176.091 343.239 170.869 cv
335.554 164.011 327.607 156.919 318.352 151.594 cv
302.244 142.325 278.332 136.952 263.903 147.06 cv
256.635 152.145 252.668 159.776 248.469 167.856 cv
244.279 175.916 239.946 184.25 232.003 190.759 cv
213.826 205.652 187.765 199.321 177.404 195.907 cv
172.872 194.414 168.362 192.691 164 191.025 cv
151.723 186.336 140.126 181.907 127.016 181.646 cv
110.222 181.304 94.0204 189.339 78.3568 197.103 cv
62.5834 204.921 46.3197 212.982 28.9344 212.982 cv
cp
.87451 .933333 .972549 rgb
f
32.1122 213.18 mo
30.2445 213.18 28.3656 213.09 26.4716 212.9 cv
15.9618 211.846 6.43103 207.42 -2.78625 203.141 cv
-8.89026 200.307 -15.2028 197.376 -21.6696 195.506 cv
-37.6886 190.874 -58.7115 195.237 -64.7443 210.364 cv
-68.4596 208.882 li
-61.5968 191.675 -38.2526 186.548 -20.5582 191.663 cv
-13.7965 193.619 -7.3429 196.615 -1.10168 199.513 cv
8.22449 203.843 17.0331 207.933 26.871 208.92 cv
45.413 210.787 62.3285 202.606 80.2382 193.952 cv
95.411 186.621 111.1 179.04 127.723 178.326 cv
141.219 177.743 153.391 182.079 165.15 186.27 cv
169.552 187.838 174.103 189.46 178.632 190.786 cv
188.218 193.591 212.326 198.686 229.114 185.457 cv
236.504 179.633 240.886 172.211 245.124 165.034 cv
249.879 156.979 254.371 149.372 262.637 144.184 cv
278.433 134.254 303.688 139.66 321.71 149.422 cv
331.357 154.649 339.474 161.516 347.323 168.156 cv
353.05 173.001 358.973 178.011 365.435 182.331 cv
372.568 187.1 397.452 201.955 418.215 192.884 cv
432.579 186.608 438.636 172.519 445.048 157.603 cv
447.732 151.36 450.508 144.904 453.962 138.944 cv
462.683 123.899 478.124 111.564 496.328 105.101 cv
514.608 98.6113 533.472 98.8359 548.081 105.716 cv
546.377 109.335 li
517.858 95.9037 474.628 111.268 457.423 140.95 cv
454.088 146.703 451.361 153.047 448.723 159.183 cv
442.286 174.157 435.629 189.641 419.817 196.549 cv
414.599 198.829 409.176 199.746 403.831 199.747 cv
386.006 199.748 369.027 189.545 363.211 185.657 cv
356.562 181.211 350.552 176.126 344.739 171.209 cv
336.691 164.401 329.089 157.97 319.805 152.939 cv
302.807 143.731 279.195 138.498 264.765 147.571 cv
257.321 152.243 253.07 159.444 248.568 167.067 cv
244.143 174.562 239.568 182.312 231.59 188.599 cv
213.339 202.981 187.689 197.603 177.509 194.624 cv
172.87 193.267 168.263 191.625 163.808 190.038 cv
151.884 185.789 140.618 181.774 127.894 182.322 cv
112.097 183.001 96.7855 190.399 81.9784 197.554 cv
66.0536 205.248 49.6381 213.18 32.1122 213.18 cv
cp
.843137 .921569 .972549 rgb
f
35.1302 213.371 mo
33.181 213.371 31.2196 213.273 29.2426 213.066 cv
18.5624 211.948 8.97888 207.275 -.288696 202.757 cv
-6.35999 199.796 -12.6378 196.736 -19.0953 194.759 cv
-35.2545 189.809 -56.7047 194.018 -63.1827 209.443 cv
-66.8707 207.894 li
-59.527 190.409 -35.7457 185.476 -17.9244 190.934 cv
-11.1666 193.003 -4.74573 196.134 1.46423 199.161 cv
10.8324 203.729 19.681 208.043 29.6595 209.088 cv
48.1991 211.034 65.9276 202.535 83.0731 194.319 cv
97.6 187.358 112.621 180.161 128.415 179.007 cv
141.733 178.033 153.704 181.837 165.282 185.514 cv
169.631 186.895 174.128 188.324 178.604 189.464 cv
188.044 191.869 211.827 196.077 228.761 183.249 cv
236.196 177.616 240.8 170.752 245.252 164.114 cv
250.354 156.507 255.174 149.321 263.671 144.585 cv
280.328 135.286 306.081 142.077 323.072 150.719 cv
332.75 155.642 340.882 162.141 348.746 168.425 cv
354.433 172.97 360.313 177.669 366.733 181.734 cv
373.948 186.302 399.081 200.554 419.491 192.166 cv
433.883 186.252 440.176 172.63 446.839 158.207 cv
449.55 152.341 452.352 146.274 455.77 140.627 cv
474.352 109.922 518.143 94.0429 547.643 107.31 cv
546.002 110.958 li
518.688 98.6728 476.5 114.1 459.192 142.698 cv
455.89 148.154 453.135 154.118 450.471 159.885 cv
443.777 174.373 436.855 189.355 421.012 195.866 cv
399.429 204.734 374.367 191.301 364.593 185.114 cv
357.987 180.931 352.02 176.162 346.249 171.55 cv
338.187 165.107 330.572 159.021 321.259 154.285 cv
305.144 146.088 280.901 139.545 265.62 148.079 cv
257.961 152.348 253.401 159.145 248.574 166.342 cv
243.938 173.253 239.145 180.4 231.176 186.437 cv
212.856 200.315 187.617 195.888 177.617 193.34 cv
173.028 192.171 168.474 190.725 164.071 189.327 cv
152.338 185.6 141.262 182.085 128.706 182.997 cv
113.667 184.095 98.993 191.126 84.8016 197.926 cv
68.9286 205.532 52.5692 213.371 35.1302 213.371 cv
cp
.811765 .909804 .972549 rgb
f
37.7787 213.544 mo
35.8705 213.544 33.9506 213.444 32.0145 213.233 cv
21.1688 212.049 11.5385 207.13 2.22498 202.373 cv
-3.81799 199.286 -10.066 196.095 -16.5201 194.011 cv
-32.8141 188.748 -54.6925 192.799 -61.6212 208.52 cv
-65.2814 206.907 li
-57.4542 189.147 -33.2413 184.408 -15.2906 190.204 cv
-8.53235 192.387 -2.13831 195.652 4.0448 198.811 cv
13.4496 203.615 22.3334 208.153 32.4481 209.256 cv
50.2469 211.199 67.3075 202.844 83.8075 194.764 cv
98.3646 187.636 113.417 180.266 129.24 179.681 cv
142.704 179.186 154.729 182.242 166.361 185.198 cv
170.343 186.21 174.46 187.257 178.572 188.144 cv
187.868 190.15 211.332 193.473 228.407 181.042 cv
235.84 175.631 240.636 169.342 245.274 163.26 cv
250.757 156.07 255.936 149.278 264.711 144.991 cv
281.051 136.988 306.276 143.373 324.434 152.017 cv
334.139 156.637 342.29 162.766 350.173 168.693 cv
355.817 172.937 361.654 177.326 368.029 181.136 cv
377.394 186.734 401.28 198.947 420.768 191.449 cv
435.205 185.895 441.746 172.729 448.67 158.789 cv
451.394 153.305 454.211 147.634 457.58 142.309 cv
476.257 112.784 518.973 96.8622 547.2 108.904 cv
545.63 112.583 li
519.517 101.441 478.369 116.927 460.96 144.447 cv
457.702 149.598 454.932 155.175 452.252 160.569 cv
444.972 175.226 438.095 189.07 422.205 195.182 cv
401.076 203.31 375.845 190.468 365.977 184.57 cv
359.42 180.65 353.497 176.197 347.769 171.89 cv
339.688 165.814 332.056 160.076 322.714 155.628 cv
305.4 147.386 281.533 141.208 266.469 148.584 cv
258.542 152.456 253.868 158.587 248.455 165.685 cv
243.643 171.996 238.666 178.521 230.762 184.275 cv
212.379 197.659 187.551 194.174 177.728 192.055 cv
173.545 191.152 169.392 190.096 165.375 189.075 cv
153.495 186.055 142.268 183.204 129.387 183.678 cv
114.413 184.231 99.7489 191.412 85.5668 198.356 cv
70.2928 205.835 54.5502 213.543 37.7787 213.544 cv
cp
.780392 .901961 .976471 rgb
f
40.7181 213.731 mo
38.7543 213.731 36.7792 213.625 34.786 213.399 cv
23.7792 212.15 14.1068 206.985 4.75281 201.99 cv
-1.26575 198.776 -7.48938 195.453 -13.9435 193.263 cv
-30.3727 187.686 -52.6759 191.583 -60.0592 207.597 cv
-63.692 205.922 li
-55.3766 187.888 -30.7272 183.342 -12.6583 189.475 cv
-5.89417 191.77 .47644 195.172 6.63708 198.461 cv
16.0751 203.501 24.9896 208.261 35.2372 209.424 cv
52.8949 211.43 69.8578 203.154 86.2587 195.152 cv
100.288 188.306 114.796 181.227 129.952 180.36 cv
143.331 179.595 155.227 182.084 166.735 184.492 cv
170.581 185.296 174.558 186.128 178.536 186.827 cv
187.689 188.434 210.837 190.875 228.055 178.835 cv
235.414 173.689 240.358 167.994 245.14 162.487 cv
251.053 155.675 256.638 149.242 265.757 145.4 cv
285.825 136.92 316.783 149.313 325.793 153.314 cv
335.525 157.636 343.701 163.393 351.607 168.96 cv
357.207 172.903 362.998 176.981 369.323 180.539 cv
381.119 187.174 403.651 197.323 422.048 190.732 cv
436.549 185.538 443.349 172.815 450.548 159.345 cv
453.271 154.25 456.087 148.981 459.391 143.989 cv
478.156 115.639 519.797 99.6738 546.753 110.496 cv
545.263 114.208 li
520.344 104.205 480.232 119.75 462.727 146.197 cv
459.526 151.033 456.755 156.217 454.076 161.23 cv
446.502 175.4 439.35 188.784 423.396 194.498 cv
403.508 201.622 379.752 190.995 367.362 184.025 cv
360.86 180.368 354.985 176.231 349.304 172.23 cv
341.199 166.523 333.543 161.132 324.17 156.97 cv
315.531 153.135 285.901 141.23 267.312 149.086 cv
259.049 152.567 254.003 158.379 248.16 165.109 cv
243.449 170.535 238.11 176.684 230.347 182.114 cv
211.906 195.009 187.487 192.461 177.844 190.767 cv
173.803 190.057 169.793 189.218 165.916 188.407 cv
154.145 185.945 143.027 183.622 130.18 184.353 cv
115.827 185.174 101.687 192.074 88.0126 198.747 cv
72.8885 206.126 57.3016 213.73 40.7181 213.731 cv
cp
.74902 .890196 .976471 rgb
f
43.6517 213.92 mo
41.6346 213.92 39.6049 213.807 37.5575 213.565 cv
26.3954 212.249 16.6864 206.84 7.29724 201.609 cv
1.29724 198.267 -4.90686 194.81 -11.3668 192.514 cv
-27.9948 186.604 -50.9015 190.882 -58.4982 206.672 cv
-62.1027 204.937 li
-53.297 186.632 -28.214 182.281 -10.027 188.746 cv
-3.25208 191.154 3.10046 194.693 9.24402 198.115 cv
18.7094 203.389 27.6503 208.37 38.0258 209.593 cv
55.5629 211.663 72.4252 203.456 88.7318 195.524 cv
102.226 188.96 116.18 182.172 130.662 181.04 cv
143.979 180.002 155.765 181.92 167.164 183.775 cv
170.855 184.376 174.673 184.997 178.497 185.512 cv
187.509 186.724 210.344 188.285 227.702 176.629 cv
234.888 171.804 239.917 166.725 244.781 161.812 cv
251.197 155.331 257.257 149.209 266.808 145.814 cv
285.004 139.321 312.426 148.541 327.152 154.614 cv
336.913 158.64 345.12 164.024 353.057 169.23 cv
358.608 172.872 364.348 176.637 370.616 179.942 cv
385.248 187.658 406.274 195.668 423.328 190.016 cv
437.918 185.18 444.993 172.886 452.484 159.869 cv
455.187 155.172 457.982 150.315 461.204 145.669 cv
480.052 118.491 520.613 102.485 546.301 112.087 cv
544.9 115.834 li
521.165 106.963 482.09 122.57 464.491 147.949 cv
461.366 152.456 458.613 157.239 455.951 161.864 cv
448.069 175.56 440.624 188.497 424.587 193.813 cv
406.194 199.909 384.071 191.559 368.749 183.48 cv
362.313 180.086 356.492 176.268 350.863 172.575 cv
342.724 167.236 335.037 162.193 325.627 158.312 cv
311.431 152.456 285.086 143.537 268.15 149.582 cv
259.457 152.673 253.973 158.212 247.623 164.626 cv
242.854 169.443 237.45 174.903 229.932 179.95 cv
211.438 192.369 187.429 190.749 177.964 189.476 cv
174.085 188.955 170.24 188.329 166.521 187.723 cv
154.843 185.821 143.812 184.023 130.974 185.029 cv
117.247 186.101 103.641 192.72 90.4818 199.121 cv
75.4984 206.41 60.058 213.919 43.6517 213.92 cv
cp
.717647 .878431 .976471 rgb
f
46.5824 214.108 mo
44.5131 214.109 42.4301 213.988 40.329 213.731 cv
29.014 212.348 19.2719 206.696 9.85046 201.229 cv
3.86707 197.758 -2.31995 194.168 -8.7887 191.766 cv
-25.545 185.544 -48.8903 189.677 -56.9366 205.746 cv
-60.5133 203.955 li
-51.213 185.381 -25.7018 181.218 -7.39612 188.016 cv
-.608032 190.537 5.72937 194.214 11.8578 197.769 cv
21.3485 203.276 30.3129 208.477 40.8143 209.761 cv
58.2303 211.889 75.0082 203.75 91.2328 195.878 cv
104.181 189.596 117.57 183.1 131.372 181.722 cv
144.668 180.396 156.368 181.742 167.682 183.044 cv
171.189 183.448 174.816 183.865 178.453 184.2 cv
187.328 185.016 209.853 185.697 227.351 174.424 cv
234.22 169.998 239.462 165.36 244.086 161.268 cv
251.419 154.78 257.751 149.177 267.863 146.234 cv
281.102 142.359 301.507 145.617 328.511 155.915 cv
338.304 159.65 346.551 164.66 354.527 169.504 cv
360.022 172.843 365.705 176.294 371.906 179.347 cv
393.563 190.006 411.297 193.355 424.61 189.301 cv
439.318 184.823 446.688 172.938 454.492 160.357 cv
457.152 156.067 459.903 151.631 463.019 147.348 cv
481.94 121.338 521.418 105.291 545.843 113.678 cv
544.544 117.461 li
521.987 109.717 483.943 125.385 466.253 149.701 cv
463.224 153.865 460.513 158.237 457.891 162.465 cv
449.68 175.705 441.924 188.21 425.775 193.127 cv
411.458 197.488 392.738 194.058 370.139 182.935 cv
363.779 179.805 358.02 176.307 352.45 172.923 cv
344.268 167.953 336.539 163.258 327.085 159.652 cv
300.916 149.673 281.369 146.45 268.984 150.074 cv
259.73 152.768 253.709 158.095 246.737 164.264 cv
242.006 168.45 236.643 173.195 229.517 177.787 cv
210.974 189.733 187.373 189.037 178.087 188.183 cv
174.404 187.844 170.754 187.424 167.225 187.018 cv
155.608 185.681 144.636 184.417 131.769 185.703 cv
118.676 187.009 105.612 193.348 92.9789 199.477 cv
78.1263 206.684 62.8226 214.108 46.5824 214.108 cv
cp
.686275 .866667 .976471 rgb
f
49.5087 214.298 mo
47.3885 214.298 45.2528 214.17 43.1 213.898 cv
31.6371 212.446 21.8651 206.551 12.4149 200.851 cv
6.4447 197.249 .270874 193.525 -6.20959 191.018 cv
-23.0909 184.488 -46.8761 188.474 -55.3751 204.818 cv
-58.924 202.973 li
-49.1281 184.132 -23.1862 180.161 -4.76624 187.287 cv
2.03894 189.92 8.36414 193.736 14.4808 197.425 cv
23.9935 203.163 32.9789 208.584 43.6029 209.93 cv
60.9066 212.121 77.6107 204.034 93.7616 196.214 cv
106.153 190.213 118.966 184.008 132.08 182.405 cv
145.411 180.774 157.067 181.542 168.34 182.287 cv
171.616 182.503 175.004 182.726 178.408 182.891 cv
196.87 183.776 214.581 179.893 226.998 172.22 cv
233.341 168.3 238.41 164.372 242.881 160.905 cv
251.029 154.59 258.064 149.137 268.922 146.66 cv
285.345 142.884 308.947 149.88 329.868 157.217 cv
339.704 160.666 348.003 165.302 356.029 169.785 cv
361.459 172.817 367.073 175.953 373.194 178.751 cv
395.594 188.99 412.831 192.208 425.893 188.586 cv
440.756 184.465 448.093 173.498 456.588 160.799 cv
459.177 156.93 461.854 152.928 464.836 149.026 cv
483.822 124.183 522.21 108.095 545.378 115.268 cv
544.194 119.089 li
522.811 112.465 485.789 128.195 468.014 151.455 cv
465.108 155.256 462.467 159.205 459.913 163.023 cv
451.347 175.829 443.255 187.923 426.962 192.441 cv
412.956 196.326 394.823 193.037 371.531 182.389 cv
365.264 179.524 359.578 176.348 354.079 173.277 cv
345.838 168.674 338.055 164.327 328.544 160.991 cv
309.355 154.261 285.337 146.991 269.814 150.559 cv
259.816 152.84 253.424 157.794 245.332 164.067 cv
240.782 167.594 235.624 171.591 229.101 175.622 cv
211.182 186.695 189.528 187.434 178.215 186.886 cv
174.776 186.72 171.37 186.496 168.076 186.278 cv
156.479 185.514 145.524 184.791 132.566 186.375 cv
120.112 187.898 108.159 193.686 95.5048 199.814 cv
80.7714 206.949 65.5946 214.298 49.5087 214.298 cv
cp
.654902 .854902 .980392 rgb
f
52.4315 214.487 mo
50.2616 214.487 48.076 214.352 45.8719 214.063 cv
34.2635 212.542 24.4652 206.407 14.9896 200.474 cv
9.02917 196.742 2.86609 192.882 -3.63 190.269 cv
-20.6349 183.431 -44.8575 187.271 -53.8131 203.89 cv
-57.3346 201.992 li
-47.0392 182.886 -20.6666 179.104 -2.13782 186.559 cv
4.68835 189.304 11.0043 193.259 17.1127 197.083 cv
26.6444 203.052 35.6478 208.689 46.3915 210.098 cv
63.6005 212.351 80.2352 204.307 96.3221 196.527 cv
108.145 190.809 120.37 184.896 132.787 183.088 cv
146.25 181.128 157.413 181.3 169.232 181.482 cv
172.239 181.529 175.267 181.576 178.357 181.585 cv
189.046 181.645 209.514 180.163 226.647 170.016 cv
232.148 166.758 236.784 163.598 240.874 160.811 cv
250.501 154.251 258.105 149.069 269.983 147.093 cv
286.771 144.272 311.071 152.059 330.596 158.318 cv
331.225 158.52 li
341.12 161.692 349.489 165.954 357.583 170.076 cv
362.931 172.8 368.461 175.616 374.48 178.157 cv
390.333 184.85 410.648 192.001 427.179 187.873 cv
442.241 184.111 449.912 173.489 458.794 161.189 cv
461.276 157.753 463.843 154.199 466.655 150.702 cv
485.697 127.022 522.994 110.892 544.904 116.858 cv
543.853 120.717 li
523.634 115.213 487.63 131.001 469.772 153.209 cv
467.025 156.625 464.489 160.136 462.037 163.531 cv
453.084 175.928 444.628 187.638 428.148 191.754 cv
410.469 196.167 389.35 188.776 372.925 181.842 cv
366.773 179.245 361.179 176.396 355.768 173.641 cv
347.449 169.404 339.592 165.402 330.004 162.329 cv
329.374 162.127 li
310.263 156.001 286.476 148.377 270.643 151.038 cv
259.63 152.871 252.707 157.587 243.127 164.116 cv
238.987 166.937 234.295 170.135 228.685 173.457 cv
210.727 184.092 189.467 185.636 178.345 185.585 cv
175.238 185.576 172.194 185.529 169.17 185.482 cv
157.516 185.303 146.509 185.133 133.364 187.046 cv
121.557 188.766 110.145 194.285 98.0638 200.128 cv
83.4393 207.202 68.3754 214.487 52.4315 214.487 cv
cp
.623529 .843137 .980392 rgb
f
55.3514 214.678 mo
53.1322 214.678 50.8973 214.535 48.6434 214.23 cv
36.8929 212.638 27.0712 206.263 17.5731 200.098 cv
11.6205 196.234 5.46521 192.239 -1.04944 189.521 cv
-18.1754 182.374 -42.8361 186.069 -52.2516 202.959 cv
-55.7457 201.012 li
-45.2897 182.256 -18.2247 178.019 .490601 185.83 cv
7.33923 188.687 13.6488 192.782 19.7509 196.743 cv
29.2997 202.94 38.3187 208.794 49.1805 210.266 cv
66.3007 212.583 82.8837 204.57 98.9178 196.817 cv
110.158 191.382 121.78 185.763 133.493 183.773 cv
147.284 181.431 158.617 181.019 170.616 180.582 cv
173.149 180.49 175.703 180.397 178.305 180.285 cv
188.818 179.83 209.033 177.604 226.295 167.812 cv
230.474 165.442 234.234 163.166 237.552 161.158 cv
249.266 154.067 257.73 148.944 271.044 147.532 cv
285.946 145.927 306.549 152.076 324.728 157.501 cv
327.409 158.301 330.035 159.084 332.581 159.825 cv
342.561 162.726 350.65 166.445 359.215 170.382 cv
364.456 172.792 369.876 175.284 375.765 177.563 cv
393.919 184.595 412.869 190.622 428.465 187.16 cv
443.785 183.759 451.83 173.449 461.144 161.511 cv
463.472 158.527 465.88 155.441 468.476 152.378 cv
487.563 129.859 523.759 113.686 544.421 118.448 cv
543.523 122.345 li
524.456 117.953 489.464 133.803 471.528 154.964 cv
468.984 157.965 466.602 161.018 464.298 163.971 cv
454.916 175.996 446.055 187.352 429.332 191.065 cv
412.7 194.759 393.062 188.552 374.32 181.294 cv
368.317 178.969 362.841 176.452 357.544 174.017 cv
349.118 170.143 341.16 166.484 331.464 163.665 cv
328.91 162.923 326.274 162.137 323.584 161.334 cv
305.766 156.017 285.569 149.989 271.47 151.509 cv
259.039 152.828 251.315 157.503 239.623 164.58 cv
236.283 166.602 232.497 168.894 228.269 171.292 cv
210.277 181.497 189.35 183.81 178.477 184.281 cv
175.867 184.394 173.304 184.487 170.762 184.58 cv
158.898 185.011 147.693 185.419 134.163 187.717 cv
123.01 189.611 112.153 194.86 100.659 200.418 cv
86.1302 207.443 71.1669 214.677 55.3514 214.678 cv
cp
.592157 .831373 .980392 rgb
f
58.2675 214.868 mo
56.0004 214.868 53.7177 214.718 51.4144 214.395 cv
39.5248 212.732 29.682 206.119 20.163 199.723 cv
14.2162 195.728 8.06726 191.596 1.53162 188.772 cv
-15.7115 181.322 -40.8107 184.871 -50.6896 202.029 cv
-54.1564 200.033 li
-43.2125 181.027 -15.7067 176.967 3.11853 185.101 cv
9.99207 188.071 16.2968 192.307 22.3939 196.403 cv
31.9579 202.829 40.9911 208.898 51.9691 210.434 cv
69.0155 212.817 85.558 204.817 101.552 197.079 cv
112.194 191.93 123.197 186.605 134.198 184.46 cv
148.765 181.619 160.606 180.564 173.143 179.447 cv
174.828 179.297 176.527 179.145 178.249 178.988 cv
188.596 178.044 208.549 175.051 225.945 165.61 cv
228.068 164.457 230.073 163.355 231.984 162.304 cv
247.411 153.821 256.723 148.7 272.106 147.978 cv
285.393 147.337 302.801 152.322 319.634 157.147 cv
324.639 158.581 329.366 159.936 333.936 161.13 cv
344.05 163.773 352.272 167.144 360.977 170.713 cv
366.072 172.801 371.34 174.96 377.047 176.972 cv
392.263 182.334 413.1 189.678 429.753 186.449 cv
445.403 183.413 453.871 173.373 463.677 161.747 cv
465.792 159.239 467.979 156.646 470.3 154.053 cv
489.418 132.692 524.502 116.479 543.926 120.038 cv
543.204 123.973 li
525.28 120.683 491.289 136.6 473.281 156.721 cv
470.999 159.27 468.831 161.84 466.735 164.326 cv
456.869 176.023 447.55 187.072 430.515 190.375 cv
412.796 193.814 391.365 186.259 375.717 180.744 cv
369.915 178.7 364.601 176.521 359.46 174.413 cv
350.882 170.897 342.78 167.576 332.924 165 cv
328.309 163.794 323.56 162.433 318.532 160.992 cv
302.011 156.257 284.931 151.358 272.297 151.974 cv
257.837 152.652 248.831 157.604 233.911 165.809 cv
231.995 166.863 229.983 167.969 227.853 169.125 cv
209.828 178.909 189.265 182 178.613 182.972 cv
176.888 183.129 175.186 183.281 173.498 183.431 cv
161.067 184.538 149.327 185.584 134.964 188.386 cv
124.473 190.432 114.185 195.41 103.294 200.679 cv
88.8485 207.669 73.9711 214.867 58.2675 214.868 cv
cp
.560784 .819608 .980392 rgb
f
61.182 215.059 mo
58.8671 215.059 56.5375 214.901 54.1859 214.561 cv
42.1595 212.825 32.2982 205.975 22.7611 199.35 cv
16.8177 195.222 10.6722 190.953 4.11365 188.024 cv
-13.2467 180.27 -38.7828 183.673 -49.1281 201.098 cv
-52.5675 199.056 li
-41.1349 179.8 -13.1847 175.917 5.74451 184.372 cv
12.6459 187.454 18.9481 191.831 25.0433 196.065 cv
34.62 202.717 43.6659 209 54.7582 210.602 cv
71.7494 213.054 88.2621 205.051 104.23 197.309 cv
114.256 192.449 124.622 187.422 134.901 185.148 cv
151.772 181.414 165.203 179.524 178.192 177.697 cv
188.373 176.264 208.068 172.503 225.594 163.408 cv
244.811 153.434 255.67 148.227 273.166 148.432 cv
285.008 148.542 300.292 152.865 315.074 157.045 cv
321.854 158.963 328.866 160.946 335.291 162.438 cv
345.627 164.838 354.055 167.873 362.978 171.086 cv
367.852 172.84 372.89 174.654 378.328 176.381 cv
381.547 177.41 li
396.705 182.262 415.568 188.303 431.042 185.739 cv
447.117 183.076 456.078 173.248 466.454 161.869 cv
468.275 159.87 470.16 157.804 472.127 155.726 cv
491.263 135.522 525.25 119.275 543.415 121.631 cv
542.9 125.598 li
526.089 123.41 493.105 139.393 475.031 158.477 cv
473.09 160.527 471.219 162.579 469.409 164.563 cv
458.532 176.493 449.138 186.796 431.696 189.685 cv
415.27 192.405 395.894 186.203 380.328 181.219 cv
377.117 180.194 li
371.606 178.443 366.532 176.616 361.623 174.849 cv
352.814 171.677 344.493 168.682 334.386 166.334 cv
327.869 164.821 320.811 162.825 313.985 160.894 cv
299.457 156.786 284.435 152.537 273.125 152.432 cv
256.515 152.248 246.589 157.018 227.436 166.958 cv
209.382 176.328 189.183 180.189 178.75 181.658 cv
165.837 183.475 152.484 185.354 135.766 189.053 cv
125.945 191.226 116.245 195.929 105.975 200.909 cv
91.597 207.88 76.7899 215.058 61.182 215.059 cv
cp
.529412 .807843 .984314 rgb
f
64.0927 215.25 mo
61.7323 215.25 59.3553 215.085 56.9574 214.727 cv
44.7968 212.915 34.9188 205.83 25.3656 198.978 cv
19.4242 194.717 13.2802 190.31 6.69617 187.275 cv
-10.7775 179.22 -36.7521 182.477 -47.5656 200.165 cv
-50.9786 198.079 li
-39.0553 178.574 -10.6652 174.867 8.37097 183.643 cv
15.3016 186.838 21.6029 191.357 27.6971 195.728 cv
37.2855 202.606 46.3427 209.101 57.5472 210.771 cv
74.495 213.295 90.9994 205.268 106.956 197.504 cv
116.347 192.935 126.056 188.211 135.603 185.837 cv
151.462 181.894 163.785 179.163 178.135 176.41 cv
188.148 174.49 207.584 169.961 225.243 161.206 cv
244.428 151.696 256.047 147.663 274.224 148.891 cv
284.725 149.585 297.443 153.219 310.908 157.066 cv
319.541 159.532 328.469 162.083 336.645 163.747 cv
347.38 165.931 356.157 168.654 365.45 171.537 cv
369.954 172.934 374.611 174.379 379.606 175.792 cv
381.721 176.391 383.905 177.031 386.143 177.687 cv
401.041 182.054 417.926 187.003 432.333 185.03 cv
448.956 182.752 458.047 173.522 469.557 161.838 cv
470.99 160.383 472.45 158.9 473.956 157.4 cv
493.09 138.354 525.934 122.059 542.887 123.228 cv
542.614 127.218 li
526.91 126.139 494.91 142.186 476.779 160.235 cv
475.282 161.726 473.83 163.199 472.406 164.645 cv
460.839 176.388 450.85 186.53 432.876 188.993 cv
417.621 191.083 400.301 186.005 385.018 181.525 cv
382.792 180.873 380.62 180.236 378.518 179.641 cv
373.474 178.214 368.792 176.762 364.265 175.357 cv
355.07 172.505 346.386 169.811 335.848 167.666 cv
327.519 165.972 318.516 163.399 309.809 160.912 cv
296.555 157.125 284.036 153.549 273.956 152.882 cv
256.705 151.713 245.535 155.612 227.019 164.79 cv
208.935 173.755 189.101 178.38 178.888 180.339 cv
164.614 183.077 152.353 185.794 136.568 189.719 cv
127.429 191.991 118.335 196.416 108.706 201.101 cv
94.3788 208.073 79.6263 215.25 64.0927 215.25 cv
cp
.498039 .796078 .984314 rgb
f
67.0023 215.442 mo
64.5961 215.443 62.1727 215.269 59.7284 214.893 cv
47.4364 213.005 37.5438 205.686 27.9764 198.609 cv
22.035 194.213 15.8915 189.668 9.27966 186.527 cv
-8.30774 178.171 -34.7189 181.283 -46.0035 199.232 cv
-49.3903 197.103 li
-36.9738 177.354 -8.14465 173.821 10.9965 182.914 cv
17.9584 186.222 24.2606 190.884 30.3553 195.393 cv
39.954 202.494 49.0209 209.202 60.3358 210.939 cv
77.2655 213.543 93.7762 205.466 109.74 197.657 cv
118.471 193.386 127.5 188.969 136.304 186.528 cv
140.825 185.275 145.032 184.087 149.055 182.95 cv
159.3 180.057 168.148 177.557 178.077 175.129 cv
187.923 172.721 207.099 167.424 224.892 159.006 cv
245.028 149.481 257.271 147.137 275.277 149.357 cv
284.514 150.481 295.475 153.709 307.079 157.127 cv
317.434 160.177 328.141 163.331 337.999 165.057 cv
349.565 167.082 359.042 169.556 369.075 172.175 cv
372.849 173.16 376.75 174.179 380.884 175.205 cv
384.007 175.98 387.215 176.848 390.611 177.766 cv
404.489 181.519 420.216 185.772 433.624 184.323 cv
450.968 182.447 460.743 173.241 473.117 161.585 cv
473.996 160.757 474.885 159.919 475.789 159.073 cv
494.898 141.187 526.618 124.867 542.339 124.832 cv
542.348 128.832 li
527.717 128.864 496.699 144.98 478.523 161.993 cv
477.622 162.837 476.735 163.672 475.86 164.497 cv
463.45 176.185 452.733 186.28 434.054 188.299 cv
419.901 189.831 403.784 185.473 389.566 181.627 cv
386.191 180.715 383.003 179.852 379.92 179.087 cv
375.763 178.055 371.85 177.033 368.065 176.045 cv
358.113 173.447 348.714 170.994 337.31 168.997 cv
327.228 167.232 316.41 164.046 305.948 160.964 cv
294.508 157.595 283.702 154.412 274.791 153.328 cv
257.653 151.212 245.944 153.473 226.602 162.622 cv
208.49 171.19 189.02 176.57 179.027 179.015 cv
169.168 181.426 160.351 183.916 150.142 186.8 cv
146.113 187.938 141.9 189.127 137.372 190.383 cv
128.925 192.725 120.46 196.866 111.497 201.25 cv
97.202 208.243 82.4838 215.442 67.0023 215.442 cv
cp
.470588 .788235 .984314 rgb
f
69.9095 215.636 mo
67.4584 215.636 64.9901 215.454 62.4999 215.059 cv
50.0785 213.093 40.1722 205.542 30.5927 198.24 cv
24.6498 193.71 18.5043 189.026 11.8636 185.779 cv
-5.83752 177.123 -32.6837 180.088 -44.441 198.298 cv
-47.8014 196.128 li
-34.8912 176.135 -5.61829 172.777 13.6205 182.185 cv
20.6156 185.605 26.9203 190.411 33.0175 195.059 cv
42.6254 202.383 51.7006 209.3 63.1249 211.108 cv
80.0653 213.792 96.5966 205.641 112.585 197.761 cv
121.003 193.612 128.954 189.694 137.003 187.222 cv
144.661 184.869 151.349 182.605 157.816 180.416 cv
164.615 178.115 171.036 175.941 178.018 173.853 cv
187.691 170.959 206.597 164.897 224.542 156.807 cv
246.185 147.048 259.439 146.825 276.327 149.829 cv
284.357 151.244 293.678 154.123 303.546 157.17 cv
315.501 160.863 327.862 164.68 339.353 166.369 cv
353.316 168.42 364.291 170.78 377 173.512 cv
382.16 174.619 li
386.253 175.494 390.494 176.561 394.983 177.69 cv
408.491 181.088 422.455 184.6 434.917 183.617 cv
453.212 182.172 463.853 172.833 477.325 161.01 cv
477.626 160.746 li
496.673 144.029 527.245 127.682 541.767 126.448 cv
542.105 130.434 li
528.517 131.588 498.463 147.78 480.265 163.752 cv
479.963 164.016 li
465.934 176.33 454.852 186.056 435.232 187.604 cv
422.124 188.644 407.185 184.884 394.008 181.569 cv
389.554 180.449 385.347 179.391 381.324 178.531 cv
376.159 177.423 li
363.52 174.705 352.604 172.359 338.771 170.327 cv
326.977 168.593 314.465 164.729 302.366 160.992 cv
292.621 157.983 283.416 155.14 275.63 153.768 cv
259.164 150.84 246.996 151.07 226.186 160.453 cv
208.03 168.639 188.932 174.763 179.165 177.685 cv
172.251 179.753 165.863 181.915 159.099 184.205 cv
152.605 186.403 145.89 188.676 138.178 191.045 cv
130.435 193.423 122.624 197.273 114.353 201.349 cv
100.07 208.389 85.3641 215.635 69.9095 215.636 cv
cp
.439216 .776471 .984314 rgb
f
72.8163 215.829 mo
70.3202 215.83 67.8075 215.639 65.2709 215.225 cv
52.7225 213.179 42.8046 205.397 33.2133 197.872 cv
27.2679 193.207 21.12 188.384 14.4481 185.03 cv
-5.54016 174.981 -31.7941 180.631 -42.8785 197.363 cv
-46.2135 195.154 li
-34.066 176.818 -5.46399 170.544 16.2445 181.456 cv
23.2743 184.989 29.5824 189.939 35.6825 194.725 cv
45.2992 202.27 54.3822 209.397 65.9144 211.277 cv
82.8842 214.045 99.4681 205.79 115.506 197.807 cv
123.177 193.988 130.423 190.381 137.702 187.916 cv
146.311 185.002 153.67 182.051 160.786 179.198 cv
166.559 176.884 172.012 174.697 177.962 172.582 cv
187.431 169.215 206.028 162.403 224.191 154.607 cv
245.32 145.539 259.184 146.1 277.372 150.305 cv
284.247 151.884 292.043 154.444 300.298 157.153 cv
313.107 161.358 327.625 166.124 340.707 167.682 cv
356.316 169.541 368.296 171.322 383.435 174.036 cv
388.477 174.94 393.731 176.18 399.293 177.493 cv
411.768 180.438 424.674 183.485 436.211 182.913 cv
454.295 182.018 465.079 174.217 479.466 162.418 cv
498.395 146.893 527.805 130.527 541.169 128.082 cv
541.889 132.017 li
529.287 134.323 500.183 150.6 482.002 165.511 cv
467.459 177.438 455.675 185.955 436.409 186.908 cv
424.295 187.501 411.12 184.395 398.374 181.386 cv
392.867 180.086 387.664 178.858 382.728 177.974 cv
367.674 175.274 355.759 173.503 340.234 171.654 cv
326.756 170.049 312.037 165.217 299.05 160.954 cv
290.885 158.273 283.173 155.742 276.474 154.203 cv
259.109 150.188 245.887 149.649 225.769 158.283 cv
207.504 166.123 188.816 172.968 179.302 176.351 cv
173.426 178.44 168.01 180.611 162.275 182.911 cv
155.108 185.784 147.698 188.755 138.985 191.705 cv
131.963 194.082 124.835 197.631 117.288 201.387 cv
102.993 208.503 88.2748 215.828 72.8163 215.829 cv
cp
.407843 .764706 .988235 rgb
f
75.723 216.024 mo
73.1825 216.024 70.6229 215.824 68.0414 215.391 cv
55.369 213.263 45.4413 205.253 35.8402 197.506 cv
29.8905 192.706 23.7386 187.742 17.0336 184.282 cv
-3.07776 173.902 -29.798 179.463 -41.3156 196.427 cv
-44.6251 194.18 li
-32.028 175.626 -2.95276 169.466 18.8676 180.727 cv
25.934 184.373 32.2469 189.467 38.3524 194.393 cv
47.9755 202.158 57.0653 209.492 68.7035 211.446 cv
85.7484 214.308 102.406 205.904 118.518 197.779 cv
125.405 194.305 131.911 191.024 138.399 188.614 cv
147.401 185.268 154.987 181.727 162.324 178.303 cv
167.556 175.861 172.498 173.554 177.907 171.315 cv
190.884 165.944 207.833 158.94 223.841 152.409 cv
244.626 143.928 259.056 145.295 278.411 150.784 cv
284.179 152.412 290.567 154.663 297.33 157.048 cv
311.438 162.021 327.428 167.659 342.061 168.997 cv
345.12 169.276 348.039 169.534 350.867 169.783 cv
362.51 170.809 372.564 171.696 384.708 173.455 cv
390.601 174.308 396.745 175.778 403.249 177.335 cv
414.798 180.099 426.737 182.957 437.407 182.214 cv
455.965 180.922 467.557 174.59 481.309 164.09 cv
499.666 150.073 528.455 133.382 540.545 129.744 cv
541.698 133.574 li
529.965 137.104 501.797 153.479 483.736 167.269 cv
469.38 178.23 457.243 184.843 437.684 186.205 cv
426.404 186.99 414.16 184.059 402.318 181.225 cv
395.905 179.69 389.847 178.241 384.135 177.413 cv
372.102 175.671 362.099 174.788 350.516 173.768 cv
347.683 173.518 344.76 173.26 341.697 172.98 cv
326.568 171.597 310.328 165.872 296 160.82 cv
289.299 158.458 282.97 156.226 277.323 154.633 cv
258.406 149.269 245.175 148.025 225.352 156.112 cv
209.352 162.641 192.41 169.642 179.436 175.012 cv
174.11 177.216 169.207 179.505 164.016 181.928 cv
156.607 185.386 148.946 188.962 139.792 192.363 cv
133.513 194.696 127.104 197.929 120.319 201.35 cv
105.981 208.581 91.2235 216.024 75.723 216.024 cv
cp
.376471 .752941 .988235 rgb
f
78.4393 216.199 mo
75.9056 216.2 73.3627 215.997 70.8119 215.556 cv
58.017 213.345 48.08 205.107 38.4701 197.141 cv
32.5155 192.205 26.3583 187.101 19.6195 183.533 cv
-.613403 172.823 -27.8024 178.298 -39.7526 195.491 cv
-43.0367 193.207 li
-29.9899 174.438 -.439575 168.389 21.4906 179.998 cv
28.5936 183.758 34.9125 188.996 41.0228 194.061 cv
50.6527 202.044 59.7489 209.585 71.4935 211.615 cv
88.6488 214.58 105.42 205.979 121.637 197.663 cv
127.696 194.555 133.42 191.62 139.095 189.313 cv
148.264 185.587 155.906 181.496 163.296 177.539 cv
167.965 175.04 172.792 172.455 177.855 170.054 cv
189.218 164.663 206.359 156.846 223.491 150.211 cv
246.136 141.44 262.229 145.501 279.446 151.268 cv
284.157 152.839 289.254 154.782 294.649 156.839 cv
309.943 162.671 327.277 169.28 343.415 170.313 cv
349.067 170.675 354.269 170.893 359.299 171.102 cv
368.094 171.47 376.4 171.817 385.981 172.875 cv
392.652 173.612 399.599 175.205 406.954 176.893 cv
417.664 179.351 428.736 181.89 438.705 181.511 cv
455.811 180.857 467.859 176.589 483.156 165.763 cv
500.555 153.448 528.662 136.448 539.9 131.44 cv
541.528 135.095 li
531.605 139.516 504.385 155.638 485.466 169.027 cv
469.463 180.355 456.83 184.821 438.857 185.508 cv
428.364 185.911 417.024 183.307 406.06 180.792 cv
398.82 179.131 391.983 177.562 385.541 176.851 cv
376.097 175.808 367.856 175.464 359.132 175.099 cv
354.08 174.888 348.856 174.669 343.159 174.305 cv
326.418 173.233 308.783 166.509 293.224 160.577 cv
287.869 158.536 282.811 156.607 278.178 155.061 cv
261.122 149.349 246.374 145.638 224.935 153.941 cv
207.917 160.532 190.871 168.307 179.569 173.668 cv
174.595 176.027 170.023 178.475 165.184 181.066 cv
157.702 185.072 149.965 189.214 140.601 193.019 cv
135.089 195.259 129.441 198.155 123.462 201.222 cv
109.655 208.303 94.2577 216.199 78.4393 216.199 cv
cp
.345098 .741176 .988235 rgb
f
81.3485 216.396 mo
78.7694 216.396 76.1805 216.184 73.5829 215.722 cv
60.6674 213.424 50.7225 204.961 41.1049 196.777 cv
35.1439 191.705 28.9803 186.459 22.2059 182.785 cv
1.85437 171.747 -25.8033 177.136 -38.1896 194.554 cv
-41.4493 192.235 li
-27.9518 173.252 2.07166 167.313 24.1132 179.269 cv
31.2548 183.143 37.58 188.525 43.6971 193.73 cv
53.3329 201.931 62.4344 209.676 74.2831 211.784 cv
91.6083 214.867 108.529 206.004 124.889 197.432 cv
130.068 194.719 134.96 192.155 139.79 190.015 cv
149.013 185.929 156.626 181.309 163.99 176.842 cv
168.416 174.157 172.994 171.38 177.806 168.796 cv
188.928 162.824 205.821 154.37 223.14 148.015 cv
245.701 139.735 262.454 144.809 280.474 151.753 cv
282.026 152.35 283.625 152.968 285.264 153.601 cv
302.872 160.411 324.787 168.886 344.966 171.648 cv
353.292 172.787 360.55 172.519 368.232 172.236 cv
374.26 172.013 380.49 171.784 387.253 172.298 cv
395.145 172.899 403.763 174.701 412.096 176.443 cv
421.509 178.412 431.243 180.447 440.098 180.81 cv
456.631 181.487 469.222 177.739 485.006 167.436 cv
499.63 157.89 519.78 145.326 531.819 137.818 cv
534.841 135.934 537.383 134.349 539.245 133.182 cv
541.37 136.571 li
539.506 137.739 536.961 139.326 533.936 141.213 cv
521.91 148.711 501.782 161.262 487.193 170.786 cv
473.384 179.799 460.069 185.626 439.934 184.807 cv
430.748 184.43 420.85 182.36 411.277 180.358 cv
402.692 178.563 394.582 176.868 386.949 176.287 cv
380.413 175.789 374.296 176.015 368.38 176.233 cv
360.864 176.51 353.093 176.797 344.423 175.611 cv
323.781 172.785 301.624 164.217 283.821 157.332 cv
282.185 156.7 280.589 156.082 279.038 155.487 cv
261.169 148.601 245.81 143.955 224.518 151.769 cv
207.419 158.045 190.707 166.409 179.699 172.32 cv
174.978 174.854 170.648 177.481 166.064 180.262 cv
158.593 184.795 150.868 189.481 141.411 193.672 cv
136.701 195.759 131.865 198.293 126.745 200.976 cv
112.828 208.267 97.3114 216.395 81.3485 216.396 cv
cp
.313726 .729412 .988235 rgb
f
84.2635 216.594 mo
81.6376 216.594 78.9999 216.372 76.3524 215.887 cv
63.3197 213.501 53.368 204.815 43.7435 196.414 cv
37.7758 191.205 31.6044 185.819 24.7928 182.037 cv
4.32166 170.67 -23.8048 175.972 -36.6261 193.616 cv
-39.8615 191.264 li
-25.9122 172.068 4.58435 166.241 26.7343 178.54 cv
33.9159 182.527 40.2494 188.055 46.3739 193.401 cv
56.015 201.816 65.1215 209.764 77.0731 211.953 cv
94.6473 215.171 112.535 205.544 128.313 197.05 cv
132.546 194.771 136.544 192.62 140.484 190.72 cv
149.696 186.279 157.237 181.146 164.53 176.183 cv
168.765 173.301 173.144 170.32 177.761 167.542 cv
188.671 160.975 205.339 151.875 222.79 145.818 cv
245.42 137.964 262.075 143.796 281.497 152.241 cv
281.647 152.306 li
299.511 160.052 323.975 170.66 346.308 172.96 cv
354.524 173.807 361.7 173.18 369.297 172.518 cv
375.387 171.987 381.685 171.435 388.524 171.724 cv
397.396 172.095 407.051 174.089 416.388 176.018 cv
424.774 177.75 433.447 179.542 441.394 180.114 cv
458.79 181.366 471.54 178.279 486.861 169.11 cv
506.086 157.604 530.751 141.728 538.595 134.97 cv
541.206 138 li
533.193 144.905 508.284 160.951 488.915 172.542 cv
473.024 182.052 459.176 185.402 441.107 184.103 cv
432.896 183.513 424.092 181.694 415.578 179.935 cv
406.397 178.039 396.904 176.078 388.357 175.72 cv
381.776 175.447 375.608 175.983 369.644 176.503 cv
362.196 177.153 354.495 177.824 345.898 176.939 cv
322.951 174.576 298.159 163.825 280.056 155.976 cv
279.903 155.91 li
261.292 147.818 245.367 142.216 224.102 149.597 cv
206.976 155.541 190.571 164.5 179.824 170.969 cv
175.303 173.69 170.971 176.639 166.781 179.49 cv
159.367 184.536 151.701 189.753 142.222 194.323 cv
138.361 196.184 134.402 198.315 130.209 200.572 cv
116.136 208.148 100.444 216.593 84.2635 216.594 cv
cp
.282353 .717647 .992157 rgb
f
87.1893 216.795 mo
84.5131 216.795 81.8241 216.562 79.1229 216.053 cv
65.974 213.575 56.0165 204.667 46.3861 196.053 cv
40.41 190.707 34.2303 185.179 27.3802 181.289 cv
6.79285 169.598 -21.8029 174.811 -35.0626 192.677 cv
-38.2745 190.293 li
-23.8727 170.888 7.09851 165.172 29.3558 177.81 cv
36.578 181.912 42.9198 187.585 49.0531 193.072 cv
58.6991 201.7 67.8104 209.851 79.8632 212.122 cv
97.7938 215.497 115.947 205.385 131.964 196.46 cv
135.166 194.676 138.191 192.991 141.178 191.427 cv
150.336 186.633 157.779 180.997 164.976 175.548 cv
169.052 172.462 173.266 169.271 177.72 166.29 cv
188.426 159.126 204.874 149.377 222.439 143.622 cv
245.201 136.164 262.398 143.008 282.514 152.729 cv
302.49 162.362 325.647 172.767 347.648 174.275 cv
356.267 174.865 363.779 173.877 371.732 172.831 cv
377.444 172.079 383.351 171.302 389.734 171.152 cv
399.857 170.913 410.796 173.284 421.381 175.576 cv
428.51 177.12 435.882 178.716 442.691 179.418 cv
460.721 181.276 474.056 178.776 488.72 170.786 cv
506.661 161.01 531.299 144.648 537.969 136.799 cv
541.017 139.389 li
533.959 147.695 509.267 164.145 490.634 174.298 cv
475.195 182.709 461.188 185.345 442.281 183.397 cv
435.252 182.673 427.77 181.053 420.534 179.486 cv
410.178 177.243 399.478 174.919 389.828 175.151 cv
383.66 175.296 377.862 176.059 372.254 176.797 cv
364.456 177.823 356.394 178.885 347.374 178.265 cv
324.664 176.708 301.089 166.127 280.775 156.331 cv
261.48 147.008 245.027 140.431 223.685 147.423 cv
206.551 153.037 190.442 162.589 179.945 169.615 cv
175.588 172.53 171.421 175.685 167.391 178.737 cv
160.063 184.285 152.485 190.022 143.033 194.971 cv
140.092 196.51 137.09 198.183 133.911 199.955 cv
119.619 207.917 103.685 216.794 87.1893 216.795 cv
cp
.25098 .705882 .992157 rgb
f
90.1346 216.999 mo
87.4037 216.999 84.6552 216.753 81.8925 216.218 cv
68.6307 213.646 58.6678 204.518 49.0326 195.692 cv
43.0472 190.209 36.8583 184.539 29.9686 180.541 cv
9.26404 168.525 -19.7999 173.651 -33.4987 191.738 cv
-36.6871 189.323 li
-21.8312 169.708 9.61169 164.103 31.9764 177.081 cv
39.2411 181.297 45.5922 187.116 51.7347 192.743 cv
61.3851 201.583 70.5004 209.934 82.6542 212.291 cv
101.08 215.865 119.59 205.085 135.92 195.575 cv
137.949 194.393 139.935 193.236 141.871 192.137 cv
150.944 186.986 158.272 180.857 165.36 174.929 cv
169.298 171.636 173.37 168.229 177.683 165.041 cv
188.185 157.279 204.414 146.881 222.088 141.427 cv
245.071 134.336 262.771 142.202 283.526 153.219 cv
286.853 154.989 li
304.872 164.587 327.302 176.536 348.832 175.593 cv
356.102 175.275 362.787 174.172 369.251 173.105 cv
376.151 171.966 383.286 170.788 391.068 170.581 cv
401.971 170.293 413.734 172.782 425.1 175.191 cv
431.692 176.588 437.918 177.908 443.989 178.725 cv
462.872 181.267 476.372 179.454 490.582 172.463 cv
508.204 163.795 531.758 147.779 537.383 138.654 cv
540.789 140.752 li
534.716 150.602 510.839 166.956 492.348 176.052 cv
477.361 183.425 463.197 185.349 443.455 182.689 cv
437.235 181.852 430.644 180.455 424.27 179.104 cv
413.132 176.743 401.623 174.309 391.174 174.58 cv
383.666 174.779 376.981 175.883 369.903 177.051 cv
363.321 178.138 356.516 179.261 349.006 179.589 cv
326.385 180.578 303.422 168.346 284.973 158.519 cv
281.651 156.753 li
261.727 146.176 244.777 138.613 223.268 145.249 cv
206.131 150.537 190.313 160.68 180.061 168.258 cv
175.845 171.375 171.819 174.742 167.926 177.997 cv
160.703 184.039 153.233 190.287 143.846 195.616 cv
141.922 196.708 139.95 197.857 137.933 199.031 cv
123.345 207.527 107.081 216.999 90.1346 216.999 cv
cp
.219608 .694118 .992157 rgb
f
92.9027 217.184 mo
90.1635 217.184 87.4149 216.932 84.6615 216.383 cv
71.2894 213.713 61.3217 204.369 51.682 195.332 cv
45.6869 189.712 39.4877 183.9 32.557 179.793 cv
11.7367 167.454 -17.7975 172.492 -31.9347 190.798 cv
-35.1007 188.353 li
-19.7911 168.53 12.1254 163.035 34.5961 176.351 cv
41.9037 180.683 48.2655 186.646 54.4178 192.414 cv
64.0726 201.465 73.1923 210.014 85.4447 212.46 cv
104.591 216.283 124.399 204.059 140.312 194.238 cv
142.563 192.851 li
151.527 187.337 158.733 180.72 165.703 174.321 cv
169.519 170.816 173.465 167.193 177.652 163.794 cv
192.634 151.632 207.467 143.369 221.738 139.233 cv
246.861 131.95 267.749 144.016 284.533 153.709 cv
285.622 154.337 li
304.283 165.106 327.518 178.51 350.187 176.916 cv
357.528 176.401 364.303 174.923 370.855 173.494 cv
377.652 172.012 384.68 170.478 392.34 170.013 cv
404.332 169.29 417.152 172.11 429.552 174.841 cv
435.027 176.047 440.199 177.186 445.286 178.034 cv
461.96 180.811 476.362 181.213 492.449 174.142 cv
509.824 166.506 532.501 150.503 536.845 140.515 cv
540.513 142.109 li
535.672 153.241 512.146 169.855 494.059 177.804 cv
476.063 185.712 459.666 184.485 444.628 181.979 cv
439.439 181.115 433.975 179.912 428.691 178.747 cv
416.56 176.075 404.016 173.312 392.582 174.006 cv
385.231 174.453 378.662 175.885 371.707 177.402 cv
365.016 178.862 358.097 180.371 350.467 180.906 cv
326.562 182.578 302.755 168.842 283.622 157.802 cv
282.533 157.173 li
262.024 145.328 244.607 136.769 222.851 143.075 cv
209.097 147.061 194.737 155.077 180.173 166.899 cv
176.081 170.221 172.18 173.803 168.408 177.267 cv
161.3 183.794 153.95 190.543 144.659 196.258 cv
142.413 197.642 li
128.1 206.476 110.75 217.184 92.9027 217.184 cv
cp
.188235 .682353 .992157 rgb
f
95.9154 217.402 mo
93.0985 217.402 90.2704 217.132 87.4305 216.548 cv
73.951 213.777 63.9794 204.218 54.3368 194.974 cv
48.33 189.216 42.119 183.262 35.1459 179.045 cv
14.2098 166.383 -15.7936 171.336 -30.3702 189.858 cv
-33.5138 187.384 li
-17.7501 167.354 14.64 161.97 37.2162 175.622 cv
44.5677 180.068 50.9413 186.178 57.1049 192.086 cv
66.7631 201.346 75.8861 210.091 88.2362 212.63 cv
106.843 216.456 125.62 205.309 143.255 193.567 cv
152.089 187.684 159.167 180.586 166.013 173.722 cv
169.721 170.005 173.554 166.161 177.625 162.548 cv
192.311 149.518 207.035 140.935 221.387 137.039 cv
246.898 130.115 268.322 143.469 285.535 154.199 cv
303.378 165.311 327.819 180.529 351.543 178.241 cv
358.924 177.528 365.761 175.672 372.373 173.877 cv
379.094 172.053 386.043 170.166 393.612 169.448 cv
406.726 168.208 420.636 171.443 434.089 174.574 cv
438.423 175.583 442.518 176.536 446.582 177.345 cv
463.964 180.802 478.733 181.865 494.32 175.824 cv
511.518 169.157 533.147 153.431 536.35 142.365 cv
540.193 143.477 li
536.57 155.992 513.872 172.534 495.766 179.553 cv
479.279 185.944 463.868 184.861 445.802 181.268 cv
441.674 180.447 437.357 179.442 433.182 178.47 cv
420.042 175.411 406.455 172.249 393.99 173.431 cv
386.761 174.116 380.281 175.875 373.421 177.737 cv
366.648 179.576 359.645 181.477 351.927 182.222 cv
350.172 182.392 348.413 182.473 346.66 182.473 cv
323.368 182.474 300.466 168.21 283.419 157.594 cv
263.091 144.921 244.474 134.916 222.435 140.9 cv
208.683 144.633 194.5 152.923 180.28 165.54 cv
176.3 169.072 172.51 172.872 168.846 176.547 cv
161.861 183.55 154.639 190.792 145.472 196.896 cv
129.722 207.383 113.05 217.402 95.9154 217.402 cv
cp
.156863 .67451 .996078 rgb
f
98.6444 217.582 mo
95.8334 217.583 93.016 217.309 90.1991 216.712 cv
76.6141 213.836 66.64 204.065 56.994 194.616 cv
50.9755 188.721 44.7523 182.624 37.7357 178.297 cv
16.684 165.314 -13.7877 170.178 -28.8063 188.917 cv
-31.9274 186.415 li
-15.7115 166.181 17.1532 160.904 39.8353 174.893 cv
47.2323 179.454 53.6176 185.709 59.7928 191.759 cv
69.4554 201.224 78.5814 210.164 91.0272 212.799 cv
109.682 216.75 129.107 204.98 143.946 194.287 cv
152.631 188.028 159.581 180.454 166.302 173.128 cv
169.909 169.197 173.639 165.131 177.604 161.303 cv
191.992 147.405 206.605 138.504 221.036 134.847 cv
245.05 128.759 264.906 140.232 286.532 154.689 cv
307.665 168.805 330.192 182.353 352.9 179.567 cv
360.302 178.659 367.183 176.421 373.836 174.257 cv
380.497 172.091 387.385 169.851 394.885 168.885 cv
409.175 167.044 424.197 170.796 438.724 174.425 cv
441.891 175.216 444.881 175.963 447.879 176.658 cv
463.116 180.185 479.396 183.158 496.194 177.508 cv
513.23 171.779 533.827 156.314 535.893 144.193 cv
539.836 144.865 li
537.472 158.735 515.611 175.198 497.469 181.299 cv
479.679 187.283 462.769 184.212 446.977 180.554 cv
443.945 179.852 440.798 179.066 437.755 178.306 cv
423.587 174.767 408.939 171.108 395.396 172.852 cv
388.267 173.771 381.858 175.855 375.074 178.061 cv
368.239 180.284 361.172 182.582 353.387 183.537 cv
351.189 183.807 348.994 183.936 346.809 183.936 cv
325.085 183.937 304.081 171.22 284.31 158.015 cv
263.492 144.099 244.435 133.043 222.018 138.724 cv
208.272 142.208 194.264 150.772 180.383 164.18 cv
176.505 167.925 172.816 171.945 169.249 175.833 cv
162.392 183.306 155.302 191.034 146.285 197.532 cv
132.941 207.148 115.979 217.581 98.6444 217.582 cv
cp
.12549 .662745 .996078 rgb
f
101.451 217.776 mo
98.5448 217.776 95.7162 217.477 92.9672 216.877 cv
79.3041 213.897 69.3466 203.933 59.7172 194.296 cv
53.6703 188.245 47.4178 181.988 40.3285 177.552 cv
19.1898 164.208 -11.7501 168.983 -27.2413 187.976 cv
-30.3409 185.448 li
-13.6368 164.967 19.701 159.801 42.4569 174.165 cv
49.9252 178.838 56.3417 185.259 62.5468 191.469 cv
72.1927 201.122 81.3036 210.239 93.8197 212.969 cv
108.232 216.115 125.329 210.07 144.638 195.01 cv
153.155 188.367 159.976 180.32 166.574 172.538 cv
170.089 168.392 173.724 164.104 177.586 160.058 cv
191.679 145.294 206.179 136.074 220.684 132.654 cv
247.165 126.411 270.492 143.038 287.526 155.179 cv
307.555 169.445 330.876 184.372 354.257 180.894 cv
361.669 179.791 368.58 177.171 375.263 174.636 cv
381.875 172.129 388.713 169.537 396.159 168.324 cv
411.681 165.795 427.841 170.187 443.468 174.434 cv
445.388 174.956 447.291 175.473 449.174 175.972 cv
466.261 180.495 481.734 183.86 498.071 179.196 cv
514.949 174.378 534.525 159.156 535.462 145.996 cv
539.452 146.28 li
538.371 161.476 517.354 177.851 499.169 183.043 cv
481.877 187.977 465.169 184.343 448.151 179.839 cv
446.259 179.338 444.347 178.818 442.419 178.294 cv
427.204 174.159 411.468 169.882 396.802 172.272 cv
389.754 173.419 383.404 175.827 376.682 178.376 cv
369.8 180.986 362.685 183.684 354.846 184.851 cv
329.993 188.553 305.87 173.155 285.205 158.436 cv
263.928 143.272 244.453 131.158 221.602 136.547 cv
207.864 139.786 194.028 148.625 180.48 162.819 cv
176.699 166.781 173.102 171.022 169.625 175.125 cv
162.897 183.061 155.94 191.268 147.098 198.164 cv
130.376 211.206 115.066 217.776 101.451 217.776 cv
cp
.0941176 .65098 .996078 rgb
f
104.345 217.983 mo
101.496 217.983 98.6205 217.69 95.7347 217.041 cv
81.9652 213.945 71.9994 203.769 62.3617 193.929 cv
56.306 187.746 50.0443 181.351 42.9178 176.804 cv
21.6581 163.155 -9.75305 167.841 -25.6769 187.035 cv
-28.755 184.48 li
-11.6061 163.811 22.204 158.753 45.0746 173.434 cv
52.5819 178.226 59.0062 184.786 65.2196 191.13 cv
74.8754 200.989 83.996 210.302 96.6127 213.139 cv
115.926 217.481 135.426 204.1 145.33 195.737 cv
153.66 188.703 160.354 180.188 166.828 171.955 cv
170.26 167.591 173.807 163.079 177.574 158.812 cv
191.368 143.184 205.754 133.646 220.333 130.462 cv
245.302 125.008 266.834 139.273 288.516 155.667 cv
308.419 170.711 331.659 186.411 355.615 182.223 cv
363.03 180.927 369.962 177.921 376.666 175.015 cv
383.237 172.167 390.031 169.222 397.434 167.765 cv
414.258 164.455 432.365 169.872 448.34 174.652 cv
450.47 175.288 li
465.614 179.805 482.779 184.925 499.951 180.888 cv
516.67 176.958 535.232 161.961 535.05 147.773 cv
539.05 147.721 li
539.262 164.222 519.097 180.497 500.866 184.782 cv
482.661 189.061 464.95 183.781 449.326 179.122 cv
447.194 178.484 li
430.904 173.61 414.06 168.571 398.206 171.689 cv
391.227 173.063 384.634 175.921 378.257 178.685 cv
371.339 181.684 364.186 184.786 356.304 186.163 cv
330.764 190.626 306.678 174.409 286.103 158.858 cv
265.195 143.048 244.496 129.278 221.186 134.37 cv
207.456 137.369 193.792 146.483 180.573 161.459 cv
176.881 165.641 173.37 170.107 169.973 174.427 cv
163.375 182.818 156.552 191.496 147.911 198.792 cv
138.878 206.42 122.228 217.981 104.345 217.983 cv
cp
.0627451 .639216 .996078 rgb
f
107.371 218.212 mo
104.465 218.213 101.501 217.902 98.5013 217.206 cv
84.6293 213.988 74.6561 203.604 65.0106 193.562 cv
58.9447 187.247 52.6722 180.716 45.5077 176.055 cv
24.1263 162.104 -7.755 166.701 -24.1115 186.092 cv
-27.1691 183.513 li
-18.5787 173.329 -5.99182 166.595 8.27283 164.55 cv
22.5092 162.511 36.5062 165.406 47.6913 172.704 cv
55.2391 177.614 61.6732 184.313 67.8954 190.791 cv
77.5614 200.855 86.6913 210.36 99.4056 213.309 cv
119.711 218.021 138.772 203.1 146.023 196.466 cv
154.147 189.034 160.719 180.055 167.074 171.371 cv
170.426 166.791 173.892 162.055 177.565 157.566 cv
191.062 141.077 205.333 131.221 219.982 128.271 cv
245.488 123.132 268.314 139.229 289.502 156.156 cv
310.777 173.148 333.68 188.228 356.974 183.553 cv
364.387 182.065 371.024 178.826 378.051 175.395 cv
384.585 172.206 391.342 168.908 398.71 167.208 cv
416.873 163.015 436.22 169.443 451.764 174.606 cv
452.057 174.704 li
468.302 180.1 485.099 185.684 501.833 182.583 cv
518.389 179.519 535.94 164.73 534.65 149.525 cv
538.635 149.187 li
540.145 166.971 520.835 183.134 502.561 186.517 cv
484.815 189.799 467.521 184.056 450.795 178.499 cv
450.503 178.402 li
435.433 173.397 416.68 167.169 399.61 171.105 cv
392.686 172.703 386.138 175.899 379.806 178.99 cv
372.86 182.38 365.679 185.886 357.761 187.475 cv
332.854 192.47 309.037 176.877 287.006 159.281 cv
266.555 142.944 244.595 127.397 220.771 132.192 cv
207.052 134.955 193.557 144.344 180.661 160.1 cv
177.056 164.504 173.622 169.196 170.302 173.733 cv
163.831 182.575 157.141 191.717 148.723 199.417 cv
142.049 205.522 125.934 218.211 107.371 218.212 cv
cp
.0313726 .627451 1 rgb
f
110.154 218.4 mo
107.13 218.4 104.156 218.061 101.268 217.37 cv
87.2972 214.025 77.3163 203.436 67.6635 193.196 cv
61.5863 186.749 55.3021 180.082 48.0975 175.307 cv
26.5936 161.055 -5.75745 165.561 -22.5465 185.15 cv
-25.5836 182.546 li
-16.7833 172.279 -3.98792 165.517 10.4457 163.506 cv
24.8793 161.495 39.0355 164.503 50.3075 171.973 cv
57.8964 177.003 64.3412 183.84 70.5741 190.452 cv
80.2504 200.717 89.3895 210.413 102.2 213.48 cv
116.373 216.875 133.017 210.788 146.717 197.2 cv
154.616 189.366 161.066 179.926 167.304 170.797 cv
170.584 165.997 173.976 161.032 177.562 156.319 cv
190.944 138.727 204.704 128.836 219.629 126.08 cv
245.738 121.265 269.893 139.329 290.485 156.643 cv
311.705 174.484 334.61 190.254 358.334 184.883 cv
365.745 183.206 372.39 179.597 379.426 175.775 cv
385.927 172.245 392.649 168.594 399.988 166.652 cv
417.795 161.943 436.717 167.937 453.057 173.926 cv
455.004 174.641 li
470.887 180.476 487.314 186.512 503.717 184.284 cv
513.558 182.95 523.276 177.328 529.079 169.612 cv
533.391 163.879 535.181 157.532 534.257 151.256 cv
538.214 150.673 li
539.298 158.03 537.244 165.41 532.275 172.016 cv
525.853 180.555 515.116 186.775 504.255 188.248 cv
486.858 190.605 469.965 184.399 453.624 178.395 cv
451.68 177.682 li
435.19 171.637 417.693 166.105 401.012 170.519 cv
394.137 172.338 387.629 175.872 381.335 179.29 cv
374.37 183.074 367.167 186.985 359.217 188.785 cv
333.792 194.538 309.92 178.209 287.911 159.705 cv
267.106 142.212 244.75 125.507 220.356 130.014 cv
206.454 132.58 193.497 141.977 180.745 158.741 cv
177.222 163.373 173.859 168.294 170.607 173.054 cv
164.263 182.337 157.703 191.937 149.534 200.039 cv
137.575 211.901 123.393 218.4 110.154 218.4 cv
cp
0 .615686 1 rgb
f
grestore
93.5267 86.4321 mo
94.016 86.1537 94.4032 85.7563 94.6888 85.2397 cv
94.9745 84.7231 95.1171 84.1249 95.1171 83.4452 cv
95.1171 82.7655 94.9745 82.1679 94.6888 81.6508 cv
94.4032 81.1347 94.016 80.7367 93.5267 80.4584 cv
93.0375 80.1796 92.4867 80.0405 91.8749 80.0405 cv
91.2635 80.0405 90.7128 80.1796 90.2235 80.4584 cv
89.7343 80.7367 89.347 81.1347 89.0614 81.6508 cv
88.7758 82.1679 88.6332 82.7655 88.6332 83.4452 cv
88.6332 84.1249 88.7758 84.7231 89.0614 85.2397 cv
89.347 85.7563 89.7343 86.1537 90.2235 86.4321 cv
90.7128 86.7109 91.2635 86.85 91.8749 86.85 cv
92.4867 86.85 93.0375 86.7109 93.5267 86.4321 cv
cp
97.6249 73.7602 mo
97.6249 88.8891 li
95.1781 88.8891 li
95.1781 87.4823 li
94.7567 87.9989 94.2367 88.3862 93.6185 88.6445 cv
92.9999 88.9023 92.3168 89.0317 91.5692 89.0317 cv
90.5223 89.0317 89.5814 88.8007 88.7455 88.3388 cv
87.9095 87.8769 87.2533 87.2206 86.7777 86.371 cv
86.3016 85.5219 86.0643 84.5463 86.0643 83.4452 cv
86.0643 82.3442 86.3016 81.3725 86.7777 80.5297 cv
87.2533 79.6869 87.9095 79.0346 88.7455 78.5722 cv
89.5814 78.1103 90.5223 77.8788 91.5692 77.8788 cv
92.2894 77.8788 92.9486 78.0014 93.5472 78.246 cv
94.1449 78.4906 94.6547 78.8578 95.076 79.3471 cv
95.076 73.7602 li
97.6249 73.7602 li
cp
0 .615686 1 rgb
f
103.629 80.6415 mo
103.065 81.1244 102.722 81.7665 102.6 82.5683 cv
108.778 82.5683 li
108.669 81.7802 108.336 81.141 107.779 80.6518 cv
107.221 80.1625 106.528 79.9179 105.699 79.9179 cv
104.883 79.9179 104.193 80.1596 103.629 80.6415 cv
cp
111.163 84.2607 mo
102.62 84.2607 li
102.769 85.0629 103.161 85.6982 103.792 86.1669 cv
104.425 86.6362 105.209 86.8705 106.147 86.8705 cv
107.344 86.8705 108.329 86.4765 109.104 85.6879 cv
110.47 87.2577 li
109.981 87.8427 109.362 88.2846 108.615 88.5834 cv
107.867 88.8822 107.024 89.0317 106.086 89.0317 cv
104.89 89.0317 103.836 88.7944 102.926 88.3183 cv
102.015 87.8427 101.312 87.1801 100.816 86.3305 cv
100.319 85.4809 100.072 84.519 100.072 83.4452 cv
100.072 82.3852 100.313 81.4301 100.795 80.5805 cv
101.278 79.7314 101.947 79.0688 102.804 78.5927 cv
103.66 78.1171 104.625 77.8788 105.699 77.8788 cv
106.759 77.8788 107.707 78.1132 108.543 78.5824 cv
109.379 79.0512 110.032 79.7109 110.5 80.56 cv
110.97 81.4096 111.204 82.392 111.204 83.5063 cv
111.204 83.683 111.19 83.9345 111.163 84.2607 cv
cp
f
114.425 88.685 mo
113.582 88.454 112.909 88.162 112.407 87.8085 cv
113.385 85.8715 li
113.874 86.1977 114.462 86.4594 115.149 86.6567 cv
115.835 86.8534 116.512 86.9521 117.178 86.9521 cv
118.7 86.9521 119.461 86.5512 119.461 85.7489 cv
119.461 85.3686 119.267 85.1039 118.88 84.954 cv
118.493 84.8046 117.871 84.662 117.015 84.5258 cv
116.118 84.3901 115.387 84.2338 114.823 84.0571 cv
114.259 83.8803 113.769 83.5712 113.355 83.1293 cv
112.94 82.6874 112.733 82.0727 112.733 81.2841 cv
112.733 80.2509 113.164 79.4252 114.028 78.8066 cv
114.891 78.1884 116.056 77.8788 117.524 77.8788 cv
118.272 77.8788 119.019 77.9638 119.767 78.1337 cv
120.515 78.3041 121.126 78.5317 121.602 78.8168 cv
120.623 80.7538 li
119.699 80.2104 118.659 79.9384 117.504 79.9384 cv
116.756 79.9384 116.189 80.0502 115.801 80.2748 cv
115.414 80.4989 115.22 80.7948 115.22 81.1615 cv
115.22 81.5693 115.427 81.8583 115.842 82.0282 cv
116.257 82.1982 116.899 82.3578 117.769 82.5072 cv
118.639 82.6435 119.352 82.7997 119.91 82.9765 cv
120.467 83.1532 120.946 83.4521 121.347 83.8735 cv
121.748 84.2948 121.949 84.893 121.949 85.6674 cv
121.949 86.6869 121.507 87.5029 120.623 88.1142 cv
119.74 88.726 118.536 89.0317 117.015 89.0317 cv
116.131 89.0317 115.268 88.9159 114.425 88.685 cv
cp
f
124.151 78.0014 mo
126.7 78.0014 li
126.7 88.8891 li
124.151 88.8891 li
124.151 78.0014 li
cp
124.273 75.7685 mo
123.96 75.4765 123.804 75.1132 123.804 74.6777 cv
123.804 74.2431 123.96 73.8793 124.273 73.5868 cv
124.586 73.2948 124.973 73.1488 125.435 73.1488 cv
125.897 73.1488 126.285 73.288 126.598 73.5668 cv
126.91 73.8456 127.066 74.1957 127.066 74.6166 cv
127.066 75.0654 126.913 75.4423 126.608 75.7485 cv
126.302 76.0541 125.911 76.207 125.435 76.207 cv
124.973 76.207 124.586 76.061 124.273 75.7685 cv
cp
f
137.413 85.372 mo
138.032 84.7944 138.341 84.0434 138.341 83.1191 cv
138.341 82.2084 138.032 81.4672 137.413 80.8964 cv
136.795 80.3256 136.003 80.0405 135.038 80.0405 cv
134.059 80.0405 133.261 80.3256 132.642 80.8964 cv
132.024 81.4672 131.715 82.2084 131.715 83.1191 cv
131.715 84.0434 132.024 84.7944 132.642 85.372 cv
133.261 85.9496 134.059 86.2387 135.038 86.2387 cv
136.003 86.2387 136.795 85.9496 137.413 85.372 cv
cp
140.849 78.0014 mo
140.849 87.2377 li
140.849 91.0707 138.892 92.9872 134.977 92.9872 cv
133.93 92.9872 132.938 92.8549 132 92.5898 cv
131.062 92.3246 130.287 91.9404 129.676 91.4379 cv
130.818 89.5209 li
131.293 89.9155 131.895 90.2314 132.622 90.4692 cv
133.349 90.707 134.087 90.8261 134.834 90.8261 cv
136.03 90.8261 136.907 90.5541 137.465 90.0107 cv
138.022 89.4667 138.301 88.6376 138.301 87.5229 cv
138.301 86.9521 li
137.865 87.4281 137.335 87.788 136.71 88.0326 cv
136.085 88.2773 135.398 88.3998 134.651 88.3998 cv
133.618 88.3998 132.683 88.1791 131.848 87.7372 cv
131.012 87.2953 130.352 86.6738 129.87 85.8715 cv
129.387 85.0697 129.146 84.1523 129.146 83.1191 cv
129.146 82.0863 129.387 81.1718 129.87 80.3769 cv
130.352 79.5815 131.012 78.9667 131.848 78.5317 cv
132.683 78.0966 133.618 77.8788 134.651 77.8788 cv
135.439 77.8788 136.156 78.0082 136.802 78.2665 cv
137.447 78.5248 137.988 78.9189 138.423 79.4491 cv
138.423 78.0014 li
140.849 78.0014 li
cp
f
153.674 79.082 mo
154.503 79.8842 154.917 81.0732 154.917 82.6498 cv
154.917 88.8891 li
152.369 88.8891 li
152.369 82.9765 li
152.369 82.0248 152.144 81.308 151.696 80.8251 cv
151.247 80.3427 150.608 80.1015 149.779 80.1015 cv
148.842 80.1015 148.1 80.3837 147.557 80.9477 cv
147.013 81.5116 146.742 82.3237 146.742 83.3842 cv
146.742 88.8891 li
144.193 88.8891 li
144.193 78.0014 li
146.619 78.0014 li
146.619 79.4081 li
147.04 78.9052 147.57 78.5248 148.209 78.2665 cv
148.848 78.0082 149.569 77.8788 150.37 77.8788 cv
151.744 77.8788 152.845 78.2802 153.674 79.082 cv
cp
f
71.7723 95.8515 mo
69.9603 100.038 li
69.0038 100.038 li
67.1976 95.8515 li
68.244 95.8515 li
69.5179 98.8412 li
70.8094 95.8515 li
71.7723 95.8515 li
cp
f
77.3344 99.2602 mo
77.3344 100.038 li
74.0931 100.038 li
74.0931 95.8515 li
77.2567 95.8515 li
77.2567 96.6288 li
75.0555 96.6288 li
75.0555 97.538 li
76.9994 97.538 li
76.9994 98.2914 li
75.0555 98.2914 li
75.0555 99.2602 li
77.3344 99.2602 li
cp
f
80.9135 99.831 mo
80.5682 99.6459 80.2972 99.3886 80.1 99.06 cv
79.9027 98.7309 79.8041 98.3593 79.8041 97.9443 cv
79.8041 97.5297 79.9027 97.1581 80.1 96.829 cv
80.2972 96.5004 80.5682 96.2431 80.9135 96.0575 cv
81.2582 95.8725 81.6459 95.7797 82.0765 95.7797 cv
82.4393 95.7797 82.767 95.8432 83.0599 95.9711 cv
83.3534 96.0986 83.5995 96.2822 83.7987 96.5209 cv
83.1766 97.0951 li
82.8934 96.7685 82.5428 96.6049 82.1244 96.6049 cv
81.8651 96.6049 81.6337 96.6615 81.4305 96.7753 cv
81.2274 96.8891 81.0687 97.0473 80.955 97.2509 cv
80.8417 97.454 80.7845 97.6855 80.7845 97.9443 cv
80.7845 98.2035 80.8417 98.435 80.955 98.6381 cv
81.0687 98.8412 81.2274 98.9999 81.4305 99.1137 cv
81.6337 99.227 81.8651 99.2841 82.1244 99.2841 cv
82.5428 99.2841 82.8934 99.1186 83.1766 98.7875 cv
83.7987 99.3617 li
83.5995 99.6049 83.3519 99.7905 83.057 99.9179 cv
82.7621 100.045 82.433 100.109 82.0702 100.109 cv
81.6439 100.109 81.2582 100.017 80.9135 99.831 cv
cp
f
87.2489 96.6405 mo
85.9095 96.6405 li
85.9095 95.8515 li
89.5575 95.8515 li
89.5575 96.6405 li
88.2181 96.6405 li
88.2181 100.038 li
87.2489 100.038 li
87.2489 96.6405 li
cp
f
94.6884 99.1137 mo
94.8876 98.9999 95.0443 98.8412 95.1581 98.6381 cv
95.2714 98.435 95.3285 98.2035 95.3285 97.9443 cv
95.3285 97.6855 95.2714 97.454 95.1581 97.2509 cv
95.0443 97.0473 94.8876 96.8891 94.6884 96.7753 cv
94.4891 96.6615 94.266 96.6049 94.0184 96.6049 cv
93.7714 96.6049 93.5482 96.6615 93.349 96.7753 cv
93.1493 96.8891 92.993 97.0473 92.8793 97.2509 cv
92.766 97.454 92.7089 97.6855 92.7089 97.9443 cv
92.7089 98.2035 92.766 98.435 92.8793 98.6381 cv
92.993 98.8412 93.1493 98.9999 93.349 99.1137 cv
93.5482 99.227 93.7714 99.2841 94.0184 99.2841 cv
94.266 99.2841 94.4891 99.227 94.6884 99.1137 cv
cp
92.8436 99.828 mo
92.4945 99.641 92.2216 99.3827 92.0243 99.0536 cv
91.827 98.725 91.7284 98.3549 91.7284 97.9443 cv
91.7284 97.5336 91.827 97.164 92.0243 96.8349 cv
92.2216 96.5063 92.4945 96.248 92.8436 96.0605 cv
93.1923 95.8735 93.5839 95.7797 94.0184 95.7797 cv
94.453 95.7797 94.8441 95.8735 95.1908 96.0605 cv
95.5375 96.248 95.8109 96.5063 96.0101 96.8349 cv
96.2094 97.164 96.309 97.5336 96.309 97.9443 cv
96.309 98.3549 96.2094 98.725 96.0101 99.0536 cv
95.8109 99.3827 95.5375 99.641 95.1908 99.828 cv
94.8441 100.016 94.453 100.109 94.0184 100.109 cv
93.5839 100.109 93.1923 100.016 92.8436 99.828 cv
cp
f
101.434 96.829 mo
101.283 96.7035 101.061 96.6405 100.77 96.6405 cv
99.9813 96.6405 li
99.9813 98.1 li
100.77 98.1 li
101.061 98.1 101.283 98.0361 101.434 97.9086 cv
101.586 97.7812 101.661 97.6015 101.661 97.3705 cv
101.661 97.1352 101.586 96.9545 101.434 96.829 cv
cp
101.68 100.038 mo
100.872 98.8715 li
100.825 98.8715 li
99.9813 98.8715 li
99.9813 100.038 li
99.0126 100.038 li
99.0126 95.8515 li
100.825 95.8515 li
101.195 95.8515 101.517 95.913 101.79 96.0365 cv
102.063 96.1606 102.274 96.3359 102.421 96.5629 cv
102.569 96.7905 102.642 97.0595 102.642 97.3705 cv
102.642 97.6811 102.568 97.9496 102.418 98.1747 cv
102.268 98.3998 102.057 98.5722 101.781 98.6918 cv
102.72 100.038 li
101.68 100.038 li
cp
f
111.717 99.1825 mo
111.847 99.0986 111.911 98.9692 111.911 98.7939 cv
111.911 98.4467 111.654 98.2734 111.14 98.2734 cv
110.01 98.2734 li
110.01 99.308 li
111.14 99.308 li
111.395 99.308 111.588 99.266 111.717 99.1825 cv
cp
110.01 96.581 mo
110.01 97.5678 li
110.973 97.5678 li
111.212 97.5678 111.393 97.5258 111.517 97.4423 cv
111.641 97.3583 111.702 97.2348 111.702 97.0712 cv
111.702 96.9076 111.641 96.7851 111.517 96.7035 cv
111.393 96.622 111.212 96.581 110.973 96.581 cv
110.01 96.581 li
cp
112.683 98.2406 mo
112.819 98.4179 112.887 98.6362 112.887 98.8954 cv
112.887 99.2621 112.744 99.5444 112.459 99.7416 cv
112.174 99.9389 111.758 100.038 111.212 100.038 cv
109.047 100.038 li
109.047 95.8515 li
111.092 95.8515 li
111.602 95.8515 111.995 95.9491 112.267 96.1445 cv
112.54 96.3398 112.677 96.6049 112.677 96.9399 cv
112.677 97.143 112.628 97.3246 112.531 97.4838 cv
112.433 97.6435 112.296 97.769 112.121 97.8608 cv
112.36 97.9364 112.547 98.0629 112.683 98.2406 cv
cp
f
118.047 98.4047 mo
117.384 96.8022 li
116.72 98.4047 li
118.047 98.4047 li
cp
118.352 99.1405 mo
116.409 99.1405 li
116.038 100.038 li
115.045 100.038 li
116.911 95.8515 li
117.868 95.8515 li
119.74 100.038 li
118.723 100.038 li
118.352 99.1405 li
cp
f
122.936 99.831 mo
122.591 99.6459 122.32 99.3886 122.123 99.06 cv
121.926 98.7309 121.827 98.3593 121.827 97.9443 cv
121.827 97.5297 121.926 97.1581 122.123 96.829 cv
122.32 96.5004 122.591 96.2431 122.936 96.0575 cv
123.281 95.8725 123.669 95.7797 124.099 95.7797 cv
124.462 95.7797 124.79 95.8432 125.083 95.9711 cv
125.376 96.0986 125.622 96.2822 125.822 96.5209 cv
125.2 97.0951 li
124.916 96.7685 124.566 96.6049 124.147 96.6049 cv
123.888 96.6049 123.657 96.6615 123.453 96.7753 cv
123.25 96.8891 123.092 97.0473 122.978 97.2509 cv
122.865 97.454 122.807 97.6855 122.807 97.9443 cv
122.807 98.2035 122.865 98.435 122.978 98.6381 cv
123.092 98.8412 123.25 98.9999 123.453 99.1137 cv
123.657 99.227 123.888 99.2841 124.147 99.2841 cv
124.566 99.2841 124.916 99.1186 125.2 98.7875 cv
125.822 99.3617 li
125.622 99.6049 125.375 99.7905 125.08 99.9179 cv
124.785 100.045 124.456 100.109 124.093 100.109 cv
123.667 100.109 123.281 100.017 122.936 99.831 cv
cp
f
129.972 98.393 mo
129.41 98.9789 li
129.41 100.038 li
128.447 100.038 li
128.447 95.8515 li
129.41 95.8515 li
129.41 97.8071 li
131.264 95.8515 li
132.34 95.8515 li
130.606 97.7172 li
132.442 100.038 li
131.311 100.038 li
129.972 98.393 li
cp
f
137.525 97.8788 mo
138.41 97.8788 li
138.41 99.5771 li
138.183 99.7485 137.92 99.8803 137.621 99.9716 cv
137.322 100.063 137.021 100.109 136.718 100.109 cv
136.283 100.109 135.892 100.017 135.546 99.831 cv
135.199 99.6459 134.927 99.3886 134.729 99.06 cv
134.532 98.7309 134.433 98.3593 134.433 97.9443 cv
134.433 97.5297 134.532 97.1581 134.729 96.829 cv
134.927 96.5004 135.201 96.2431 135.552 96.0575 cv
135.902 95.8725 136.297 95.7797 136.736 95.7797 cv
137.102 95.7797 137.435 95.8412 137.734 95.9648 cv
138.034 96.0888 138.285 96.268 138.488 96.5033 cv
137.866 97.0771 li
137.567 96.7626 137.206 96.6049 136.784 96.6049 cv
136.516 96.6049 136.279 96.6606 136.072 96.7724 cv
135.865 96.8842 135.703 97.0414 135.587 97.2446 cv
135.472 97.4482 135.414 97.6811 135.414 97.9443 cv
135.414 98.2035 135.472 98.435 135.587 98.6381 cv
135.703 98.8412 135.864 98.9999 136.069 99.1137 cv
136.274 99.227 136.509 99.2841 136.771 99.2841 cv
137.051 99.2841 137.302 99.224 137.525 99.1044 cv
137.525 97.8788 li
cp
f
143.703 96.829 mo
143.551 96.7035 143.329 96.6405 143.038 96.6405 cv
142.249 96.6405 li
142.249 98.1 li
143.038 98.1 li
143.329 98.1 143.551 98.0361 143.703 97.9086 cv
143.854 97.7812 143.93 97.6015 143.93 97.3705 cv
143.93 97.1352 143.854 96.9545 143.703 96.829 cv
cp
143.948 100.038 mo
143.141 98.8715 li
143.093 98.8715 li
142.249 98.8715 li
142.249 100.038 li
141.281 100.038 li
141.281 95.8515 li
143.093 95.8515 li
143.463 95.8515 143.785 95.913 144.058 96.0365 cv
144.331 96.1606 144.542 96.3359 144.689 96.5629 cv
144.837 96.7905 144.911 97.0595 144.911 97.3705 cv
144.911 97.6811 144.836 97.9496 144.686 98.1747 cv
144.536 98.3998 144.325 98.5722 144.049 98.6918 cv
144.988 100.038 li
143.948 100.038 li
cp
f
150.347 99.1137 mo
150.546 98.9999 150.703 98.8412 150.816 98.6381 cv
150.93 98.435 150.987 98.2035 150.987 97.9443 cv
150.987 97.6855 150.93 97.454 150.816 97.2509 cv
150.703 97.0473 150.546 96.8891 150.347 96.7753 cv
150.147 96.6615 149.924 96.6049 149.677 96.6049 cv
149.43 96.6049 149.206 96.6615 149.007 96.7753 cv
148.807 96.8891 148.651 97.0473 148.537 97.2509 cv
148.424 97.454 148.367 97.6855 148.367 97.9443 cv
148.367 98.2035 148.424 98.435 148.537 98.6381 cv
148.651 98.8412 148.807 98.9999 149.007 99.1137 cv
149.206 99.227 149.43 99.2841 149.677 99.2841 cv
149.924 99.2841 150.147 99.227 150.347 99.1137 cv
cp
148.502 99.828 mo
148.153 99.641 147.88 99.3827 147.682 99.0536 cv
147.485 98.725 147.387 98.3549 147.387 97.9443 cv
147.387 97.5336 147.485 97.164 147.682 96.8349 cv
147.88 96.5063 148.153 96.248 148.502 96.0605 cv
148.85 95.8735 149.242 95.7797 149.677 95.7797 cv
150.111 95.7797 150.502 95.8735 150.849 96.0605 cv
151.196 96.248 151.469 96.5063 151.668 96.8349 cv
151.868 97.164 151.967 97.5336 151.967 97.9443 cv
151.967 98.3549 151.868 98.725 151.668 99.0536 cv
151.469 99.3827 151.196 99.641 150.849 99.828 cv
150.502 100.016 150.111 100.109 149.677 100.109 cv
149.242 100.109 148.85 100.016 148.502 99.828 cv
cp
f
155.134 99.6127 mo
154.801 99.2822 154.634 98.8095 154.634 98.1957 cv
154.634 95.8515 li
155.603 95.8515 li
155.603 98.1596 li
155.603 98.9091 155.914 99.2841 156.536 99.2841 cv
156.839 99.2841 157.07 99.1933 157.23 99.0121 cv
157.389 98.8305 157.469 98.5463 157.469 98.1596 cv
157.469 95.8515 li
158.426 95.8515 li
158.426 98.1957 li
158.426 98.8095 158.259 99.2822 157.926 99.6127 cv
157.594 99.9438 157.128 100.109 156.53 100.109 cv
155.932 100.109 155.466 99.9438 155.134 99.6127 cv
cp
f
165.196 95.8515 mo
165.196 100.038 li
164.4 100.038 li
162.313 97.496 li
162.313 100.038 li
161.356 100.038 li
161.356 95.8515 li
162.158 95.8515 li
164.239 98.393 li
164.239 95.8515 li
165.196 95.8515 li
cp
f
170.016 99.2421 mo
170.434 99.2421 170.768 99.1254 171.017 98.8925 cv
171.266 98.6591 171.391 98.3432 171.391 97.9443 cv
171.391 97.5458 171.266 97.2299 171.017 96.9965 cv
170.768 96.7631 170.434 96.6469 170.016 96.6469 cv
169.131 96.6469 li
169.131 99.2421 li
170.016 99.2421 li
cp
168.162 95.8515 mo
170.063 95.8515 li
170.518 95.8515 170.92 95.9379 171.268 96.1113 cv
171.618 96.2851 171.889 96.5292 172.082 96.8442 cv
172.275 97.1591 172.372 97.5258 172.372 97.9443 cv
172.372 98.3632 172.275 98.7299 172.082 99.0448 cv
171.889 99.3598 171.618 99.6039 171.268 99.7773 cv
170.92 99.9506 170.518 100.038 170.063 100.038 cv
168.162 100.038 li
168.162 95.8515 li
cp
f
155.538 104.71 mo
86.2396 104.71 li
81.0927 104.71 76.9208 108.882 76.9208 114.029 cv
76.9208 114.029 li
76.9208 119.175 81.0927 123.347 86.2396 123.347 cv
155.538 123.347 li
160.684 123.347 164.857 119.175 164.857 114.029 cv
164.857 114.029 li
164.857 108.882 160.684 104.71 155.538 104.71 cv
155.538 104.71 li
cp
155.538 105.596 mo
160.188 105.596 163.971 109.379 163.971 114.029 cv
163.971 118.679 160.188 122.461 155.538 122.461 cv
86.2396 122.461 li
81.5897 122.461 77.8065 118.678 77.8065 114.029 cv
77.8065 109.379 81.5897 105.596 86.2396 105.596 cv
155.538 105.596 li
f
88.0424 111.732 mo
89.0111 111.732 li
89.0111 115.129 li
91.1102 115.129 li
91.1102 115.918 li
88.0424 115.918 li
88.0424 111.732 li
cp
f
96.2528 114.995 mo
96.452 114.881 96.6088 114.722 96.7225 114.519 cv
96.8358 114.316 96.8929 114.084 96.8929 113.825 cv
96.8929 113.566 96.8358 113.335 96.7225 113.132 cv
96.6088 112.928 96.452 112.77 96.2528 112.656 cv
96.0536 112.542 95.8304 112.486 95.5829 112.486 cv
95.3358 112.486 95.1127 112.542 94.9135 112.656 cv
94.7137 112.77 94.5575 112.928 94.4437 113.132 cv
94.3304 113.335 94.2733 113.566 94.2733 113.825 cv
94.2733 114.084 94.3304 114.316 94.4437 114.519 cv
94.5575 114.722 94.7137 114.881 94.9135 114.995 cv
95.1127 115.108 95.3358 115.165 95.5829 115.165 cv
95.8304 115.165 96.0536 115.108 96.2528 114.995 cv
cp
94.4081 115.709 mo
94.059 115.522 93.786 115.264 93.5887 114.934 cv
93.3915 114.606 93.2928 114.236 93.2928 113.825 cv
93.2928 113.414 93.3915 113.045 93.5887 112.716 cv
93.786 112.387 94.059 112.129 94.4081 111.941 cv
94.7567 111.754 95.1483 111.661 95.5829 111.661 cv
96.0175 111.661 96.4086 111.754 96.7552 111.941 cv
97.1019 112.129 97.3754 112.387 97.5746 112.716 cv
97.7738 113.045 97.8734 113.414 97.8734 113.825 cv
97.8734 114.236 97.7738 114.606 97.5746 114.934 cv
97.3754 115.264 97.1019 115.522 96.7552 115.709 cv
96.4086 115.896 96.0175 115.99 95.5829 115.99 cv
95.1483 115.99 94.7567 115.896 94.4081 115.709 cv
cp
f
102.999 112.71 mo
102.847 112.584 102.626 112.521 102.335 112.521 cv
101.546 112.521 li
101.546 113.981 li
102.335 113.981 li
102.626 113.981 102.847 113.917 102.999 113.789 cv
103.15 113.662 103.226 113.482 103.226 113.251 cv
103.226 113.016 103.15 112.835 102.999 112.71 cv
cp
103.244 115.918 mo
102.437 114.752 li
102.389 114.752 li
101.546 114.752 li
101.546 115.918 li
100.577 115.918 li
100.577 111.732 li
102.389 111.732 li
102.76 111.732 103.081 111.794 103.355 111.917 cv
103.628 112.041 103.838 112.217 103.986 112.444 cv
104.133 112.671 104.207 112.94 104.207 113.251 cv
104.207 113.562 104.132 113.83 103.983 114.056 cv
103.833 114.281 103.621 114.453 103.346 114.573 cv
104.285 115.918 li
103.244 115.918 li
cp
f
110.187 115.141 mo
110.187 115.918 li
106.946 115.918 li
106.946 111.732 li
110.109 111.732 li
110.109 112.51 li
107.908 112.51 li
107.908 113.419 li
109.852 113.419 li
109.852 114.172 li
107.908 114.172 li
107.908 115.141 li
110.187 115.141 li
cp
f
116.741 115.918 mo
116.735 113.407 li
115.503 115.476 li
115.067 115.476 li
113.841 113.46 li
113.841 115.918 li
112.932 115.918 li
112.932 111.732 li
113.733 111.732 li
115.3 114.333 li
116.843 111.732 li
117.638 111.732 li
117.65 115.918 li
116.741 115.918 li
cp
f
124.283 111.732 mo
125.251 111.732 li
125.251 115.918 li
124.283 115.918 li
124.283 111.732 li
cp
f
130.639 113.787 mo
130.79 113.661 130.866 113.482 130.866 113.251 cv
130.866 113.016 130.79 112.835 130.639 112.71 cv
130.487 112.584 130.266 112.521 129.975 112.521 cv
129.186 112.521 li
129.186 113.975 li
129.975 113.975 li
130.266 113.975 130.487 113.912 130.639 113.787 cv
cp
130.995 111.917 mo
131.268 112.041 131.478 112.217 131.626 112.444 cv
131.773 112.671 131.847 112.94 131.847 113.251 cv
131.847 113.558 131.773 113.826 131.626 114.056 cv
131.478 114.285 131.268 114.46 130.995 114.582 cv
130.722 114.704 130.4 114.764 130.029 114.764 cv
129.186 114.764 li
129.186 115.918 li
128.217 115.918 li
128.217 111.732 li
130.029 111.732 li
130.4 111.732 130.722 111.794 130.995 111.917 cv
cp
f
134.984 115.855 mo
134.675 115.766 134.427 115.649 134.239 115.506 cv
134.568 114.776 li
134.747 114.908 134.961 115.014 135.208 115.093 cv
135.455 115.173 135.702 115.213 135.95 115.213 cv
136.224 115.213 136.428 115.172 136.559 115.09 cv
136.691 115.008 136.757 114.9 136.757 114.764 cv
136.757 114.664 136.718 114.582 136.64 114.516 cv
136.562 114.45 136.463 114.397 136.341 114.357 cv
136.22 114.318 136.055 114.274 135.848 114.226 cv
135.529 114.15 135.268 114.075 135.064 113.999 cv
134.861 113.923 134.686 113.801 134.541 113.634 cv
134.395 113.466 134.323 113.243 134.323 112.964 cv
134.323 112.721 134.389 112.501 134.52 112.303 cv
134.652 112.106 134.85 111.95 135.115 111.834 cv
135.38 111.718 135.704 111.661 136.087 111.661 cv
136.354 111.661 136.615 111.692 136.87 111.756 cv
137.125 111.82 137.349 111.912 137.54 112.031 cv
137.241 112.767 li
136.854 112.548 136.468 112.438 136.081 112.438 cv
135.81 112.438 135.61 112.482 135.48 112.569 cv
135.35 112.657 135.286 112.773 135.286 112.916 cv
135.286 113.06 135.36 113.166 135.51 113.236 cv
135.66 113.306 135.888 113.375 136.195 113.442 cv
136.514 113.518 136.775 113.594 136.978 113.67 cv
137.182 113.746 137.356 113.865 137.501 114.029 cv
137.647 114.192 137.72 114.413 137.72 114.692 cv
137.72 114.932 137.653 115.15 137.519 115.347 cv
137.386 115.545 137.185 115.701 136.918 115.817 cv
136.651 115.933 136.326 115.99 135.943 115.99 cv
135.613 115.99 135.292 115.945 134.984 115.855 cv
cp
f
140.821 115.494 mo
140.488 115.163 140.321 114.69 140.321 114.077 cv
140.321 111.732 li
141.29 111.732 li
141.29 114.04 li
141.29 114.79 141.601 115.165 142.223 115.165 cv
142.526 115.165 142.757 115.074 142.917 114.893 cv
143.076 114.711 143.156 114.427 143.156 114.04 cv
143.156 111.732 li
144.113 111.732 li
144.113 114.077 li
144.113 114.69 143.946 115.163 143.613 115.494 cv
143.281 115.825 142.815 115.99 142.217 115.99 cv
141.619 115.99 141.153 115.825 140.821 115.494 cv
cp
f
150.852 115.918 mo
150.846 113.407 li
149.614 115.476 li
149.178 115.476 li
147.952 113.46 li
147.952 115.918 li
147.043 115.918 li
147.043 111.732 li
147.844 111.732 li
149.411 114.333 li
150.953 111.732 li
151.749 111.732 li
151.761 115.918 li
150.852 115.918 li
cp
f
88.0424 111.732 mo
89.0111 111.732 li
89.0111 115.129 li
91.1102 115.129 li
91.1102 115.918 li
88.0424 115.918 li
88.0424 111.732 li
cp
f
96.2528 114.995 mo
96.452 114.881 96.6088 114.722 96.7225 114.519 cv
96.8358 114.316 96.8929 114.084 96.8929 113.825 cv
96.8929 113.566 96.8358 113.335 96.7225 113.132 cv
96.6088 112.928 96.452 112.77 96.2528 112.656 cv
96.0536 112.542 95.8304 112.486 95.5829 112.486 cv
95.3358 112.486 95.1127 112.542 94.9135 112.656 cv
94.7137 112.77 94.5575 112.928 94.4437 113.132 cv
94.3304 113.335 94.2733 113.566 94.2733 113.825 cv
94.2733 114.084 94.3304 114.316 94.4437 114.519 cv
94.5575 114.722 94.7137 114.881 94.9135 114.995 cv
95.1127 115.108 95.3358 115.165 95.5829 115.165 cv
95.8304 115.165 96.0536 115.108 96.2528 114.995 cv
cp
94.4081 115.709 mo
94.059 115.522 93.786 115.264 93.5887 114.934 cv
93.3915 114.606 93.2928 114.236 93.2928 113.825 cv
93.2928 113.414 93.3915 113.045 93.5887 112.716 cv
93.786 112.387 94.059 112.129 94.4081 111.941 cv
94.7567 111.754 95.1483 111.661 95.5829 111.661 cv
96.0175 111.661 96.4086 111.754 96.7552 111.941 cv
97.1019 112.129 97.3754 112.387 97.5746 112.716 cv
97.7738 113.045 97.8734 113.414 97.8734 113.825 cv
97.8734 114.236 97.7738 114.606 97.5746 114.934 cv
97.3754 115.264 97.1019 115.522 96.7552 115.709 cv
96.4086 115.896 96.0175 115.99 95.5829 115.99 cv
95.1483 115.99 94.7567 115.896 94.4081 115.709 cv
cp
f
102.999 112.71 mo
102.847 112.584 102.626 112.521 102.335 112.521 cv
101.546 112.521 li
101.546 113.981 li
102.335 113.981 li
102.626 113.981 102.847 113.917 102.999 113.789 cv
103.15 113.662 103.226 113.482 103.226 113.251 cv
103.226 113.016 103.15 112.835 102.999 112.71 cv
cp
103.244 115.918 mo
102.437 114.752 li
102.389 114.752 li
101.546 114.752 li
101.546 115.918 li
100.577 115.918 li
100.577 111.732 li
102.389 111.732 li
102.76 111.732 103.081 111.794 103.355 111.917 cv
103.628 112.041 103.838 112.217 103.986 112.444 cv
104.133 112.671 104.207 112.94 104.207 113.251 cv
104.207 113.562 104.132 113.83 103.983 114.056 cv
103.833 114.281 103.621 114.453 103.346 114.573 cv
104.285 115.918 li
103.244 115.918 li
cp
f
110.187 115.141 mo
110.187 115.918 li
106.946 115.918 li
106.946 111.732 li
110.109 111.732 li
110.109 112.51 li
107.908 112.51 li
107.908 113.419 li
109.852 113.419 li
109.852 114.172 li
107.908 114.172 li
107.908 115.141 li
110.187 115.141 li
cp
f
116.741 115.918 mo
116.735 113.407 li
115.503 115.476 li
115.067 115.476 li
113.841 113.46 li
113.841 115.918 li
112.932 115.918 li
112.932 111.732 li
113.733 111.732 li
115.3 114.333 li
116.843 111.732 li
117.638 111.732 li
117.65 115.918 li
116.741 115.918 li
cp
f
124.283 111.732 mo
125.251 111.732 li
125.251 115.918 li
124.283 115.918 li
124.283 111.732 li
cp
f
130.639 113.787 mo
130.79 113.661 130.866 113.482 130.866 113.251 cv
130.866 113.016 130.79 112.835 130.639 112.71 cv
130.487 112.584 130.266 112.521 129.975 112.521 cv
129.186 112.521 li
129.186 113.975 li
129.975 113.975 li
130.266 113.975 130.487 113.912 130.639 113.787 cv
cp
130.995 111.917 mo
131.268 112.041 131.478 112.217 131.626 112.444 cv
131.773 112.671 131.847 112.94 131.847 113.251 cv
131.847 113.558 131.773 113.826 131.626 114.056 cv
131.478 114.285 131.268 114.46 130.995 114.582 cv
130.722 114.704 130.4 114.764 130.029 114.764 cv
129.186 114.764 li
129.186 115.918 li
128.217 115.918 li
128.217 111.732 li
130.029 111.732 li
130.4 111.732 130.722 111.794 130.995 111.917 cv
cp
f
134.984 115.855 mo
134.675 115.766 134.427 115.649 134.239 115.506 cv
134.568 114.776 li
134.747 114.908 134.961 115.014 135.208 115.093 cv
135.455 115.173 135.702 115.213 135.95 115.213 cv
136.224 115.213 136.428 115.172 136.559 115.09 cv
136.691 115.008 136.757 114.9 136.757 114.764 cv
136.757 114.664 136.718 114.582 136.64 114.516 cv
136.562 114.45 136.463 114.397 136.341 114.357 cv
136.22 114.318 136.055 114.274 135.848 114.226 cv
135.529 114.15 135.268 114.075 135.064 113.999 cv
134.861 113.923 134.686 113.801 134.541 113.634 cv
134.395 113.466 134.323 113.243 134.323 112.964 cv
134.323 112.721 134.389 112.501 134.52 112.303 cv
134.652 112.106 134.85 111.95 135.115 111.834 cv
135.38 111.718 135.704 111.661 136.087 111.661 cv
136.354 111.661 136.615 111.692 136.87 111.756 cv
137.125 111.82 137.349 111.912 137.54 112.031 cv
137.241 112.767 li
136.854 112.548 136.468 112.438 136.081 112.438 cv
135.81 112.438 135.61 112.482 135.48 112.569 cv
135.35 112.657 135.286 112.773 135.286 112.916 cv
135.286 113.06 135.36 113.166 135.51 113.236 cv
135.66 113.306 135.888 113.375 136.195 113.442 cv
136.514 113.518 136.775 113.594 136.978 113.67 cv
137.182 113.746 137.356 113.865 137.501 114.029 cv
137.647 114.192 137.72 114.413 137.72 114.692 cv
137.72 114.932 137.653 115.15 137.519 115.347 cv
137.386 115.545 137.185 115.701 136.918 115.817 cv
136.651 115.933 136.326 115.99 135.943 115.99 cv
135.613 115.99 135.292 115.945 134.984 115.855 cv
cp
f
140.821 115.494 mo
140.488 115.163 140.321 114.69 140.321 114.077 cv
140.321 111.732 li
141.29 111.732 li
141.29 114.04 li
141.29 114.79 141.601 115.165 142.223 115.165 cv
142.526 115.165 142.757 115.074 142.917 114.893 cv
143.076 114.711 143.156 114.427 143.156 114.04 cv
143.156 111.732 li
144.113 111.732 li
144.113 114.077 li
144.113 114.69 143.946 115.163 143.613 115.494 cv
143.281 115.825 142.815 115.99 142.217 115.99 cv
141.619 115.99 141.153 115.825 140.821 115.494 cv
cp
f
150.852 115.918 mo
150.846 113.407 li
149.614 115.476 li
149.178 115.476 li
147.952 113.46 li
147.952 115.918 li
147.043 115.918 li
147.043 111.732 li
147.844 111.732 li
149.411 114.333 li
150.953 111.732 li
151.749 111.732 li
151.761 115.918 li
150.852 115.918 li
cp
f
88.0424 111.732 mo
89.0111 111.732 li
89.0111 115.129 li
91.1102 115.129 li
91.1102 115.918 li
88.0424 115.918 li
88.0424 111.732 li
cp
f
96.2528 114.995 mo
96.452 114.881 96.6088 114.722 96.7225 114.519 cv
96.8358 114.316 96.8929 114.084 96.8929 113.825 cv
96.8929 113.566 96.8358 113.335 96.7225 113.132 cv
96.6088 112.928 96.452 112.77 96.2528 112.656 cv
96.0536 112.542 95.8304 112.486 95.5829 112.486 cv
95.3358 112.486 95.1127 112.542 94.9135 112.656 cv
94.7137 112.77 94.5575 112.928 94.4437 113.132 cv
94.3304 113.335 94.2733 113.566 94.2733 113.825 cv
94.2733 114.084 94.3304 114.316 94.4437 114.519 cv
94.5575 114.722 94.7137 114.881 94.9135 114.995 cv
95.1127 115.108 95.3358 115.165 95.5829 115.165 cv
95.8304 115.165 96.0536 115.108 96.2528 114.995 cv
cp
94.4081 115.709 mo
94.059 115.522 93.786 115.264 93.5887 114.934 cv
93.3915 114.606 93.2928 114.236 93.2928 113.825 cv
93.2928 113.414 93.3915 113.045 93.5887 112.716 cv
93.786 112.387 94.059 112.129 94.4081 111.941 cv
94.7567 111.754 95.1483 111.661 95.5829 111.661 cv
96.0175 111.661 96.4086 111.754 96.7552 111.941 cv
97.1019 112.129 97.3754 112.387 97.5746 112.716 cv
97.7738 113.045 97.8734 113.414 97.8734 113.825 cv
97.8734 114.236 97.7738 114.606 97.5746 114.934 cv
97.3754 115.264 97.1019 115.522 96.7552 115.709 cv
96.4086 115.896 96.0175 115.99 95.5829 115.99 cv
95.1483 115.99 94.7567 115.896 94.4081 115.709 cv
cp
f
102.999 112.71 mo
102.847 112.584 102.626 112.521 102.335 112.521 cv
101.546 112.521 li
101.546 113.981 li
102.335 113.981 li
102.626 113.981 102.847 113.917 102.999 113.789 cv
103.15 113.662 103.226 113.482 103.226 113.251 cv
103.226 113.016 103.15 112.835 102.999 112.71 cv
cp
103.244 115.918 mo
102.437 114.752 li
102.389 114.752 li
101.546 114.752 li
101.546 115.918 li
100.577 115.918 li
100.577 111.732 li
102.389 111.732 li
102.76 111.732 103.081 111.794 103.355 111.917 cv
103.628 112.041 103.838 112.217 103.986 112.444 cv
104.133 112.671 104.207 112.94 104.207 113.251 cv
104.207 113.562 104.132 113.83 103.983 114.056 cv
103.833 114.281 103.621 114.453 103.346 114.573 cv
104.285 115.918 li
103.244 115.918 li
cp
f
110.187 115.141 mo
110.187 115.918 li
106.946 115.918 li
106.946 111.732 li
110.109 111.732 li
110.109 112.51 li
107.908 112.51 li
107.908 113.419 li
109.852 113.419 li
109.852 114.172 li
107.908 114.172 li
107.908 115.141 li
110.187 115.141 li
cp
f
116.741 115.918 mo
116.735 113.407 li
115.503 115.476 li
115.067 115.476 li
113.841 113.46 li
113.841 115.918 li
112.932 115.918 li
112.932 111.732 li
113.733 111.732 li
115.3 114.333 li
116.843 111.732 li
117.638 111.732 li
117.65 115.918 li
116.741 115.918 li
cp
f
124.283 111.732 mo
125.251 111.732 li
125.251 115.918 li
124.283 115.918 li
124.283 111.732 li
cp
f
130.639 113.787 mo
130.79 113.661 130.866 113.482 130.866 113.251 cv
130.866 113.016 130.79 112.835 130.639 112.71 cv
130.487 112.584 130.266 112.521 129.975 112.521 cv
129.186 112.521 li
129.186 113.975 li
129.975 113.975 li
130.266 113.975 130.487 113.912 130.639 113.787 cv
cp
130.995 111.917 mo
131.268 112.041 131.478 112.217 131.626 112.444 cv
131.773 112.671 131.847 112.94 131.847 113.251 cv
131.847 113.558 131.773 113.826 131.626 114.056 cv
131.478 114.285 131.268 114.46 130.995 114.582 cv
130.722 114.704 130.4 114.764 130.029 114.764 cv
129.186 114.764 li
129.186 115.918 li
128.217 115.918 li
128.217 111.732 li
130.029 111.732 li
130.4 111.732 130.722 111.794 130.995 111.917 cv
cp
f
134.984 115.855 mo
134.675 115.766 134.427 115.649 134.239 115.506 cv
134.568 114.776 li
134.747 114.908 134.961 115.014 135.208 115.093 cv
135.455 115.173 135.702 115.213 135.95 115.213 cv
136.224 115.213 136.428 115.172 136.559 115.09 cv
136.691 115.008 136.757 114.9 136.757 114.764 cv
136.757 114.664 136.718 114.582 136.64 114.516 cv
136.562 114.45 136.463 114.397 136.341 114.357 cv
136.22 114.318 136.055 114.274 135.848 114.226 cv
135.529 114.15 135.268 114.075 135.064 113.999 cv
134.861 113.923 134.686 113.801 134.541 113.634 cv
134.395 113.466 134.323 113.243 134.323 112.964 cv
134.323 112.721 134.389 112.501 134.52 112.303 cv
134.652 112.106 134.85 111.95 135.115 111.834 cv
135.38 111.718 135.704 111.661 136.087 111.661 cv
136.354 111.661 136.615 111.692 136.87 111.756 cv
137.125 111.82 137.349 111.912 137.54 112.031 cv
137.241 112.767 li
136.854 112.548 136.468 112.438 136.081 112.438 cv
135.81 112.438 135.61 112.482 135.48 112.569 cv
135.35 112.657 135.286 112.773 135.286 112.916 cv
135.286 113.06 135.36 113.166 135.51 113.236 cv
135.66 113.306 135.888 113.375 136.195 113.442 cv
136.514 113.518 136.775 113.594 136.978 113.67 cv
137.182 113.746 137.356 113.865 137.501 114.029 cv
137.647 114.192 137.72 114.413 137.72 114.692 cv
137.72 114.932 137.653 115.15 137.519 115.347 cv
137.386 115.545 137.185 115.701 136.918 115.817 cv
136.651 115.933 136.326 115.99 135.943 115.99 cv
135.613 115.99 135.292 115.945 134.984 115.855 cv
cp
f
140.821 115.494 mo
140.488 115.163 140.321 114.69 140.321 114.077 cv
140.321 111.732 li
141.29 111.732 li
141.29 114.04 li
141.29 114.79 141.601 115.165 142.223 115.165 cv
142.526 115.165 142.757 115.074 142.917 114.893 cv
143.076 114.711 143.156 114.427 143.156 114.04 cv
143.156 111.732 li
144.113 111.732 li
144.113 114.077 li
144.113 114.69 143.946 115.163 143.613 115.494 cv
143.281 115.825 142.815 115.99 142.217 115.99 cv
141.619 115.99 141.153 115.825 140.821 115.494 cv
cp
f
150.852 115.918 mo
150.846 113.407 li
149.614 115.476 li
149.178 115.476 li
147.952 113.46 li
147.952 115.918 li
147.043 115.918 li
147.043 111.732 li
147.844 111.732 li
149.411 114.333 li
150.953 111.732 li
151.749 111.732 li
151.761 115.918 li
150.852 115.918 li
cp
f
93.5267 86.4321 mo
94.016 86.1537 94.4032 85.7563 94.6888 85.2397 cv
94.9745 84.7231 95.1171 84.1249 95.1171 83.4452 cv
95.1171 82.7655 94.9745 82.1679 94.6888 81.6508 cv
94.4032 81.1347 94.016 80.7367 93.5267 80.4584 cv
93.0375 80.1796 92.4867 80.0405 91.8749 80.0405 cv
91.2635 80.0405 90.7128 80.1796 90.2235 80.4584 cv
89.7343 80.7367 89.347 81.1347 89.0614 81.6508 cv
88.7758 82.1679 88.6332 82.7655 88.6332 83.4452 cv
88.6332 84.1249 88.7758 84.7231 89.0614 85.2397 cv
89.347 85.7563 89.7343 86.1537 90.2235 86.4321 cv
90.7128 86.7109 91.2635 86.85 91.8749 86.85 cv
92.4867 86.85 93.0375 86.7109 93.5267 86.4321 cv
cp
97.6249 73.7602 mo
97.6249 88.8891 li
95.1781 88.8891 li
95.1781 87.4823 li
94.7567 87.9989 94.2367 88.3862 93.6185 88.6445 cv
92.9999 88.9023 92.3168 89.0317 91.5692 89.0317 cv
90.5223 89.0317 89.5814 88.8007 88.7455 88.3388 cv
87.9095 87.8769 87.2533 87.2206 86.7777 86.371 cv
86.3016 85.5219 86.0643 84.5463 86.0643 83.4452 cv
86.0643 82.3442 86.3016 81.3725 86.7777 80.5297 cv
87.2533 79.6869 87.9095 79.0346 88.7455 78.5722 cv
89.5814 78.1103 90.5223 77.8788 91.5692 77.8788 cv
92.2894 77.8788 92.9486 78.0014 93.5472 78.246 cv
94.1449 78.4906 94.6547 78.8578 95.076 79.3471 cv
95.076 73.7602 li
97.6249 73.7602 li
cp
f
103.629 80.6415 mo
103.065 81.1244 102.722 81.7665 102.6 82.5683 cv
108.778 82.5683 li
108.669 81.7802 108.336 81.141 107.779 80.6518 cv
107.221 80.1625 106.528 79.9179 105.699 79.9179 cv
104.883 79.9179 104.193 80.1596 103.629 80.6415 cv
cp
111.163 84.2607 mo
102.62 84.2607 li
102.769 85.0629 103.161 85.6982 103.792 86.1669 cv
104.425 86.6362 105.209 86.8705 106.147 86.8705 cv
107.344 86.8705 108.329 86.4765 109.104 85.6879 cv
110.47 87.2577 li
109.981 87.8427 109.362 88.2846 108.615 88.5834 cv
107.867 88.8822 107.024 89.0317 106.086 89.0317 cv
104.89 89.0317 103.836 88.7944 102.926 88.3183 cv
102.015 87.8427 101.312 87.1801 100.816 86.3305 cv
100.319 85.4809 100.072 84.519 100.072 83.4452 cv
100.072 82.3852 100.313 81.4301 100.795 80.5805 cv
101.278 79.7314 101.947 79.0688 102.804 78.5927 cv
103.66 78.1171 104.625 77.8788 105.699 77.8788 cv
106.759 77.8788 107.707 78.1132 108.543 78.5824 cv
109.379 79.0512 110.032 79.7109 110.5 80.56 cv
110.97 81.4096 111.204 82.392 111.204 83.5063 cv
111.204 83.683 111.19 83.9345 111.163 84.2607 cv
cp
f
114.425 88.685 mo
113.582 88.454 112.909 88.162 112.407 87.8085 cv
113.385 85.8715 li
113.874 86.1977 114.462 86.4594 115.149 86.6567 cv
115.835 86.8534 116.512 86.9521 117.178 86.9521 cv
118.7 86.9521 119.461 86.5512 119.461 85.7489 cv
119.461 85.3686 119.267 85.1039 118.88 84.954 cv
118.493 84.8046 117.871 84.662 117.015 84.5258 cv
116.118 84.3901 115.387 84.2338 114.823 84.0571 cv
114.259 83.8803 113.769 83.5712 113.355 83.1293 cv
112.94 82.6874 112.733 82.0727 112.733 81.2841 cv
112.733 80.2509 113.164 79.4252 114.028 78.8066 cv
114.891 78.1884 116.056 77.8788 117.524 77.8788 cv
118.272 77.8788 119.019 77.9638 119.767 78.1337 cv
120.515 78.3041 121.126 78.5317 121.602 78.8168 cv
120.623 80.7538 li
119.699 80.2104 118.659 79.9384 117.504 79.9384 cv
116.756 79.9384 116.189 80.0502 115.801 80.2748 cv
115.414 80.4989 115.22 80.7948 115.22 81.1615 cv
115.22 81.5693 115.427 81.8583 115.842 82.0282 cv
116.257 82.1982 116.899 82.3578 117.769 82.5072 cv
118.639 82.6435 119.352 82.7997 119.91 82.9765 cv
120.467 83.1532 120.946 83.4521 121.347 83.8735 cv
121.748 84.2948 121.949 84.893 121.949 85.6674 cv
121.949 86.6869 121.507 87.5029 120.623 88.1142 cv
119.74 88.726 118.536 89.0317 117.015 89.0317 cv
116.131 89.0317 115.268 88.9159 114.425 88.685 cv
cp
f
124.151 78.0014 mo
126.7 78.0014 li
126.7 88.8891 li
124.151 88.8891 li
124.151 78.0014 li
cp
124.273 75.7685 mo
123.96 75.4765 123.804 75.1132 123.804 74.6777 cv
123.804 74.2431 123.96 73.8793 124.273 73.5868 cv
124.586 73.2948 124.973 73.1488 125.435 73.1488 cv
125.897 73.1488 126.285 73.288 126.598 73.5668 cv
126.91 73.8456 127.066 74.1957 127.066 74.6166 cv
127.066 75.0654 126.913 75.4423 126.608 75.7485 cv
126.302 76.0541 125.911 76.207 125.435 76.207 cv
124.973 76.207 124.586 76.061 124.273 75.7685 cv
cp
f
137.413 85.372 mo
138.032 84.7944 138.341 84.0434 138.341 83.1191 cv
138.341 82.2084 138.032 81.4672 137.413 80.8964 cv
136.795 80.3256 136.003 80.0405 135.038 80.0405 cv
134.059 80.0405 133.261 80.3256 132.642 80.8964 cv
132.024 81.4672 131.715 82.2084 131.715 83.1191 cv
131.715 84.0434 132.024 84.7944 132.642 85.372 cv
133.261 85.9496 134.059 86.2387 135.038 86.2387 cv
136.003 86.2387 136.795 85.9496 137.413 85.372 cv
cp
140.849 78.0014 mo
140.849 87.2377 li
140.849 91.0707 138.892 92.9872 134.977 92.9872 cv
133.93 92.9872 132.938 92.8549 132 92.5898 cv
131.062 92.3246 130.287 91.9404 129.676 91.4379 cv
130.818 89.5209 li
131.293 89.9155 131.895 90.2314 132.622 90.4692 cv
133.349 90.707 134.087 90.8261 134.834 90.8261 cv
136.03 90.8261 136.907 90.5541 137.465 90.0107 cv
138.022 89.4667 138.301 88.6376 138.301 87.5229 cv
138.301 86.9521 li
137.865 87.4281 137.335 87.788 136.71 88.0326 cv
136.085 88.2773 135.398 88.3998 134.651 88.3998 cv
133.618 88.3998 132.683 88.1791 131.848 87.7372 cv
131.012 87.2953 130.352 86.6738 129.87 85.8715 cv
129.387 85.0697 129.146 84.1523 129.146 83.1191 cv
129.146 82.0863 129.387 81.1718 129.87 80.3769 cv
130.352 79.5815 131.012 78.9667 131.848 78.5317 cv
132.683 78.0966 133.618 77.8788 134.651 77.8788 cv
135.439 77.8788 136.156 78.0082 136.802 78.2665 cv
137.447 78.5248 137.988 78.9189 138.423 79.4491 cv
138.423 78.0014 li
140.849 78.0014 li
cp
f
153.674 79.082 mo
154.503 79.8842 154.917 81.0732 154.917 82.6498 cv
154.917 88.8891 li
152.369 88.8891 li
152.369 82.9765 li
152.369 82.0248 152.144 81.308 151.696 80.8251 cv
151.247 80.3427 150.608 80.1015 149.779 80.1015 cv
148.842 80.1015 148.1 80.3837 147.557 80.9477 cv
147.013 81.5116 146.742 82.3237 146.742 83.3842 cv
146.742 88.8891 li
144.193 88.8891 li
144.193 78.0014 li
146.619 78.0014 li
146.619 79.4081 li
147.04 78.9052 147.57 78.5248 148.209 78.2665 cv
148.848 78.0082 149.569 77.8788 150.37 77.8788 cv
151.744 77.8788 152.845 78.2802 153.674 79.082 cv
cp
f
71.7723 95.8515 mo
69.9603 100.038 li
69.0038 100.038 li
67.1976 95.8515 li
68.244 95.8515 li
69.5179 98.8412 li
70.8094 95.8515 li
71.7723 95.8515 li
cp
f
77.3344 99.2602 mo
77.3344 100.038 li
74.0931 100.038 li
74.0931 95.8515 li
77.2567 95.8515 li
77.2567 96.6288 li
75.0555 96.6288 li
75.0555 97.538 li
76.9994 97.538 li
76.9994 98.2914 li
75.0555 98.2914 li
75.0555 99.2602 li
77.3344 99.2602 li
cp
f
80.9135 99.831 mo
80.5682 99.6459 80.2972 99.3886 80.1 99.06 cv
79.9027 98.7309 79.8041 98.3593 79.8041 97.9443 cv
79.8041 97.5297 79.9027 97.1581 80.1 96.829 cv
80.2972 96.5004 80.5682 96.2431 80.9135 96.0575 cv
81.2582 95.8725 81.6459 95.7797 82.0765 95.7797 cv
82.4393 95.7797 82.767 95.8432 83.0599 95.9711 cv
83.3534 96.0986 83.5995 96.2822 83.7987 96.5209 cv
83.1766 97.0951 li
82.8934 96.7685 82.5428 96.6049 82.1244 96.6049 cv
81.8651 96.6049 81.6337 96.6615 81.4305 96.7753 cv
81.2274 96.8891 81.0687 97.0473 80.955 97.2509 cv
80.8417 97.454 80.7845 97.6855 80.7845 97.9443 cv
80.7845 98.2035 80.8417 98.435 80.955 98.6381 cv
81.0687 98.8412 81.2274 98.9999 81.4305 99.1137 cv
81.6337 99.227 81.8651 99.2841 82.1244 99.2841 cv
82.5428 99.2841 82.8934 99.1186 83.1766 98.7875 cv
83.7987 99.3617 li
83.5995 99.6049 83.3519 99.7905 83.057 99.9179 cv
82.7621 100.045 82.433 100.109 82.0702 100.109 cv
81.6439 100.109 81.2582 100.017 80.9135 99.831 cv
cp
f
87.2489 96.6405 mo
85.9095 96.6405 li
85.9095 95.8515 li
89.5575 95.8515 li
89.5575 96.6405 li
88.2181 96.6405 li
88.2181 100.038 li
87.2489 100.038 li
87.2489 96.6405 li
cp
f
94.6884 99.1137 mo
94.8876 98.9999 95.0443 98.8412 95.1581 98.6381 cv
95.2714 98.435 95.3285 98.2035 95.3285 97.9443 cv
95.3285 97.6855 95.2714 97.454 95.1581 97.2509 cv
95.0443 97.0473 94.8876 96.8891 94.6884 96.7753 cv
94.4891 96.6615 94.266 96.6049 94.0184 96.6049 cv
93.7714 96.6049 93.5482 96.6615 93.349 96.7753 cv
93.1493 96.8891 92.993 97.0473 92.8793 97.2509 cv
92.766 97.454 92.7089 97.6855 92.7089 97.9443 cv
92.7089 98.2035 92.766 98.435 92.8793 98.6381 cv
92.993 98.8412 93.1493 98.9999 93.349 99.1137 cv
93.5482 99.227 93.7714 99.2841 94.0184 99.2841 cv
94.266 99.2841 94.4891 99.227 94.6884 99.1137 cv
cp
92.8436 99.828 mo
92.4945 99.641 92.2216 99.3827 92.0243 99.0536 cv
91.827 98.725 91.7284 98.3549 91.7284 97.9443 cv
91.7284 97.5336 91.827 97.164 92.0243 96.8349 cv
92.2216 96.5063 92.4945 96.248 92.8436 96.0605 cv
93.1923 95.8735 93.5839 95.7797 94.0184 95.7797 cv
94.453 95.7797 94.8441 95.8735 95.1908 96.0605 cv
95.5375 96.248 95.8109 96.5063 96.0101 96.8349 cv
96.2094 97.164 96.309 97.5336 96.309 97.9443 cv
96.309 98.3549 96.2094 98.725 96.0101 99.0536 cv
95.8109 99.3827 95.5375 99.641 95.1908 99.828 cv
94.8441 100.016 94.453 100.109 94.0184 100.109 cv
93.5839 100.109 93.1923 100.016 92.8436 99.828 cv
cp
f
101.434 96.829 mo
101.283 96.7035 101.061 96.6405 100.77 96.6405 cv
99.9813 96.6405 li
99.9813 98.1 li
100.77 98.1 li
101.061 98.1 101.283 98.0361 101.434 97.9086 cv
101.586 97.7812 101.661 97.6015 101.661 97.3705 cv
101.661 97.1352 101.586 96.9545 101.434 96.829 cv
cp
101.68 100.038 mo
100.872 98.8715 li
100.825 98.8715 li
99.9813 98.8715 li
99.9813 100.038 li
99.0126 100.038 li
99.0126 95.8515 li
100.825 95.8515 li
101.195 95.8515 101.517 95.913 101.79 96.0365 cv
102.063 96.1606 102.274 96.3359 102.421 96.5629 cv
102.569 96.7905 102.642 97.0595 102.642 97.3705 cv
102.642 97.6811 102.568 97.9496 102.418 98.1747 cv
102.268 98.3998 102.057 98.5722 101.781 98.6918 cv
102.72 100.038 li
101.68 100.038 li
cp
f
111.717 99.1825 mo
111.847 99.0986 111.911 98.9692 111.911 98.7939 cv
111.911 98.4467 111.654 98.2734 111.14 98.2734 cv
110.01 98.2734 li
110.01 99.308 li
111.14 99.308 li
111.395 99.308 111.588 99.266 111.717 99.1825 cv
cp
110.01 96.581 mo
110.01 97.5678 li
110.973 97.5678 li
111.212 97.5678 111.393 97.5258 111.517 97.4423 cv
111.641 97.3583 111.702 97.2348 111.702 97.0712 cv
111.702 96.9076 111.641 96.7851 111.517 96.7035 cv
111.393 96.622 111.212 96.581 110.973 96.581 cv
110.01 96.581 li
cp
112.683 98.2406 mo
112.819 98.4179 112.887 98.6362 112.887 98.8954 cv
112.887 99.2621 112.744 99.5444 112.459 99.7416 cv
112.174 99.9389 111.758 100.038 111.212 100.038 cv
109.047 100.038 li
109.047 95.8515 li
111.092 95.8515 li
111.602 95.8515 111.995 95.9491 112.267 96.1445 cv
112.54 96.3398 112.677 96.6049 112.677 96.9399 cv
112.677 97.143 112.628 97.3246 112.531 97.4838 cv
112.433 97.6435 112.296 97.769 112.121 97.8608 cv
112.36 97.9364 112.547 98.0629 112.683 98.2406 cv
cp
f
118.047 98.4047 mo
117.384 96.8022 li
116.72 98.4047 li
118.047 98.4047 li
cp
118.352 99.1405 mo
116.409 99.1405 li
116.038 100.038 li
115.045 100.038 li
116.911 95.8515 li
117.868 95.8515 li
119.74 100.038 li
118.723 100.038 li
118.352 99.1405 li
cp
f
122.936 99.831 mo
122.591 99.6459 122.32 99.3886 122.123 99.06 cv
121.926 98.7309 121.827 98.3593 121.827 97.9443 cv
121.827 97.5297 121.926 97.1581 122.123 96.829 cv
122.32 96.5004 122.591 96.2431 122.936 96.0575 cv
123.281 95.8725 123.669 95.7797 124.099 95.7797 cv
124.462 95.7797 124.79 95.8432 125.083 95.9711 cv
125.376 96.0986 125.622 96.2822 125.822 96.5209 cv
125.2 97.0951 li
124.916 96.7685 124.566 96.6049 124.147 96.6049 cv
123.888 96.6049 123.657 96.6615 123.453 96.7753 cv
123.25 96.8891 123.092 97.0473 122.978 97.2509 cv
122.865 97.454 122.807 97.6855 122.807 97.9443 cv
122.807 98.2035 122.865 98.435 122.978 98.6381 cv
123.092 98.8412 123.25 98.9999 123.453 99.1137 cv
123.657 99.227 123.888 99.2841 124.147 99.2841 cv
124.566 99.2841 124.916 99.1186 125.2 98.7875 cv
125.822 99.3617 li
125.622 99.6049 125.375 99.7905 125.08 99.9179 cv
124.785 100.045 124.456 100.109 124.093 100.109 cv
123.667 100.109 123.281 100.017 122.936 99.831 cv
cp
f
129.972 98.393 mo
129.41 98.9789 li
129.41 100.038 li
128.447 100.038 li
128.447 95.8515 li
129.41 95.8515 li
129.41 97.8071 li
131.264 95.8515 li
132.34 95.8515 li
130.606 97.7172 li
132.442 100.038 li
131.311 100.038 li
129.972 98.393 li
cp
f
137.525 97.8788 mo
138.41 97.8788 li
138.41 99.5771 li
138.183 99.7485 137.92 99.8803 137.621 99.9716 cv
137.322 100.063 137.021 100.109 136.718 100.109 cv
136.283 100.109 135.892 100.017 135.546 99.831 cv
135.199 99.6459 134.927 99.3886 134.729 99.06 cv
134.532 98.7309 134.433 98.3593 134.433 97.9443 cv
134.433 97.5297 134.532 97.1581 134.729 96.829 cv
134.927 96.5004 135.201 96.2431 135.552 96.0575 cv
135.902 95.8725 136.297 95.7797 136.736 95.7797 cv
137.102 95.7797 137.435 95.8412 137.734 95.9648 cv
138.034 96.0888 138.285 96.268 138.488 96.5033 cv
137.866 97.0771 li
137.567 96.7626 137.206 96.6049 136.784 96.6049 cv
136.516 96.6049 136.279 96.6606 136.072 96.7724 cv
135.865 96.8842 135.703 97.0414 135.587 97.2446 cv
135.472 97.4482 135.414 97.6811 135.414 97.9443 cv
135.414 98.2035 135.472 98.435 135.587 98.6381 cv
135.703 98.8412 135.864 98.9999 136.069 99.1137 cv
136.274 99.227 136.509 99.2841 136.771 99.2841 cv
137.051 99.2841 137.302 99.224 137.525 99.1044 cv
137.525 97.8788 li
cp
f
143.703 96.829 mo
143.551 96.7035 143.329 96.6405 143.038 96.6405 cv
142.249 96.6405 li
142.249 98.1 li
143.038 98.1 li
143.329 98.1 143.551 98.0361 143.703 97.9086 cv
143.854 97.7812 143.93 97.6015 143.93 97.3705 cv
143.93 97.1352 143.854 96.9545 143.703 96.829 cv
cp
143.948 100.038 mo
143.141 98.8715 li
143.093 98.8715 li
142.249 98.8715 li
142.249 100.038 li
141.281 100.038 li
141.281 95.8515 li
143.093 95.8515 li
143.463 95.8515 143.785 95.913 144.058 96.0365 cv
144.331 96.1606 144.542 96.3359 144.689 96.5629 cv
144.837 96.7905 144.911 97.0595 144.911 97.3705 cv
144.911 97.6811 144.836 97.9496 144.686 98.1747 cv
144.536 98.3998 144.325 98.5722 144.049 98.6918 cv
144.988 100.038 li
143.948 100.038 li
cp
f
150.347 99.1137 mo
150.546 98.9999 150.703 98.8412 150.816 98.6381 cv
150.93 98.435 150.987 98.2035 150.987 97.9443 cv
150.987 97.6855 150.93 97.454 150.816 97.2509 cv
150.703 97.0473 150.546 96.8891 150.347 96.7753 cv
150.147 96.6615 149.924 96.6049 149.677 96.6049 cv
149.43 96.6049 149.206 96.6615 149.007 96.7753 cv
148.807 96.8891 148.651 97.0473 148.537 97.2509 cv
148.424 97.454 148.367 97.6855 148.367 97.9443 cv
148.367 98.2035 148.424 98.435 148.537 98.6381 cv
148.651 98.8412 148.807 98.9999 149.007 99.1137 cv
149.206 99.227 149.43 99.2841 149.677 99.2841 cv
149.924 99.2841 150.147 99.227 150.347 99.1137 cv
cp
148.502 99.828 mo
148.153 99.641 147.88 99.3827 147.682 99.0536 cv
147.485 98.725 147.387 98.3549 147.387 97.9443 cv
147.387 97.5336 147.485 97.164 147.682 96.8349 cv
147.88 96.5063 148.153 96.248 148.502 96.0605 cv
148.85 95.8735 149.242 95.7797 149.677 95.7797 cv
150.111 95.7797 150.502 95.8735 150.849 96.0605 cv
151.196 96.248 151.469 96.5063 151.668 96.8349 cv
151.868 97.164 151.967 97.5336 151.967 97.9443 cv
151.967 98.3549 151.868 98.725 151.668 99.0536 cv
151.469 99.3827 151.196 99.641 150.849 99.828 cv
150.502 100.016 150.111 100.109 149.677 100.109 cv
149.242 100.109 148.85 100.016 148.502 99.828 cv
cp
f
155.134 99.6127 mo
154.801 99.2822 154.634 98.8095 154.634 98.1957 cv
154.634 95.8515 li
155.603 95.8515 li
155.603 98.1596 li
155.603 98.9091 155.914 99.2841 156.536 99.2841 cv
156.839 99.2841 157.07 99.1933 157.23 99.0121 cv
157.389 98.8305 157.469 98.5463 157.469 98.1596 cv
157.469 95.8515 li
158.426 95.8515 li
158.426 98.1957 li
158.426 98.8095 158.259 99.2822 157.926 99.6127 cv
157.594 99.9438 157.128 100.109 156.53 100.109 cv
155.932 100.109 155.466 99.9438 155.134 99.6127 cv
cp
f
165.196 95.8515 mo
165.196 100.038 li
164.4 100.038 li
162.313 97.496 li
162.313 100.038 li
161.356 100.038 li
161.356 95.8515 li
162.158 95.8515 li
164.239 98.393 li
164.239 95.8515 li
165.196 95.8515 li
cp
f
170.016 99.2421 mo
170.434 99.2421 170.768 99.1254 171.017 98.8925 cv
171.266 98.6591 171.391 98.3432 171.391 97.9443 cv
171.391 97.5458 171.266 97.2299 171.017 96.9965 cv
170.768 96.7631 170.434 96.6469 170.016 96.6469 cv
169.131 96.6469 li
169.131 99.2421 li
170.016 99.2421 li
cp
168.162 95.8515 mo
170.063 95.8515 li
170.518 95.8515 170.92 95.9379 171.268 96.1113 cv
171.618 96.2851 171.889 96.5292 172.082 96.8442 cv
172.275 97.1591 172.372 97.5258 172.372 97.9443 cv
172.372 98.3632 172.275 98.7299 172.082 99.0448 cv
171.889 99.3598 171.618 99.6039 171.268 99.7773 cv
170.92 99.9506 170.518 100.038 170.063 100.038 cv
168.162 100.038 li
168.162 95.8515 li
cp
f
155.538 104.71 mo
86.2396 104.71 li
81.0927 104.71 76.9208 108.882 76.9208 114.029 cv
76.9208 114.029 li
76.9208 119.175 81.0927 123.347 86.2396 123.347 cv
155.538 123.347 li
160.684 123.347 164.857 119.175 164.857 114.029 cv
164.857 114.029 li
164.857 108.882 160.684 104.71 155.538 104.71 cv
155.538 104.71 li
cp
155.538 105.596 mo
160.188 105.596 163.971 109.379 163.971 114.029 cv
163.971 118.679 160.188 122.461 155.538 122.461 cv
86.2396 122.461 li
81.5897 122.461 77.8065 118.678 77.8065 114.029 cv
77.8065 109.379 81.5897 105.596 86.2396 105.596 cv
155.538 105.596 li
f
88.0424 111.732 mo
89.0111 111.732 li
89.0111 115.129 li
91.1102 115.129 li
91.1102 115.918 li
88.0424 115.918 li
88.0424 111.732 li
cp
f
96.2528 114.995 mo
96.452 114.881 96.6088 114.722 96.7225 114.519 cv
96.8358 114.316 96.8929 114.084 96.8929 113.825 cv
96.8929 113.566 96.8358 113.335 96.7225 113.132 cv
96.6088 112.928 96.452 112.77 96.2528 112.656 cv
96.0536 112.542 95.8304 112.486 95.5829 112.486 cv
95.3358 112.486 95.1127 112.542 94.9135 112.656 cv
94.7137 112.77 94.5575 112.928 94.4437 113.132 cv
94.3304 113.335 94.2733 113.566 94.2733 113.825 cv
94.2733 114.084 94.3304 114.316 94.4437 114.519 cv
94.5575 114.722 94.7137 114.881 94.9135 114.995 cv
95.1127 115.108 95.3358 115.165 95.5829 115.165 cv
95.8304 115.165 96.0536 115.108 96.2528 114.995 cv
cp
94.4081 115.709 mo
94.059 115.522 93.786 115.264 93.5887 114.934 cv
93.3915 114.606 93.2928 114.236 93.2928 113.825 cv
93.2928 113.414 93.3915 113.045 93.5887 112.716 cv
93.786 112.387 94.059 112.129 94.4081 111.941 cv
94.7567 111.754 95.1483 111.661 95.5829 111.661 cv
96.0175 111.661 96.4086 111.754 96.7552 111.941 cv
97.1019 112.129 97.3754 112.387 97.5746 112.716 cv
97.7738 113.045 97.8734 113.414 97.8734 113.825 cv
97.8734 114.236 97.7738 114.606 97.5746 114.934 cv
97.3754 115.264 97.1019 115.522 96.7552 115.709 cv
96.4086 115.896 96.0175 115.99 95.5829 115.99 cv
95.1483 115.99 94.7567 115.896 94.4081 115.709 cv
cp
f
102.999 112.71 mo
102.847 112.584 102.626 112.521 102.335 112.521 cv
101.546 112.521 li
101.546 113.981 li
102.335 113.981 li
102.626 113.981 102.847 113.917 102.999 113.789 cv
103.15 113.662 103.226 113.482 103.226 113.251 cv
103.226 113.016 103.15 112.835 102.999 112.71 cv
cp
103.244 115.918 mo
102.437 114.752 li
102.389 114.752 li
101.546 114.752 li
101.546 115.918 li
100.577 115.918 li
100.577 111.732 li
102.389 111.732 li
102.76 111.732 103.081 111.794 103.355 111.917 cv
103.628 112.041 103.838 112.217 103.986 112.444 cv
104.133 112.671 104.207 112.94 104.207 113.251 cv
104.207 113.562 104.132 113.83 103.983 114.056 cv
103.833 114.281 103.621 114.453 103.346 114.573 cv
104.285 115.918 li
103.244 115.918 li
cp
f
110.187 115.141 mo
110.187 115.918 li
106.946 115.918 li
106.946 111.732 li
110.109 111.732 li
110.109 112.51 li
107.908 112.51 li
107.908 113.419 li
109.852 113.419 li
109.852 114.172 li
107.908 114.172 li
107.908 115.141 li
110.187 115.141 li
cp
f
116.741 115.918 mo
116.735 113.407 li
115.503 115.476 li
115.067 115.476 li
113.841 113.46 li
113.841 115.918 li
112.932 115.918 li
112.932 111.732 li
113.733 111.732 li
115.3 114.333 li
116.843 111.732 li
117.638 111.732 li
117.65 115.918 li
116.741 115.918 li
cp
f
124.283 111.732 mo
125.251 111.732 li
125.251 115.918 li
124.283 115.918 li
124.283 111.732 li
cp
f
130.639 113.787 mo
130.79 113.661 130.866 113.482 130.866 113.251 cv
130.866 113.016 130.79 112.835 130.639 112.71 cv
130.487 112.584 130.266 112.521 129.975 112.521 cv
129.186 112.521 li
129.186 113.975 li
129.975 113.975 li
130.266 113.975 130.487 113.912 130.639 113.787 cv
cp
130.995 111.917 mo
131.268 112.041 131.478 112.217 131.626 112.444 cv
131.773 112.671 131.847 112.94 131.847 113.251 cv
131.847 113.558 131.773 113.826 131.626 114.056 cv
131.478 114.285 131.268 114.46 130.995 114.582 cv
130.722 114.704 130.4 114.764 130.029 114.764 cv
129.186 114.764 li
129.186 115.918 li
128.217 115.918 li
128.217 111.732 li
130.029 111.732 li
130.4 111.732 130.722 111.794 130.995 111.917 cv
cp
f
134.984 115.855 mo
134.675 115.766 134.427 115.649 134.239 115.506 cv
134.568 114.776 li
134.747 114.908 134.961 115.014 135.208 115.093 cv
135.455 115.173 135.702 115.213 135.95 115.213 cv
136.224 115.213 136.428 115.172 136.559 115.09 cv
136.691 115.008 136.757 114.9 136.757 114.764 cv
136.757 114.664 136.718 114.582 136.64 114.516 cv
136.562 114.45 136.463 114.397 136.341 114.357 cv
136.22 114.318 136.055 114.274 135.848 114.226 cv
135.529 114.15 135.268 114.075 135.064 113.999 cv
134.861 113.923 134.686 113.801 134.541 113.634 cv
134.395 113.466 134.323 113.243 134.323 112.964 cv
134.323 112.721 134.389 112.501 134.52 112.303 cv
134.652 112.106 134.85 111.95 135.115 111.834 cv
135.38 111.718 135.704 111.661 136.087 111.661 cv
136.354 111.661 136.615 111.692 136.87 111.756 cv
137.125 111.82 137.349 111.912 137.54 112.031 cv
137.241 112.767 li
136.854 112.548 136.468 112.438 136.081 112.438 cv
135.81 112.438 135.61 112.482 135.48 112.569 cv
135.35 112.657 135.286 112.773 135.286 112.916 cv
135.286 113.06 135.36 113.166 135.51 113.236 cv
135.66 113.306 135.888 113.375 136.195 113.442 cv
136.514 113.518 136.775 113.594 136.978 113.67 cv
137.182 113.746 137.356 113.865 137.501 114.029 cv
137.647 114.192 137.72 114.413 137.72 114.692 cv
137.72 114.932 137.653 115.15 137.519 115.347 cv
137.386 115.545 137.185 115.701 136.918 115.817 cv
136.651 115.933 136.326 115.99 135.943 115.99 cv
135.613 115.99 135.292 115.945 134.984 115.855 cv
cp
f
140.821 115.494 mo
140.488 115.163 140.321 114.69 140.321 114.077 cv
140.321 111.732 li
141.29 111.732 li
141.29 114.04 li
141.29 114.79 141.601 115.165 142.223 115.165 cv
142.526 115.165 142.757 115.074 142.917 114.893 cv
143.076 114.711 143.156 114.427 143.156 114.04 cv
143.156 111.732 li
144.113 111.732 li
144.113 114.077 li
144.113 114.69 143.946 115.163 143.613 115.494 cv
143.281 115.825 142.815 115.99 142.217 115.99 cv
141.619 115.99 141.153 115.825 140.821 115.494 cv
cp
f
150.852 115.918 mo
150.846 113.407 li
149.614 115.476 li
149.178 115.476 li
147.952 113.46 li
147.952 115.918 li
147.043 115.918 li
147.043 111.732 li
147.844 111.732 li
149.411 114.333 li
150.953 111.732 li
151.749 111.732 li
151.761 115.918 li
150.852 115.918 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 23.1.0
%%For: (Akash Gupta) ()
%%Title: (SL-100820-36540-01.eps)
%%CreationDate: 10/8/2020 4:50 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6kBc.1dPh%%hUf0\!LtkK.gL#;g,NPoEtf`^-3su6ZY"[!a8T(]Me!L^2$*3ab[.VA[(7c1eQp_-f(*k2Ct/n_]bE@(%=)&F
%(-DUpi&n(hX.B;=o)JW+H257cd$l*q"r2tpYr*I7A;/!,'^$Ci8$:gqEAQLPl#f()R<cL!N1!\pC5+jU+'RKAU6XXQc#]peX6+V%
%[&W4<E).`*4su>iSi!R<Ap^<r6S@rUjQ=W4g]\_VB6%:,:=\9#7^m6-&,O<.b8:''hBCi-q7Cg"TpL_8D/$FeefT=m1m4#8f,;8q
%d3##;i"H$l_2k1t?IW.YRuZat[XsRKc\#Nu4_G5:dNj$.0G$nV1<s8'NE&"Ug4'2Urib)Cj!XcKH$GB8a%<2h3!Mkl8;p%MiFgHH
%Jc.8&?<JL@&d_`RUS_1Zk%Adl2eM_dUT3!.<BngO6(Tpn<B7"@><cG0h[6A/\#I"Y<#'3mWBu\XnLg6kK<g$Z=G@,3I-7Z8h<<`)
%rHlV,TPF_eEm,b;fbrftR"<<a*_oS&b87:\DI(g&gTc?$8u7t>0ai:B#k-WAXD5[SHGi;PF]r<5X/+KXpL^geM@FhFVZ#7`X*1TC
%d*[eTB99HS?I,'AKM[tse0(M7$4)dQJikG3.*8dY@6%ZdW%8K2dIBU9!7r9]R#<a%G))WrLQPI.Be]*6b:"8$&1`Cm".UJgc4&@7
%N'_^iaIGbos,bNY9$`!%q`fjVOFqE9oen<OpDc9ZR7^0B,_L^sl@kU.6\RAeCD8*m*TgGR/31Ig^Q@?GMcRaSL0Sse2;nb7NZJ/k
%^Jjuunslkki5^8hCc,,`UA<.8efk8RVgFG`]'c7VHH<9RcPj?k=n['gWkd4c6.`\c,,c@ghj@.p(#@0%hfnBkrKWDHoXo$E@#tQ<
%=md$=?n^`.4BY>#"39oEe&G+;TG=NP5MSoG[f>70rSXr2phg?/C81]%YF:HBNbLR64f58`?*cRYCMW/Rr1\aC]3Sl5h7dmZ-Q%%0
%`'Se7=3B/"4[4oDWbJqY4d/QHm\@',=rtUt<3,Kl>XR$AVio/+7a@9(e!aQs32P47bmom.CKCKa'RJ"uO"h)W-s9`KCud`VX48bJ
%ZDLdloKM4-c:GX`Oe;,<<tjO_/SA+DB!!j_n!,_'"X@C)1I%>:5/oRFWT.gS_T3'tksj4`q5.@_;"T9@H*0G=O]3kVU#gIO&Y#JR
%a0ZQ`Yo(NcWbVs#.SM_O,gb,WR>*[(fM#Eu!1\%#LXZ)YdrD&tX#N0@P.2g6pQj]1c)D1\aX%h#m;F%q?a&c*A91=2cQ0ci(9OV8
%qnk93[.S@7+_bXJh(8r?nSb9InSb1;2F!msmL?q#&o`4mf9=-erL7MW[;<0\];<>XrOZbt/F`J<BqVSX1C[41JoL(B#,h-4VLadm
%a*p9ep]Maf*!9BX8MF6/k"Wo5lh[e^P%bc!juTO9d6V^L[GeG=TSib+3kb,n/T0-Dp4Mg8V,5_pf;A@=$@(m?%=bL.dkC^Lk]eH\
%iBf%3>4ksnJ=YNp$5n'&K7\`V?QnB9oBKD6aF6(Ls#)+CS\JipGtW@@m.q/'n,0T0,?Fe.%1W(1ZH/N<UXORP2sjrdH*'ro0?jGS
%I`B184`EL!EkdcBHq80N[(P_sAl.7>OPYp?iBqq_4(oIohMe,f@s[`.kSTWBN$)Y%HLj4sq2jHl+QIlro/jr6P2;.j@W6Yb>A3i"
%hMe2h6[J>cB_[tON$.(HHLj3H(nBHATOM;To33X=R,3cGj$S.a4(oImhMe,d@s[`NB_[tON2#8uHLj43(m*U5T]'C,o/gV&QJRQC
%jKGF>DX$pPl&FHFs)`SI?4)0+]l?.1+&6`<8]IAnDa$b0+%^BUgZ4ttDd47@mn[lW%fHX\Rnnk<O/+_;V>^_J)q!-hc+AA#s2Y/2
%^^M3YPHk&6..:&u5pO'9"b(0qpR0*qn_0B1QNl_#)1tDObBJ&RnlH&Wd;=jq1_(P.PLKKY5k!-e5pQ'c.DIcE2_c10;C<.RV,=h'
%a.P^Z\]-:^d@XYP)Q,6XppIB<l,1;f3r-WGNRF"5$lYt3&cC?2h%X8T-lpP39;D-0r'@*";>i/-_T0c'+#XHoM-o`US\5NADUm(u
%FOS.JXU.aTpU_%^Q;-iDe<Yd&4'LgM5pO4,ZSY9$:F%`0N;fG1j#EC'CD='Kk;l>Hl!,/2OBTZTC5qqr:MnN'QBEX52LqdC4,ZS:
%aaD_,I/2F9NS21$\gl-M37BX!^!hDRX>Ot7/;D:O?LG8GFLr6Z'D4]\`je9Am$9YtTg*.lp6.tr`Z:22S^3l=I(MC!4uE^/q&D=!
%1srBH@t"c3f)DdOlgSBa,Qj26AMeh,%;6T`/F@kTI+bG6/A4e^E1Y<Rh<t8us4BPtD>8+1AXI&$B/9X\!kR]5oM)BpS5s4W.$a0C
%mHP6?8Md$4h/Hjjm'pKdLC6:p9TB:#)YoDWc35Ff]4oj:^Fn16GB,6&;U:J?UT?Vbj&n)D/pP3%P@DNWqd4]A()Y@rOn^Q7D;,58
%IB>H`Yqg/[OW,s<HE24T\$^.c)k$=VT%HF>1?*PeE`uC;>5DGrYNO`Oa`m,"`LPbiEoWRooOb/h-A]&K:5YURRB[2d39+.VP'6U+
%LDr>ACHY6p[AmUfqKV_t?"<]qFT*diZ_OH?mj.Sm350\e*\I8GW$Pr^XLu8CGH8=]FEKNnY!+j%)bOKK'4q?I=/P)2Q#>(8p2NQM
%=RbTW$od_P6?9:Wai[j^QTmkA!A!1:fSo,b:O&JR9jR$<:Z\HH+1%-Q$1h-as$eL$6I@TVb.4H=bVQeT-MN:`.p<ibL$GXO2!;F)
%1c`6p/iV,<k.08`kAnG+b2i][=30N/l"!8h3HlC0rd6>uJ((H?a4p&hTUWoJLPC8@jF2Zqmim*og4d'9c#>Sn\cC$hbpUJ3Y1ad0
%WI?SFR3W-lf36FrU",pU\XRKlm)%NbDIQRRJjINg%rT%+@=iCQh=R(\mq!8m:#-jF)eO>tT+TplEgF%jMl>(No<#$)-2qbKFhR34
%0ct>%(f#5"?d,T1D=(:"F`3Z^IoX^(E'%['*$+mh4?W0#!t%8mD@038]1Fa?@ZsQnAJMVcT#kd9)!Ym#pZ]H2#0qh,f!+u@(EE:Y
%GuMd/iQlaor,a*>T+anR=a+[UH&3^f]&LST>!GT;OZ&31II+,R[ING$a>eb>fEjVq$$okRXf;'1?Z%UVP9l^EX9hS0WQeVlo=7k]
%C%D<WZ@WGP65eEhMDL`ZS,#pLi:Lt#Sh%_Rm,NYfDB=NIUAB*G-LGukc6Bf2)0WQfgMWCHWVH5pkVDh9Z"hqP4T9VFr$C;t>AX73
%V=ud+A<I9_dB/RlP+5+Nj*m_N9muq:.d"?jk.?!F<hEX%1Z]o>QMjFfHped`9`HH3Qt]TrQEL70Z-G.TDW<60\%r8S4G7We"f(0K
%,41,Kbr*8YY,m5+Y8[=J=f)SGbfj!5DN*p@mt:OJGgj#<AUJWo$e-kaBunnH@rpfjV9\BW4Yl3__3he)qE*rs(YB8al8bmopK9Km
%lX$nR^F/N8`h/^X1V=+HPo?NJ@^t&A3J1-%]7>hrqK.54%2tfQ7lGk*s$&a&5IJKi.tM?Q%k*7D==&cg[<c,^AorEMK<%-$j"6HM
%[0md>pWrI*nWlc:2f,*gYKq:eFM`\Q9DAiJaH^D-rlm/X(M5N\keIW`ZP%-77^GtBnp4$6gF$07-:8:'C&djRprN/W*3V<ld1)=U
%2k4V-S9jYdU'rn8DP<pnG:lpDB*2$2k$o)Ql/Q7J/Et8)m7b!=F/=e/TB^<c>b9(/5$Sf%B#]P8@HOU4ZVttV)6%:KX6t/t<%"Tj
%3dFTl3**D6^/\s.=?Pt^W42;mfOBRY[,*jD??5-AST^3+`J)e,ePpnb;o6@qAbEO)'U)OlY%oXJd-%fOrkrob&%\\'UmQ2].rE`E
%cnd&iK;Fduc\:<m$ANDFF(KE`VN^"3X+&ZL\8W#kDJdX=)45-]M&DcjFp`-4k+\uT(^1[,ZfWU;P%GBP/@;ucEtpJirY,NCi*a!D
%1>dpD'a\(C/+#`E_p#3H04oGVMCUPXqo!GpW8%f!7JXgh%*[&lU<NA+9XF969'D]372_bbq-K<#`Li(<?q0jaHjLqVb-OhB?Bk@h
%g5FsFR9>A)?ZIe,qgW!,MCTpAHLEcLM__DjHG12,CAaPO>tk,ps/LECnm?)aMAp/>A_-n,<LR(G;r^K:TC<b_eE(KgT''jDf3Auq
%GN-X/.,p:c0hD_deG4f\e8q.MVt)s$$H'4W_bJ*`<_iMeC56=!ku3'Yl<$8pb08YEIE&H^F2-j("EV=9pM4ib2A:Nk@DS3h>arX=
%Bm+8Q)X6%Xc+Vio]\4@,c,&,hX3J?3=7L%=.mhPq=Po].Ogkt=Y:drBe,nQU)L[&Qan'6-63Qmo1nR6c2BssudD]ukb4LCg%>d5b
%-\]XW3M_XaokM(<rHS=d:BO@FU%u<S>R8HM(\FG!+9&Fc^7A(0?*iRo*h)P34":,4HHdFUrkeS<ReaKN^\Q!a1%'Ma&#Etun5u.L
%m*4%R2"LfTB&l2ner?l#KbI`SCm\]pX9eh]*r%AsTAfgfn:ToM4QA3-%-02l^.]J&qH>O%r!SALAG52tHI;N3CuTZZcMtk#r6qa-
%BqP;j$2b6*/[M]%2Z4.hS$e"(KKT1629\kpU-G-C,D`b<Rn59kU)I&M[Y:S[);&V3YgWadDC.qdJoek!dBt`gcTWE&l/lF,g0Pj3
%_Q<O4WK3(.A_?+5DS(`N1DhEDB.u+V,QH-LMdIZ!cJh1/-ZqM#dVo,\hgGCsO0/H]js0]albCp6G3A2+oC^uIY#ETsIpHc'3nAeq
%j@`),lbE&ahnP3nE<V_>_Cgu3I*Hk-.je2$fUB#>cI[I,CVHDN1bQY(;(T/EHH`HX:oq:6Yn)%Pb1M1,eZ/Fn4H!47<48Jd+HHbH
%]&<)V%26VcDEUA,j[nZaXXAiA>e'?j<<OT5QEC/K;ssO[4jlC?q[3QRf,T53-cG-^Z?_.??6T1dXLNiro.o"39K"Pfr;uoq+tp[,
%GtPSWl$>K$-rCLB+>ui(pmY\mFZXF(Ks59*oqC^*oD7,cNneVOc.&f`c"4SfVsVDLPi@9BmAEfsfu%,Vf]Vn\/LOf#M&W6%EJuVt
%U3fhu1sn:+^qi^54mOFXDs2J^P#gT""s?oI7AGpQ9Pb?OQih2?5>`0mGg#1;c*0%u9@UoBjeJe-+1::J7%aFF2Q&Sh]Z^a:o>8\`
%n1lZ0bR6)q_TUgF]3&[=KbpWo6g?>r_TNX+T_$%DB*p;UMo&h6T?l"$O>9T%1t*28:M#&TT?hu6o-V2sPI+7cE;3?A@C?]9E-":[
%Zl_3bL50J-Cr4GJ)=t`mrg)mK3cDb-ZDUF,h_@+hnZci]C!@L+L,BL%;s]aH4ZL__@[[PB^[J)_EH*=GXVm"Uo+RM*ed5$Bd-LW%
%V>9@KP;:TXl8_eo$Kh*Y95=I0*)cF:T#u7s[atAUr2G5M1]KGHM\eet>eI&#1n'YC\`$takNq6fheA](;t%ED@^2oe3#aE^i6ipt
%g71AP4T8^3!WJ"#^Lf5TD4:9Qb94-dP^/!A$Q0l+1X"f1[&gmo3Rhb&WJD?u72P=#JP["J:orSE-f9o8X1`UM]BRn&)aHAK4P6cG
%bR[pLf.gkk'9M@!N#BcPB"j;!I"=>5)]n-aN2b'DB5Pr?lPT4S`jBGl?H8Gb0kR5AJJjoY\_<-%cd0<lI[:#Y>@49$W1J=9G*]VF
%Dm#\Vm;4s7VO4$7'5V\m;bpTn>>)0_h.-TUg/!U8]SlX4bT%R,2`%mNkD'caqe?5c/o+El).?n<8MO;R1meR!;q#^WQik$?/8(OA
%Vq1Y*-To]c)X7J$q*@B_]qF@/Cs<LR)8Oqd&*IAQ/mbemRr4sN3CtSQ5@S:QNYqU:-OdNeo0pj(\VWkQR7lK.B8Rb&3B$(s'n3G?
%/(^df!1D*+TIU^;m>:T8ckAA7i?gZk5PpPo]MLZG:fujQD>8.hbd;<_Ei"m9g$[sVQ0I2meIBpP_bMVI0.;4Q"U,_>4_Co4c[=PP
%]FC'H?B(S:C:l\^kP9g8r$:gsN9>6LVU.GpqqDP(Zak?>2p^XKg"\]Zqp!fa$T'ulk.X/?kMd2-)9h5JE&CGRk/lCPDloJ+F7XKk
%T$GU0\c7lXSG8r/\H)LA&is)TR?<0JSOTJ@V7SY16HR[27#H7RpD*80YP)Q7(Ra(V5_dDDE@r?+T97a@c2>*boCF^"k=WtV\IoQd
%mcuj9hfD'&A-upKJ?/<rhP"1Sb?)P%HHBu:H,KUnE`Le0g-;TT.VVYi8_KZXpQj.L4EAQiXA#B7)W"05,.EGsp8ITEb+&Fu!2$6?
%GKuOE#>K6/AaF4.[P.Zp4Qj,30saX3kNsThG^mc0%.8JqeMI)&kJcA1;;T$R_=ol^MEf^2fZN84="pe\oq]*<Z!XB]ZAMglGKX$:
%o6CE795M+eNU+g,-20'irSe'Q81opWd];l^AU1e`mDN6Tn%tW/5E/jieP]SKjeVYpTk=F>o)'s3'K6:e3-MdB]^[?U+\ptJ$15'U
%k$6-fp=i%Ms#/*4mL%9g]Ocs$:Rg!4i73mtbQ7#LgAN+HG+X'onXhl/HJ4nS*#-X%.%4Y?hbH_^nHUiZME^i^odP+4?`oLj#PTZC
%^U_VC$R98qf^0lE=,%a/d]3dm1b&$:_h4F=;OQGWEKS4?L:-:+JXp[A%,5.:a+H'[fDB^a[q_4;QYX15(Ga36N-&F"T)SLe2=.\^
%%'@^sKB!Y-j_56cDKqQBi92Mlb_+q4q5JXES;CKd*ZMj\Cn/HOo)*'OdgCF#N0BkSIJcqlB$qm;egn8FjLa9_o(fS$%tg:hrH7^a
%M<5$V9u-LK)!C@\:Rs#rF[eR+Z,_%*=`>E\+1h1)mcK="5dTY[CDq<Xii%i>ne1#'Ss*$19t-Ve>(H(B*qAd`T88ut*1H[Z1'0'>
%q:$LL&bl^2AGitfdmVhKqb,8Q:3-'Sn0&I;!,5AMC0tjkh1(hS1U'E%9*r[=p5bd$r$<+NAjA:Rmh/_]0;>"/4Pd%d(Jb^ig+8\<
%5lHrL/)&]O;7D^ConSDbZa_F-H!IGqfNPGX?b*:'p9gKV[L!OQX2L9>eajS5ksg91L[iU5Cj+$=Il>Q1SNF/\ZEi[^2i!J/#L="'
%>$AUBFRpi5.CAosTphqcBj\%>n`bg5Atnc\\XG(4SsMVFBnpMMMc?bK%-PCZl[4WPT@m]LLFDrY99>Ga.@,6Se-hh6+d$Oa?@"dm
%lY5R:*)RAgY"//J;=FJFTDtH?aDVFa/R<50^LuV%-9tD'@-2Q,e7pkaSeJ6/Q#t2jAefj9EBed5Y;*._2+f]53)-`V=l"a\>P[i?
%T/V1iTL08Ed8/%0?u60taMBP;IEk#):@PIr6iP!<*8UPbqoMq(D\:1<i.9f\R#X[Zo6[$U_`>7CWKSgr.2W>YXVmnbW9Tr2):'3"
%_ZU]?PZ<`[fRj-TS>n9U$=@[-r4Te)lfJG$4+pD5E:#_@kW/1g5;JhI5Od\:D0f-2EQC%V[);<9\HYmm@9Ho;Vjfl(R<&/VZ1J2G
%8J*qX92oJVkOAXZ;"0+Qah/`=aYG(jb(("PJH]rb=l<qb"^sM$%)^.!'$RVN`2Xi)QPG'aKth-dibX]*bm'TA$bPM&5nVLL"]hHA
%Ga;uu\OrAA+:#Qt!7_08qumk#fk4`@%%MJVeF?s&.#A:a/"hc"6r@[e#nKW8a,<%iq<+`!'.bM,V42]hGq**Q4GK,#'l[!2;)qC9
%i.J&PU7s]/:6FIqr)Xl/l6a):&%-;,h"4E)51ZEo;H-Z_6=cM)5C\I&nNh&uoSno>";S/"`-:G*,sc.=^I+Wo'Q%=O$&ko!D1_D>
%O#iK35CmedDZlI1gk"ubOE_)j#9uU7+d"-#65n2/247rC$!Shi`)u8Bd-`(b9eG`b@a`cS5!D;-Z7I1RY%#f^l#RT'-:jc0R%u43
%,\!>gLk&VRO$ck#\c)af?%jV3">[rV(`e_92oNeK$;D20cW+YI+FS-*+eE7!Op;k]'BDn<,RZ*>rJaKA@,2Os-;L@p?o*'P>t#K.
%jZ,bES)`D26PniH8`g1F7Q8QuOt:^n#H>;O$,g'-`;(A%\uFsh&%/Q,%BhICeDl2\>'^SGCV&cjgr5Z&dH@7f-:/tU3Jnim#;L>B
%PghEU7f<_<*s1ULdS'\,/jdes;!Fk0-;,=3ORa-[(,#*V+;1t[+Hod5'aJH[5Pt]5>u]Z+Pn?R@`Nq,Ej#J7f,@Tgi;!B;H9qFs9
%@;,42\l_1+3*`1F,NVo\TeJOM;S1M[19;t1J&dtg==Ta\C3^Vr6;p:SS(/ZN'F!L!312D:Z%=CNEX_8u'SA0=6KUVW0e>!X%Ca<g
%aciTdo^O*L)4`('rrPXL_q3eCaA$"5G:@R=^L9/j4RXIF5mkPf,#*hpWLF7dIk;Dt?%f%'T[H7gRQQjeRkVeMJkQO=MQBA)brEjQ
%#sH.i0+eNNj3(utEt^qg8Y<'.FVD0uW=(G4RjFT>99G]4S%hUYS'>l7`&cW]'isHYrmrS"r=q*DCiGk+RA-0FCf<TrM`c]''SS(S
%Z[h7NM0r]2L8'*aQ?Md#,[F[L_dB(m7A;QF[(@a#9eGb==-C1NlWU?(5Q2IsMaQI?PtZAV9/:H3O:Mb)ULaTpCh(k^aJX8jL\!bP
%b":(j4ceZ_J$p`,<H['I.3n*4B..-!^ORAo[RCZc!_F""r^?#Ds7"A7deQ1l>.Z-M5^.[#0/:*s>1N0YkLOa^b@ua(cTT!a%-7,]
%rM)>dPQ1Eb'[+iF1I#V7Z\i&eJ%a1M]t6=A"Gc3NR;^XJ\fKC=&B453B);X5-%>6.l4YfB4;'^5kMZqR6K??9Q@Gs)h_`K[-R"hK
%7m>&+r4KI9Da&["XCc_DA$"#oIi*ON7>I=Ds4<YT<R.NZJF2k3X$^)&Bh#R-M+h01X1.oE<%n]rD#BLAd&q-G/,IoMNtY.>9n0'<
%r44"?4tOAElqZ.:*iJ"4B"67V`0L@JV\&^ehCW-ikqI/=1Z)s$Ao.n1h]F`':fB_<LG9J_NI+=s)tPC4rf#dM:!_F[b0Ar?.Br7Y
%nDqioOoII[*97\hc0>R`F/BD\moV6sB9lC5InU.lk2T07iQO<9AV7WDX.IQD>oUb*=Z8ra="^E"F=K6Yn-l&p)1`gOiReqZ&1W-&
%$"(?>P%X."Z$^sY$ML]jD>!M_[%%L&=B,iOOOK8%DsStk-kTC2.u;*=7j1=G<kU1-^]NNO<7"LkD63eolSfBMr\?3d"fH1rb/em4
%e(a=eoRbJjGqS`d=`$/FYYI]N'[(e`FVt0UXbJ3+"gc_E]&cLfH;h:94m=OK1@<a+8ZA9p]ik&6BMD^?N1Zo)eh^(U9/(e'S@.]Q
%b8tj@j+qO`IE,O)eC$t#-Z(bFNH\"8+Z.BfR@7.FjRGr@n)cYhYjn+$L1]D6'g3kd.!V3#:VAhHNP=&NTf#(F9r$:>C-CX+n3r"%
%dXRs!"Q.8iB#D"5pKl=;Q*u@A[X]9"Tq,g(:4L'3p&8:"C@m%d8BMT[fk*aMD+6ogi09pEnSk()f?/E,#(a7#aA]'*l>M9c8s\-B
%[3UXB34rV,\)4GI=Im=GfVTrfmnBde1j&U8_O:K@VqF*BX-;h1gQ$W[@/IM^Zc2d<Ha<L_[O4p+Cb9:!%D*X`=c$5T:=j?XNbS0)
%=u4W?J(,=0<F%7#>eB9@#BH.jQLPYN;q3)7%t)jt2NX?UWZ$0Ih?Pf_n&\Xj#4R?BjhDqB&f>`FX9.ebZu9X^UOWE('):\4Q<Ube
%-WMh84fQ#*5<WgTJ7WmR_!ofbinoK)OlL4%:%0XW,JA_>H@fIMi3mWhn`ei4!cND$PHiAe1Ocfk@4X=j3\eD6<WgOpD%9"2,NuLP
%iHs<rj.!ancJTROT(pq*3miDA:dO_'AOKlALdV&#)^*icE&:7k]q!399WN^q2*GJE_K4;jlCHBhbB;T"](tr`L3Dc@f"^J"0bT,l
%?8_#ZVeK@IV2Iu1j@K57"gi?Dfq<7#?FNi&-M_p@W9LZP2Y1)eK1fS;hA06N(EC",buc+pOL$<b<?eDQX'0@Eg(fDcaFmn*b^QOH
%9s&:P*fu91*7/Yd4D^D7+(>]&4_MR>dl.c*"apBgRo+f1c*J;0`)8$QN9b`l[Fk'5cg^@?WTD)`s)4eW:dckhF*X12pK2^U*>6id
%28fEc_5R3H[/K$6eHGVcTf60*AiHH<n`RQ!'jucEe@9/_e?o+&mm@.-kCG&2RB'N)i';pW@"@*VN7(.,nLif^5MXdR(@+Pf1S5bJ
%hWA:S:LfIb#_SnB3C]5")GREqVN#9%hRoR845/l'a29eZ]9,pla%EW(fm=7^lN'P7(rh2q'+Z_liW7dAMX"g*SU-5U#pISK\KBlU
%FsWM6rme(-+,bIE!u`Ai'7gQeb6UkdDFepQ@8WV+K[J+]>=4fB2qLh9FukF%p:Ve;Lj%S7Bq*ae2Z_]]206U(@Fm>Xn/j3ERW39C
%7]BDpk&@2e`F=oEGMWok]QpQWK3jA+B[\LA*MfQ8Q0*ifes[EP;,8YRP?:hJ!aMsRIBBu>HnF!Tbb@u%<."n3#E:utH8h&tiW0tJ
%\mBRLBNDra#3ji,\#5:GO_/G`he\>A;QJDr62UuA80^[F5fA@rc&/WLhOSZ\hYM.8fTYV1&gF\r3WS,#iWHMAJeDa52OaKP(5:>L
%(3stC$OjGsi#20i,m)LL/^-9"24K2]G#N#2r5`)r+F.BmnCn6FYZ29i/Xt>;&OSMEC9Tr^?''oG>93\8Cr%!&rFQdq/*M,+DuMFb
%-sFmIIT/d?,a-Vi'Q>g,l_D&qF(eK9[S&YuT]6Uc_uBM0(S8>qaE'VY^+-5&%W0g%oM^D??r$pmN#IB+?kqUFVt'7OBk+b2#:,$3
%9#BfC<Y)mL_?CZcFSgNB#aPH6V;TJonAHnL!3@=jJbSnPD6W]IQck1cVXqCE1%"hE0r!@umKQ.\K&/=Vp"l.Y+GYV%aaD2j7E4<X
%&;MTTR5"f-m^+=#P]#4K7\4TuH_fcdX&a06):kVNU*)*+*EJ9=IPVhn?O(?-aBl1"Y0=6a'5QX4")V3KN]&Mf;;6MV6cLD(Y6V.i
%F3!B>:6;j*f:/Q%O#C`Po0:5OZAiTXjp^Db"C0Iq]jYAl_t$@+'&QAm`#.kSE&A[lOCh5BgGa.XdYrM7*fD,f(@9@*m-7[[$"t=1
%-uX7E7Z\:=@S)r$LqDPi[_[AM^r75bi[B%;g0$Sn38GhAShT/u[FO_-LBmqH!'/;=]'m*U5)mV?T5*0!hk6B<XP:QXFc8P[N>bjF
%m,g2YL)q]nm'bTi2+Q'GBL4V1#uj!S+5EaI;plS_QY*J)QSbeaNG\o;gEp.f7Q7=ZFT&IHn=D0HRqcdEq8#6,)E,cB6+8l]W'&/C
%!q,G/kRJIEU,HU?4o*=;e>GSGT:TZNeVeXh>(]`#&\,K_81"g\>&r/+%iR@nEX-K;410754[e#k4ZtYhAlu&tU_lJQN2jk$+3HYi
%$703*Ag:_Y[G"r*(^G\^'r(e[TKW\o?onbYLXjmKnn+$39efSolqpTYQdE"a#/)tR\^K\4KItq@pU9KkoV%[G5p5Ako1,nk0'Ppo
%ReSV939#m]MLRGuNYu!"lAV(/CQ7X87+`1E)mJoBZb6409_Q1t;_MS"_qW-^m<`2hr9j:f5c=&=4=^]N(>L4+(0Wg`lU`</csEn7
%d8JGKd:_q8c41rR4?HBW8T!/7Nb4.rMoU5?eEaNF)=NH%E3U3?gTsm)H1LH'3P0-nP:QONNLrFbHG.%Z\C\@,]&<7a*A0UdMKkXN
%qq:q#okeTm3`!$M@EHBifnfQ.WksPQF80B6foPRcqimh?1,]^<XrcJJn6pI)Hqh97;ht-*9YNuA-+o.CcY2A*>s<pKoAj[T3Th@N
%@;Q$,hhiiHf-5V5D<'5!%(!\eN,6:rF_nI)Z+jO(jl+\..GgYP)9qLpIO1eIn_cj/#p04"q)'&=XZ-0(M-g@AQ^tTCr1LkjWYjj?
%3K&9]go*K-,hBO9P-O$,p.spJC6TCB/@1GnMROcqrciXXO)>0MOmH:n3LP]+F!0qZa$aeoF<<0=*\>?m>5T%r)NcBXh%L7m,E(D6
%(JjQK>^Yd"`4T?[(I*DP1mY4+8NJ\#;DrK@a!JBLk[qB6j)=8E+'a9iq3*3F<HqYg<4H8FUDJ9+?*Z^VM[LqKs"h3A\&7l+@!2/+
%$*I?gG2n8fWp&deIS!ge$'pFq7*d[$$NG&`AG;k.G8HC"_X:#QZ+27oMUmBU[jQZQVm;jq0lPY;UCYdGZk=j)m(M3nd2n52G'eu;
%L->9eTWh=>Mq#sK/%Lp=SOq7,r[MMr+,'QKP@Je)D)X-F'?A3nM-k#ZJ,\6)*$0D(416Fs;Q:gn,+4G(HH[cPn6m6Gp953hlci]q
%EE>h'pHkd]Q-H(u?]]'tm,^<T:;X!m_-%u&CpYBV[u3]%kGpfc:s\UjWBt>7\r0V`WdM0'0'?bjZWZ?6<^+M!/*\?SP_J]r)#MsE
%A6Riq5FUMfq[qBdq"J6u\VLk(0#W[!#<j1l3SA\]=@],NM)#&&0)F4NG7c$uGG0!FlLi0#"Ya75k4S-`g.:I[UG1U%j+>m,HLp9)
%&#nm5fVs%fM)0M1*q@uoEm7RNT@.kTlJHCR8dbP35U6$+GSaC%6f,eApo/IooB3d01<eaCm5#>e_.neZpTEman%HG'`q6DUKnE_3
%q*NTCEV4G8%6PnB]tmshkM7[,gKpbC552?W=nhKFp6(b\>tSFCAa@\nD(IkrAbOgJ.XNPU=%s#,hU&+naW&Nh2ahr#=0?-'cHbC:
%GP>jajP?lCIW%'M*r!\B(SABt'l1p\9Y]t?&!e.FhUG\<d<cR@7D-[po!A(4fC/=.=/;)T4;T`bRFI)O]ju"5]iV>f"n.G]Omq3j
%DjPI2LRUriqfH.mn@iGP%<(\",3(911mYen_ToEqChgDfZGIT+CSBKAYB^o=pV,amhn8XeGHg""Bs!*.7eC5"-+^UlYZAKK>k#dW
%R>!nIq.5+;dD?8RHW#K)(<"hOiIZ*]]!`.[eK5QM<jf&`4mVfY+]c=u/0pjJKS@ocWk*0IE,`7)<]C[,/un+-KhM:m]5YqY7h:aI
%_SUB6qn/#k_9g/?MH_beTnD'.j)LcT<`1o9]m;+Z/nD&[`>)gj]]_.lf8G3=FKijW\&tGT_YY.7Rata!H3kB(pF]e@(?;<JB8[!4
%-FnAK?.iOX5F`+>g"5W,ipEIYFn&=G/1bOMc!&UiRG-XNGOu6[/ClI`ji-@SUpRLJ[Td!?h2%>^r(m4O,pn$3\g2STCJ3s1o@q^=
%;8^![MmKHW#CIf$FQ1%NQS(1bgIp/7d/MJ2k#H_!$SC3g'i0k499kiUCT1b2#FE-_ei!rC]Q/(>]^0R=4tO%<>('PZ,Q?f,e!6Kc
%-r\>@n!DADb9og7^?(:ngfqKuY]#i"Wg1'T_Q+h3^HTE.QQ*nkD8f`+KU(([iHur];JW?>nj7RIP\0Acp5I'2%(!5m>og&;gf3Ph
%fp.QaQ+QYdgks)g_FdB9moSfElekAci4E<$BjM$F"8_0)Wc7VJ>Rd<\+',.,VQcLMb7n"+%m.D(f>_!(or1qT=Y37Trmf_Bl?Up_
%m-UN+>i"*,Xp'aKc'kG#Tsa8h`El1__`)?Yi$6jZoutS4_h47^.i^I-f;_\;>-jto$bk/iT(d*Ar+VdNI(\LoI;/t7qeu#%0-.,.
%HoHhcCYt'74n9IP=WGHU<`R*2jnP<p4h,OI\1Tqahpuu^KZa,l^SJ'*YF+&?Xf4Oe"5nQ/Y8E>plaHV:n+ZWMO+'hYTDd`$Kq(C,
%_A)sH)tBs.qW,ZeCCABus6GLSo\0`i1(:Lop:M6ui0((gNNI_V^QE1VNK(8lF)g761!OXt?hhQ//Q]Im/C_"k5[\lX+-8j@80DsL
%Fr`QB(<sX[pqR,@*j/9?Q/G(kcmmj+6%AP+,UfeUWklAh",@1(?*.B;YE$)XK%eW66*PZ;YAPs4nlqT7Mi6Af;HOVlA$(B]c*NMV
%Dr+b@5&Gm3MOSPKV]<%O(>30lbJagp.r%Z<cqZ5L=/G[LP<7qrV@E^7bGhmZ(kuTtI@KSH``HbN)KWc%RPMqGfU0e3&(4P7ns^6M
%\F!9\[ppbbgemG&QFg91mW/Op,BIeDMlXKDSuM=Ei-XEmil`X?QD965UUmhQ^E/^U@H%'AJRO4+46@?f\)\:_nCG>sgoN0^Jpt>]
%'Unqt;tO/BD,J!4(W?8SCg"F+4S+F*5`$*12V)GRI6G.l.I>6/P`0KlV!LP4=isarWm[A_]-=FC#a2:c$;$1qqbK^@o$n4OOUIJc
%/iO.TCei9YQ*#[kL2mud$Hh1"pf&u.p0Q:gZTV(FoV8c3?+F^KkDAbqqP#XZbZD526L2YYGpnn^n:LPkh%/?,j[R>4DT?1QnBt1a
%$k'?=A2kW;D2,Cea5_-tqJ\<.CWuGeZaM9"mDWCkX`QRqg<u2jhpu$%mU\JaHQ1_r=YKQY:UP4lqtY!kBY/74niIff8(Pt/4SQ@,
%HF09tH+l@+'A."9NKr<b+BI1O3OKoPcPjjg>qNT!hmFAk]!lsn^UY/Cq:31&g9Pq+:ocDshP\CdK\,XO8>:'-MHlLNMilUkXW1X&
%Wk:gOo2[Ghe6oBA;fmLDg9C-s(a^"\?0>]0mW^+FZ0fG20t2WI?b0qdiptc:1OaQa%)sBmbE7&0jWp&B>hLhE;.\RM\:!d8'#o7b
%2S"/4g.[5[bA-TIY?WDqB6J@R)tIk7MZMpR5NOuG@J1e0o-aERI\1buW(4+FGhT/;glrI6#IX5>.CG:$g.=_\^=UlrI6NsC<VNU_
%?].!/gsHr:LRDuSnZ[D;mi8I#h)CD'n"-\B/p'ekk@rShCPm7]]`$(5PKCk5e]@T,q<ItP`5d2-:3MS0lm-plE$qj:YkQX#Qcc3<
%.<0i`/M<Wdf!ZXZB>KdBpalE_E+enQXc9Zr6tJ7#Q*nSQCA4EeI^Ym8F73VDFfm"7L%@*CD&J'g0D[!P`S+pm\_-"NjbkX#F8)DP
%H?kn2e5n7YqjSD4bgVu`OnC=hpp3S9G:T-mXds#rFtn3OT"eIAN8>Y10(1QBkEf4->e(K>[b7^Fo$5?WE@(.$m>GQZ)!3kW.UHH=
%.E`+N<cKL,,98n\hOODn_De=68cI<@Z6\>I+"q]EO8#/bkLGON?)W.`H^EOoR<Q&ln+`J+2V7DYpsRW>i@28-i7lP(+(EF5h8;U_
%Z1I1-%'IB"O5\Pamd]j1F8T]`X7DII8W-AWhRhd2+g56:#;7_Dc`&d&Ia6i8r@^>XeU!)&fuhLe]q*c@;Rm$LGOOg#]A#tkZrSZ)
%SdSo$e%)Nr<B=cpk:Z>JWI4rfj>0O(5&VL=[">Y^H7bZM)66TG](bI++X?::mCT<'NJ0$Cr4uUOG]nMa.TVFRI#7%]<9Ys?nm&1O
%9lHFaYD:<cc.Z1.>-TVGGjpEHo?5Lo;*R35@/;@Lo;U?cK>7-6.&F@&l:SH\\V`o<9(THa<OWV(9(fX3lEu>8g.lL'.oWK3EQQ,p
%lC,:f:TUi4p&$/CD/RE\gH7UVYK_**B</j'B8_akk4ti^qRqY<ba\1/,JIH]Zj"Xr#Baf8pip@5YKQf;hf;S2mt2OAfuD.JCfe$1
%[JNq2g*2eje+3F'FkT,M8$"YFj2pI$.I\5R><GE_hm]s7EV"OJ51"LaeCuj'G$t!FI9WS6C[-)kXP4Oni,13VM:.cbZ</sIgJp;5
%3JYj4RlW")AD\u*%.2s*Bp7r;7dWYF\2QpaFgBK$Xr5c]MXj;=@bn&"O4]0u3,Xr;d#lauc/qF#.bVOKZ%gD\D#9-QasYW'2QK;;
%&-Juom@hhH$>\'FCD"bhDH`=cDQSAlFgd'I:9=6<A##f;J?79ZkW8*ur<EGmki6@K3-8@h#c#bY(-$+ZW%Eh,A^jQ7f=ai+_SF<6
%qj%o%DK_pT$CB]r3V1uBcIe/k##@O)@"$o!,7^?u`:IjR_=)KP>*!\n9aA`"#0hq>"o#jikMm&q_7.#2/cI3J8E#kIUM+c7d@ZmX
%(Hn'><nTX!EqVc-r?jO;Tk1I451l5V`]Wj(+BKYZV3)gT/pKeTQC64gA*o%hNEgTF.\plnTl;i`mq0KC:>I<6GC8"Z-To$50i%%6
%4V.)Y]q]RUMh<sf&$c-h]=CFe;BhfYZ1N+KLlU5X3@*,I)siY$7/'JVN>f?C[)9SP>8qTE0X67hXjmfJeJ$Ad$b#XdbijKZ'#U6Q
%XY.C"J=&f9>g"apdI-<!.#GZf0On'db*Xo(.BaCC5fqW(m`Nnk[pr4B$spgR.*Q1fFcWkmaTFGW-SdPBhog?%e'r=O$Lj,^&[@DP
%f>bc4<GP>,0iB]H\d-7>4=1g8!'%oWiSPuqYHQt.B$8Z%_Q@3d3r4%;"j*F.Q8GB)1$\Bp:Ce<"nA)i1%dLjEa#:2t]^@MqSoW(S
%e`_EGnG+le&U4Rrg<E[4N!-'DEO#nQgDM$b)%Z)4"]Uu1/jVtUe#HL=#drU[nD"46H-9l[gJQCs6MHV!c>i=a/i4&o%h[72/L>gU
%o_G!Hc*JWR$$S]L"GYFiXZ5c(h8h/WT6km$ki<`sJbm7*i6;_+>i2H,B00f$=Ef?lKUC>`%fdN=#R+?_gd;Z\XHRV7=f<'YcW9K4
%>M%W1@I7[eOC(!U7/*e]=ufQ^HOl=sNO@<(T`poYdcEb]=q'e(mdHYO]:n8?eWW.sQ'[[@mR12i"_!O%Rdo!SBnKRB$U4gHpU2su
%c+W6O[gBt=Ko`oJ]@ESq/KL?'mqiAW->%)_jQ")7C?`W<a+[_7:lZoi6h9'I*IiKr$?q&\8Bj877T(,9m,*p@>KOCZF<,e3Y$T""
%nKN%A)q`o.X;9ouoD=;62AWqD5&,#Jd,Wt`-2G%eC'JJQpr7>)\[Gin_D"AaaVQXpGk(<-`c\b[:bc.^@qGIrm?>W78j(E@^[5n*
%Y$TS;JEUV3WUs`<Vj02G]CSJob3MqN'3M>7,&XbS$\hMcfDPG4?9DSQQ%eDj<b.V*nOHA6??"<[1)\PFlT81'MrenAY>t(UiD1/K
%bB.E`g!jQU=F(8k:PXX;Fa80g@/1mJOlO[.)`$@+$Qk[SYu_9>4mkc(q:1p`q]rg'f,hA[^'2FdgZ^I85AXYWjQ'<H^?1hMaG=\J
%TOdb,HS)Iq8#p[A7X;L,?J^U:[MH%[)le_[Idtq$[(%@$bU<GA<T--[jVAq0^H;+"?ti,7?UV<W9@qU;*C[@LXn\]BA"ZnW@toD:
%4Gduk>:W:Ks3AJi,lHVXoKo"^0MH@--'0eZS`H+.C$Rg"7,,a?&hgUNmZpLs"lD$5SXm\'(Z-f]3uqUFDhSS&Vb]^M*K$Q*Z`)Lt
%#$OG+4!Zq38RU/Y0<g]oODCRL)Lj*n`cYTR\s$IlO_jsG+"qLQ]d5LPFX\g%0$h!:im0]KCcQE(dS'D"8=&;`"=!Esm3:=b\4bVi
%m'\rQU;kr#X\Y4"Db;m#*OM)TCW;:#7"L..qUKumS]1(UeIqQa_^(gVs&E%.3DAjD<r#W!SQtUr/LdE&8YEom%=cl,TAE5ITClO<
%[m``NMd9bZhS7lM9?+#KPW9FFnBX:.d#N:FS@KH]g'a&0U##Pnc$.n.&Udm\2jP8`i>rEd/SIQ/MlLonlH-H!L+cSn0('?4AnsQ4
%>Lj"RVmjPa8uP-=i],eU4<LlIk-b=E8Y!(V_0G6Fef6>.[AmcoC.FDmVs$]-<]j=up*a!5`X9+Xi^jC=@6[q\[]d<69D7oL?1]8O
%\G_En>h'X.oX"=AAQaencF:k=5>qtrRigmCh_#G32XLC^6;CPZ@H$jL9Z!d+=c=4m6R&ZhE1c9?MlD=]?XZ+);M-uXiBnhOnS]N+
%*O\Hi4b->giRd2OomQ_J:lAjj%ca%up0*W&:g?/F,2!X9[!.d0Buu$KIKRK(q3f/g7j<r2L3^of=/=1P.))N)ns-\Lp'>3'<&Ns<
%=70.N_,kNX7P:^#p"jlTg&\_#<C+>IY6Q:B\!]90Tl`GD]>=)F<aIeE*PZ1=^(@Ta&hc^TTDCmk75F]*o9K\-i.1,S9J&!nmanlR
%@"V'YjQX4'*Q%*URFoUC[m?,=f.b0^QM`i!&l3t![Y#F["_>o:9sX;aUOtgP.j=c1YCrCnHC_LjT'S%!X+s@[ol]/_W3W^EX:'AV
%\P5)4E,reWSh;8cMK^Mcq3IU]m!e;G%mTH3V6ep8SdXqk)f)_7c8@/5pYSB.P&'hMMB4NBmNc/9bV==%^M]7i4!V]5>*O1Ffa9!9
%0bD+XT'mR(CpJa9)Va;;G\=*+[Q<f!7#/SZqto%3OMB8T,>=OK3GCen+Tf3*NZs])jHT4oA>+OZGV)U8lOH;YGV:?gHI/VOCKkK)
%AYrh-jJFX18f67K8s;/&lDPikV=8b##T4i7c7iJ9giPE`1K(ujQ17T_0[)Uid$mj<h9H<O6ra*tfd;)h^QP`\6go5U^h)IgL$f@)
%]THs&7$CCe^?DNOYE#Fg1_1D2JW5^PI!+i<^#_<1%$fF&jd"&_[R@R9>[ug#6#qB4ARUsd(q8CBg(?uV^Q73"EamjOafk/&D<n&\
%!IO11:UN8ij!B[^(m+ht-JTb!h/O[h<#ok>7$aWU\)Qg!@\hB_WM9cm/3BEk%.].+\]u2nS1tYI3'uBbN'O>SO;-8i7QsZaFEj(I
%X'cOpq((n:68_Z%>SKh$!'$#Xn)?h_HZ`:`m]gR3QgC(5T0Y$fRacsl>3F(5a_*]I^)(D0hJT&SDNC+c^0QVtc=51C#D(BZ[R8Pi
%<luKpag_CF?.blPP@fr/+,JeQSg9AV53n>h\h=gL=?@$)r%APk0j>.F*M]H"";iJ-b/OmHSlaZp__@!q=0$-6$3-u-3*<iG%_qlu
%>-2NOl2(B6'L1CH0"jp<jDb+h+sK6f*0BAE33rE),K[[5j0^7[A#$S4>[L93%#aN"62i&K's>)d-h5iO,fk?`6%:j1.a,RG;A7.!
%LT:@[UkW=7U$=P3-Hsl%3/e/_"n5l9-1N1_/RjTA8$".m$FS"aeH7.k%QZd[5>&qDKqkf@YV+;jm6;kCDDOH*bqC>hDDOEmVN^?M
%\p2V>imB-RK895!<*BGUn`>T"1YhEt.^=FZJNc6`;&.k$(4EGc3RMqbs,O^?7u:EsO2P@Si+OD'R/>uc`L-sm874n@/Ec4?218<7
%lD>/Tdmf=!q*#!3VKDD"Z!TS`oVJVIA6ce-r&ad/J[VC0Ch]T%"!>K@D[psL\+:&Xjn/E)q:/_Yj@UqhAr_pm%<,bWDWq!*1V;V4
%BXN:(@u>"PeMVp//NC1.oH5WjU("YRg%;^#b$u!)F8lqO_af:'%iq.sH'.4T\dka?#X&Kjh$BVLGH\B_Ft[!d'Y9<B(LS#C]cHtW
%@I`G1P1_M$!ik.d\@kP=8k@dl=PCFF?>FOAjF/UJqSR3]fcjlP8N[2DPmCW2eh<b.BWTkq)#\XhNFAqFHJ:3O.!5(mm#3&7T,uT#
%PDOVOKj.Sn9"/k1c6",tcdR4P/oPO':=061E.47d,)/U:TP7@e(34tf),%rL2ddlnJOh\BH(!#c8q)9LlK4c,rqGgY]?M-J\TY>u
%T_8na_o,afal0kGg<$<Me]7CUA2l$D'$gl1ArtiIJXte,J'Fk"2j_u1bBD^?3-$>J,6repTsakTIN%rWK$tPm!_<J&Idk08C-6h?
%>\9-0H[L=0=Cio:G@t0i=;O$Z!c.9$m@D7Jq[4TG-cHh9@9bW&rcP3mNELhPF7a28C<<o`$#Uhrhr:+sIP]%d>]!l4/BB0JfiR2q
%dFEV[F+K.)7fLYd/bB,CE(!C>2^Em/<P55$heh*8%:RkBc(5cf1iKQB(Kpc*i^IV7q!#2q/*al`NfN_.;bT`5<>DXmGj[E]-h?H7
%D(InbE)SC-nDVS`4LqbC9!1U`b,VXXHrB6$`-jb8l<ZAtfK@3SHFS3]/+&%n2^.(>Qe([M%UT`sT`IX:>2-@bC'tSDobs<q'=mJp
%q>g(F!N@&+0+TFuq#9Ye0n+5/A[+'+#jI<YlB*L-aK@(*P0]%::S>mepi4g$<]kV(#`sg9HK#t193Om;@nqU-\V@7Cn<OA.^td4>
%n^t\;Eqd%n\Wpbgl9=Wj>bXS^XfiEhPtJRmDgTqUHADqNRA9-\Vidj.\lBj+MDc(@mp62T;5;Z9mj>o5/&98f,"OL5!lKkKW$$iO
%g0UH<Cd-PcY$^tq##:bl6uMV!0u-$SAqKu!q&(V%3=@-np;53H%rCUN)`G.`gC$5PVP1JLq,%[f)H]Z/Bl?Z8hM:h?52-+ZNZo2_
%W[1sQV()V=UL<(QbG6jckV8kk*(4$%'&->Q.st'WDPUS&Aj:GW]4/CVgbIL1EWp8H>lYBem"4'9\+*qtS/WSKIW$apD%J7;<k1PH
%X7i%,6apE9^ROMMJ*b[pg873mdmkp>H#pAtg"Y4pi')$tB43*+Qd=L\d*#"=$S[q>d[k82fDC^$M3.B+.ea%7.-9qmN4l;M42jfA
%9skU*A0\C+JX-N1C&^&2F<*Mif*@\ei]V&V,[*:a&`*!Bi4o7t?;P<jgRQ-:iYD[AFK!VgeNmU3lKH7Oekg@/-e@%mc<CaT>KMe!
%Pj*UkY-oNHY#4K03QD9.Z?<IMln9a;q&U8e+7[NJl@+6+\_TRC<$J#7VY[s3P1d:P2K#u^eFLLd,CX`:X;l%@#i%M:+jon/c%r1a
%G9.rr<jq*t39cr)jRYHL[/*t)FL8&91=a(_aI-40@OK!=#ZGNb_T+*E[t/UBK/cou'K9./Rn8,Im+&eOm7J.+_6+t6/Sm&?YA`+u
%7bJSOHur8d:=q'GDnFmC20*kcOGmG3gWpHd(!_rlX_s.)_fY!j.kf:%hpQNd5U3TZ/M6,[A1[:R9#c%l;U;.TUEc`CG@:a7231%Y
%1/h(XXjrma_dKN+>m&eUeh78%[ag2(=ZMEW,7/l:`TQWLnli+_`.Q)EXq7/C+-#$oJ]""Z75DaOrfB<Elpt_CFr72#XM6'jP51uE
%.>ud79aXBc!1(0D6hdY0Q&5G3mT#'i3SoW84_FNNRX*3P2HD%[0Vn"\#G4+!(,2fjBY=PiES_&P2mT!mN`<c_JTrYeZ\4`926Lj\
%/O[n92m:"MQ5:,pZ!uP()/o-#>H;.hnNA&+=5(A3H2[e:lODsB72RQ>ldmt:H-VTq_LQ.!S:jd$=H"X/G-qiGGq2$.Kq3HULT)oG
%rL4,s`/Dfu!<FMI;djMDj4GB8-m]NS=3;pji55n$>^tj=6Zh/c)K.fE;n6.j+.e2:iU+Fp*haT]#.9iB];=ujU[Q55(?182*e=7(
%[mE47Sq-9T`;gSDKhhRDI3b:f548\i1AAc1>O41d?A_cYr(EEgY@;coX3][8eq)!1C.-`G`A$.LE=p19nEXjRB:"3uo)O(Ojf%6)
%mLCh1D!`IM*=-O'GFCsRH/I7]:1bHmC<]`SSTAeWX?XD2Rhf:IdOY=aaP#ig+s=uS?0-oJGV(,/5(bo/m,a>=h1P&_lnmS3_cRK[
%+"bGRilT9aiSN-O/GO+Mo7obje56Bs?m(K9C]1#G?3G4e`CAp_^:CQJ&.b3!<8lVm+0M^la\$Y[pGOqV,o>;4&!ii7%!juDjDP(%
%]"L4iCQDZMmHrukjB>0ffk^G%(*MK'O5Q(nNS_b_o;1hjg3H'^:<l&4lKGgfj!@Q+f\1"%(t-^aHK)UclSu/0s(VdVa(7-!9G>nV
%_eee`$ZWIB!Jl#[adIak[GP)4$?W>*TgBop%<:*J3a)usg&7DPRsM_lDF_;b:"n\#.G%2+4LWDnM/6'I+Wei>RO#SOC'H@e-CNY!
%Cs@7lH8BLLU:OTfe8qH=D!C9VM5qq4`Eg2j0*h0/:8_0UN;1ns54*O(f6'+`+:l#IZX*+#Q+bdZi4O6hQWU#M?`jDa2OJ*0ffF!B
%P]VcX7T['<Kg!.fCutaV*(=l$@@&K6`%7O_GGihBl*hDg@$(SBeS%-eG''B#+M(!5E.fQ3E?2@1(D?OJrB@;gS$2A,`%/'kRRZ<$
%VL/^7:>iRA#MSrA\idTSV%FnuS:#S5H+,L8c"DgV6sfG@d1`.uOR&les2Vu8p&(jEpQt:\JQnrb's@?tNsQY!)^Y!Bc#r:<8DAi$
%V6<0AfO@'ae*1Oo4.H[Y[_&72>t=HcobaQ,XiC&Jh<BGSO-TGH&/)%Kl\HE-Y4Z_@lFMT>h1jT-K"bc"_ICN",2ZQX\p74ul+_0#
%3s?Vt!=!8$e[0,&GO"&X\UT<L$0n^VLEOolh2'R)]kIItNuUoPL\RRPaRi<lFT21P:7WD18>2Nr*,q\5)?Buka-V3236-.]1*o=c
%4rE6%d)2mu>'tG"P=\`GrJ;3&$FA'n!HT]J!%O,g!E^DW>\PagQ\kSc[<-6dD$L+h"&F#G%T(jY%,%>Bo:1rVSB]p2a#]!W]K`_C
%%p`mf?Bj!SF-M$`lIcc`f%i>Z2tu:iC*mflrn-Ai/d<BKXM-o@\tRY9B3bD%PD,!BV:r;/H*c&SO5)p*-WR?pn:e#4%T(;]ht3+5
%eM\=G4Yl)/U.EGE$M6k74GCg647>l<GZ)l'rZ]m-qf)QFFWVLeH#rJe(X"GkX(bF-s7Et\Q978qha>UKY:[bDA_"\=MMDl8Q-CLZ
%4jO#t^GXHn_tlL9FWt@hD9tqln20j#LUMYdel7ON1Gll5*%?Po53%!CaW$F^^Amf>(=Ee/FC-6:0`m:%$YEM4Q[1mS4+nnKioC+^
%\o3_n>eP\kPa.mcZ)T/o$>`P#("Q<9bD\!b^O4g\R1oDaj_cG50)'Ne*%JSp(Y1Df'E\6e>.mo&I9e:.5DFHN.;KAU'KXV+KrT%`
%^0gP#=/l$TX_JR,FjfM:'T/;Z?+9<k^/0W$:Y8J!`Ot)&4g==-<\R_%:l'O<p[;>Hqc(<LSYMOldrL#;Vnrt/)YQDPpGjjns!0&m
%;e*>h7R&9UQr,'WWqmdqIFf`E2t0f3o9P-ONciVq(-%#:o+:J8HpmVXBe;*WOET6.%dk>d$N<8HqnJRdHShmP_"#&1#JEoDb.K.O
%q*%D%2r3-WDAoE19<0q*r7pa!hql+[IKFu"r6PDGs7tRA820dMF)Nu2AohlKhOCpos-V[Gr`Fp6JSp25"9_:+MCceF:WPdC![(^W
%/-U;oQDc0A`$"uq_IX;tn=g%.OctBe!<!'(6%Da]L)GOQb+ci7,pgW']]dJth/JFn#U3SUK;'c7ckPQ\iA(>Y,6s/5!aLraTVO'i
%UF66KQBUP"1)H/iSm7T?'+Du<$6/%P!Cr<70i<L;.MEM-)2XU1TFAMtgYmI?B7LT(beofU_CWmP60t0O`3UWr%LFHR-k^^ATHjjO
%]c4O\_=$8;0*N)NKn3?[EUJR!,aADU=]Gn\%$0aoC62:Y#C&1_n!HFU_;0&@.fnfQaA%p'QM)^VO?'QcY6G/,#7f#_'qV=I"%eHG
%#a?U#a0@W9X9'lhCS3UUjl%,2+]0FU,P"j6gctk4=Md$S?s'WIaB+V!%'$/@?kcEEbCah\Q)Y)M/$i2j4NdnRT'-etNNXsg94C`Y
%<4p5gO.\nRV?Boo(HLYD)D[Qs%pq:r7?1Ie84K0AS-VG*('E+mAA]]7+t*]M$h1/!(*a.XDW$\XS-MJ5+;AJrd?p&!*j8-X%8[e_
%X"6f,>Z62qNi/BT@)\k?+IA#uA7a+6>Z66;9T0>r',1q`-EpBE:cY7-L<>D/%^bhbLhq[GLe4l$rMc$&70'm&!\]-.78sf$"?D45
%3_.X8_.9K&=G[(4"W=lf-"?7,#,[?\TZBE!;&%`Ej$bFWOb(>WN_m7o+@3L?RcXo<+@/<1\K[bI3=,oq`WS`,-6o7>=JB/aJZQX7
%\-@"OAVl@+1h!%_jB.e4'$:iG>uiE=+rDb2'T,h@:3d<d(Bon_`5+]$bS<Pnf>'>\89has@ZdVE7*pi?+\+Xs0gdKr!nuUW(9bR@
%-IRG$?qcl.#m:9GSf$68J_4P(So>Qq%i@>'*[!8;J@_ujS8P8b*(^okliG2f3:J.X%ZJ?4Zr9_^l0K56P!DZb=TQ@5keQ>rE?b'2
%R#e%NLEK]"'p*N6$VWKL)'C8[6-7"I6$J./Z_/n<kRCJp9i.?f8.(_C?;lJ3gQj5$NEY6\6]tEY%*A^(95Uj=TFiaVS-QG\+C,ao
%W_5/e=Wi/(k:-h),r:c1c3*49"MP',O9;bGW\[R>mZ&$?0U^$o*p4Pr[fc$C_uM_"G)*L4Q38*lg,U3l#:lWl8.;M+N&Y1[kZEo_
%9K01$kSVtUpFW*_nd<6?%Z+h#E-<cYSsOGOU[J99JUR_L44lQ<7V;pH%,(c9Wuu@H,Rf]s@3+e;1)>Zr8*:"ULY`+R"GoG&<<WEZ
%/p\ClZ3/C'"(nOqK"DbOGZZ"74\&eE/.4j:E(raG5u\EGLt3\8J`!4pk>]qBRLIh3-l<@-iWY^NdT2(E'!D\*5o(J@E1A+5:)cM-
%7M!#Q3c5;A,hRZ!e$pgt4B@Je1hIJ6M),RQ(qgrs-IR\n[,hMS%B:No#e1Sqj^Yq(J*!m?(.pU-aJ=DH_TOLU&.D8MogIerTgoEB
%M89[t0!VM<HT:2+oPkio'BTX8(1[R,PO_@c!bbE)JX.N#8g%*kNeV6b)giR7/-JrWFU%g`=qY]uOqWZhjgfOs`_iOTPUES$YZ)/[
%64#M?__1(R%/O04Uo6%caf;Z,D]+MqJuV`-!m=+XBGP'Wm+b?pG6$WZOZLr;i[ID0$ig-#nuVXL2qJPfU)6Ob<1ZE,&SS'Z9-H/W
%O>S\TnfOe8b`MjTZ!cPkWt\6aWnbTri-Ta$1dHLX`=ue_+&^i_3!N4iLXnfE!2B^%,#SEu#^/_52=Ed6##10^@CTGD*.nMiV3-st
%9,'bsBL#'l/mq;7'/^mp#C4u'=:tq,!"E<o;Jj:XQDr`W5=d&W_)4ZXHA=^=,3-lV&f/9G<,bSX>f&H3eKnsO16>9@*q!bF/5Q^A
%$k-a$-m=U]'f6\Wb\Jt@E!BcFkK%1fc=N)a#@ToO:as8U>]O3a@-045=<KYU+tT..'JLc)V*/&1#qN[KN]@>Q!@DdLj:t.'&=+_(
%b2IS2kTDE_Bj2jD%Y>fS^`a1C"eH]e`;ir45YdPi&/GWS"R1SBW+&&\paL03PTR\Ej;R"[N0aUa,D^b7#@^!SQQ/C<Z]:66'ZP]+
%$kW`#&*Q8KKc#``#BDp$4:!Y]H=Q.E65X/_(gS>Z&_V\ZJkhr51REE$ed8DpquH2De4$\NiW9.N"Y15%6Vnqui#9NBL,`MT=:geQ
%d>>o"ks-e"+V5"i<g3cFYsaTqYmmh+n;.(,E<$n('I6kW3WQN#L^!FL`9Dmdo,L.%&m.H3:-4&c.)^]C!#A<3-JXGT)2!tm:l$DP
%.Y1\'(bE3%^Tn\3BMcanKoccX=^f]c&JHRm.SuYni"6G>QQf@!_+RZF@rVunj<;6i9Q27F;6!5RM@>].^^NV=!g]$H;6oEDC(^;?
%0Ppk1"=@(LZ+u>#"*b8a[X]b.+Vmet&@Dh+=`ki&BUbn%!D);mLaA6-&0MQg+o"r$[AaLeGQ?W`9*o2fn[-rJ#dB2L7"QdU1*.tf
%)BiVpa?a'XJ,fTRB7YkqO$q]Q?<E;UK<][.C$ZQ9YH3TaNe&QXC&H$8-1M\h6L5qIKNN+2@rZ@QKDc/pX[Ro%1ckiTW?Nep26eQR
%Q%CQMOAM%XdJdk.#gaYZ(</bfa\;eriACnIW^,\m6r@*%cN8&CO;%1!A<F[PiZr*_Jr$<+9ML&(L`$7a5updU!anqQYn.HlRM!h(
%]SVRWMWIFL8MCjg$Apihfl=]m'(HCA-(LbB=OG`N2A?JR/=N+\+[nN;*JPeXRG\:@MN13::\9ZG(h,-k*Jd6a:/"qrHAQFDc=&3c
%A4a]iab1upBoYV&U%`RI2p<fZZO_j#Qm3!a*#+r(L`hUU#uZ=6-*`7`&7bfm.Wq;>6F(0%Q:)"qTFZ<P#A*F5)\fk<@N/lM*)2c.
%OsgI/6"WTM7eF>K_KLgB!)&3VFobnbr@LDM`5*Wd=X<IQOMfOp'soVe%d?5/.&3=@b36eeM?,dqAj@K#0u%4\>mdeY`Ln7oUk*t]
%V:\:71!$\7^sk1PQ`(&cW0jfi,)$:p>MkCVe$P!;-:f+c2il?_V$>-OBJ'\n0XsSXTr^9\6)!BA!jY(:La>m-4KY\mmR?sc`&@)d
%m+*e`0PJRk,?c!_)&=MG4';r2O+S").uXW5;gF8*^cCE[1hMSR/>*uiNke[`LBJ\Apk.0E(^l(O379E]JHZ>oA#YiA90HA8&l>b#
%m?T$p@#2j37!];EDp'#-JA=-bAeC;ZS>AtcB@2("Qk=Uam?")(d>>\s'LW67IM@O&]>.j4,ikW&81B>1)OWjD8j]eH5VQ;DiJ;2X
%@Xt,%6(f@km@6KgeLp?2WldCOP,.S%Vln(f";-RmVMO5^9:2e3;&1VmYqlg,[bVq#lS?IGK\^TQVLq7EeHY1\/KBjD9_2YDj$d_+
%i*&PX\1gjtfQjCU6kWg`04e*-:B^oN#&OlK5QF,k8"Kuh<N2NN8]75]!#&lj&0D9^O]8Ml,*?R-U^R7tYq1[;9/P%Y\n*RcRKS2i
%16!bnYtq&n2Mre8a+h]rW<t@cR&%N0]7NPgNDmZG:a/ba8^pB%--q\-"ghV$;#n7dEYi*"N?!pGHl$0gV[mhXdR_adQor%dHA21G
%!LTD;6t@Ka%\5X.ZgG:T@1(:fE_:G6K8<bO?F&t(!q/N+$82]h7USr:6pE;ED1G+F4%5J9?V%O>YTK,VOT;aYX'cKnW%]?B_*W`I
%d3Yap:im"A?nk@VJ..H._C-a(:8nd*J>s04^sb;H$:A9m',Ro)aH1tW5(IS\ae2'M"IGc<Nn-#?"W"P9"s\jI_3CZe?GcK`j3/\2
%+4q&RA,1X_8r=iJ68D=7J,f^e>Zbud.X7U/JODRsU?+3SMo"oN9Ia1FS/NB"FYY=s#M2\C,h)HM=HsJ3=Uo%&a#`]f@3+6X:m/h5
%Pd,h3(9:7C_]4=T@E(P><WFpU.SCDt.(\JR!Y)YtABP7Kd!054%&>L"+@'lP:n&Rfi2^-C+eXnW=BK=5eR:k4cojn&WL2cKYi?`8
%MR%cbi.+H+cmgWT@C1PU9\)WEG_r6o-m3LHW^R?949`4>U]lbmMSD^$8EC![X9561Up@AG$PNS[a%@L&3qZc^e-"H:,m(Zn::PIE
%!\lf-YULbR(@/`.+'b9HgSH#j<`?86-p"mofVE#31AP3tE]FGg29A"[42J:-(-#J(L7..R6\,23-()SB0WS#h#`saj6S:of'a,J]
%19El1Ajc'^5dM"_#;?Z7;&gLq=A(#qD31tgD2))$YQc^Q'JK%5AIhJr</Gfs&qHaE*J._kP0D>G:>mmR5]!CGH318JFD>LIm/U/p
%'H;ol\Xep5r$+"Z-6MFu;"G`+rb#di8L!)S,K2D(8<KIn"401#7k0cS6&1s]4$K.`2(1Kg!952@\Qs+UF9q<%V:^X'%Da3tG8`a$
%#o5ip^s>cYXs+c1ck$oM'MV-SS3TH/b9D)HTGXX9%=,c]b)'Y"Ob%-^VZNdEJc\t7<AO@^0=ECNi+:Zd%#>cm2?Q4_R2Dan^gO1d
%,"rg-[7=8:$D/mAV5R,m%cADf8BcD`]$uF9L=GiZU)l6Q$Xo/aCK[I3JiHDfA;[]-)%;t`[.)BHR)RN^6O"5Y^Sm:<1e`+s'%-d:
%..eE0T7A^,MX>#K63iW^M1JSFONZ%/Q`SO83%[2u4FpWbXUn<=B[72o/HgUC;O@V'UXE.25YEZ!S-$PP])'Jtc?bG.FVG1h"=sg=
%;-73taUIg#m[H+7H%b]i8ea^O;rA/X587`:cDh#!&i(+,c9g]h#S);m<J&`I&6RIS2H5sC?]&[3`[lr%WX+2uB]S)f;HbAS*d$DC
%]`PF"S[p:D!h>(A$Z]#L<cnap=B1,L=99Y6$)Rr<'`ceC</CWfEBN8,-S,O!Bc$>>Z9j<>fTn\q3*^\2dfn,[WN\dQ%)l@/mq>92
%6PuOKU$\%h-YFdT`i3OUA-oILZ=F37YquW;H&-T"_BMd5eIi$gS3lOT4\7Vb/>q2-o8BW36SKq[c8l@*`]>6#D6(<J8)m-kgo6je
%A3gqqQIK5rQ=]^$Lp8'sF>@(+@aW1t&hT[F,/p_1;?QH'(j!dp0`".>+TRtMV-^"38r?1u5oR74`$72%YmSf2%KM"n;5UB>UqkRl
%JrZ04O^1k.;@o)N;A9ZE1QhN^PU/@n'oNS*9]<"D-p$leE1d85+lGP9VdMoQX@&c+,6^e0Kd8N$(^mR4iWM2s`\34S#QdM,"Z(_+
%H;kI#Ym@p@Q)%m1"L:BL(?-cUog9?GSJ!&S6'BU?Rn.Y<Wf=?f:(W9B-F(AH!'GgPeq.kGNERea1WsG7=>D'.FL5R(3^mDo$8PnV
%`\ddJXPe*2A%a:!^bc0maJ^,F+qg;^j#bUEJ/_D@_SEu1THa&9;K\*]B@U$0iDabmP/t'>G`(O*Yh1:3-'20s825cF_#WjE0bu51
%OA[+[=_n=RJIb)W:"(Gs"0rV7PKAD).>WU2JebVffS>q5(ei:rKi]NMGZZ\`'ZZ;s;d;T,b6fgs_)2L6A@7FsLX9DToh`4k!i7J.
%$V._l/BOVrnH*;UUnZ"S(>S*\%QJ"1o'S'=Fd>$R29rW>?G\O`bZUjZ$f4ZYSPl[[.n0ddA>^&nY/R@n@r/#]%V2Jp]X,g2dVEM(
%1c0.Qojm-,1^o[$\$Ii\R&%)@OEGC;Q%0L1Vf2ckUGNguS`\!1E(#gTF(2,Y9S::Ts$((5Z>*U0/W'-(miT35i5)LQV?jRtW$-^7
%6)aJ+&pQL[^Xoc+m="nY#Z#^8E7R1a>/d!iCm`o&D8YZ-H%6F8\13a9Pk##m*P5;IS;Y]HC+L)7[AV'&H_Hef8$J$jA+B!IYO&3M
%T$7`ClDfGJ2aK!XU$4O\GF-^Tcu4:C30q$dfioTG_?O:;9:cT%W?$71M?q42)cK_jjm"nB4EQpo>ka)[cDnU=ZhU"KOc7a+Wt&Vj
%Q@rL7q+9?mcJEGI#Lbms%^h-Gpp6o.90td/?CUeZar2?R0`_mQS#;!m@t26$@Wde+[=YYHFToh`p/cM%DZQqP!A+LX&FSK-HnP@0
%^j6bbFqUFr24k-GcNrj%"[/Kf:oOe16$\_K_Sc:lX_kCF/@;!Y<NS[*Y'l7LSicF%0Bk@&DXEZV4CD;F?4D`kfmKsc'!`=lRd.3l
%B'_m>#^#HE77@K?=7_/bVKacZ>TkXt>i!*$B<MAN7%-2Rn?-RbU2.[n%CkGK_%ac'G/7r4VF_%$,-L0:)@BdnXJMKt[faHn0Q*[u
%%.AhQ!%ZYX_P0kb4J"HpC&NrleQ#:\hHL&cfPDYE\]I5`$VR\%g8[>#08>s@q!*($^L"2k5+%?pK"#5)4cWg"-24_c7;W:8Y+#j"
%)_XtpU0pLLZZ)nh@F#@Oeak6WICcY0%Wb2Vmp?L/"Le]CKFZDDQpbUsZ<RBHlek<E<H1^YSQ8lZiG,R\Vs[]V9k95&h"<q5rF.>G
%hE(&(hTf/78=V)t`6T0FmPl?q1pUbB@?s"$&"'6R9/)9."?L_e&$[=i4KdoB\IJkeHCh3[N[EA!-qn`>5dS\o;L"#5\DVd/IUYHY
%TQ/IYl"nd1Fik\?O'Qki$.:HE@eBl6Q.5=S'Ekl?`esf,2u@]`Ke+j5JU3(&q":^,DhI:Te^nDcE=,J8je_OKP'52m7BMWM:Yn8e
%Q,h\HZ>Ob;L&h0ndk#@Z7D_V1iB_^MSY[/P]'Uq.F2R9'lYOt2Yp*[L:r*'`0L^U(Nk]q>=q-n+KJT3*d(I\=JL&R&2l;*D@,PJ0
%*m53ZnL0!>H2u3r"b;c'gE;=CY.;5bc)9hM>sg>KJQ.1C9.M9%&G-8F4'TYGfE;4-K!ALo?!n/@>n@C>'DpnH$MiMO;IRDl;&g&W
%NG.g=9*4WM4cN4WM4Wuu!;39Z%.TbhOUF#$0G%f(pgEX"E\^L]%6c;hS9D!',Sb6S3i!Cih\#]nE[<Q;an&Bbr-T%VS)_km7NT^D
%_=Is<(i-e)Hlldl=F93bq,EH$kF1(9)j+7;m-^\P.S`@<k<<b=oEk26'Je5^1l?oWk,oMoX^`u>]WZX(cUg*c0?5h&MfIrG^T-:0
%Y=1V[4%JteEVHE[B'I6C%,.$sX:HHdgQ]L<9s4ckO9,krn`^6k;WRnPh-R4q\;feTfQ-N[NA?_/6n<s%H:,#/#gJE@8+0%ECoCXX
%2G@d8YTouh9-/c%!,1_jW9&'L3C#s!bPJH5m=Wcc<@jqhLsTlEiC3,V!8:W.."0Y](#%*l/7j\gGP63jd=KOF$&tLqH>c@`])gUe
%B)bR?++@^J*n-t?(UqX9Mt"M[GAsU/:4+WA'&iA;8qbH\kB<3n5^_t&=QsatZ_rD`9)^s'*75WP0qkr:9.iiIaouMPB68=5gmGr>
%:K_FSL9'%CNq0gPb4+%qGGdc]/-.j5gB`FcEiA6a;_i#1N&+!^Xs/iUI7R:teO1'k(gek:FIO@Eof0eN=<:XFYHW5khR0aalPQ0i
%U,@$aW0_p?$gQj@C3s4.r5!>g53E;tHauUYcU2ZP[9t#\@%fA)g2`_pd1qt!WkJ;./;)Rcg:8Ys0X/<GdT^pmoni(9m#kGFO^?^#
%h38.KT<YsfB6J,pG6+4j::t6\RS>%-`MIhY_r=G6Ad-GPY]\Q^^k$^hZe-fR1N(t_WgQ$[@lAXi6=qV_6V!Z\fOAC'GmL]HG1clN
%pU5O"*3Tu?Alak7oXKLs/F$ef!UM.pRIj&2<*H(/O=N`Bn<A.Ga@o"[!!K*=!6AtNHOQL*3UBgWMd<AM+/"0'HF)m`]S6k<ZY.$0
%O2KOWOP05?;a(@h.$5Cp',P[([CD+,&=".==3k\lEW%:"*`9%?@[SXD6;]m15edU`]Y9O=S4r.+G)#&cSI4$3?CAS)`DtqsJHt^7
%?O^R=X_t#cMIt!RW$Hc0O3jKPHK[e>\;DT!fXM%lM9NI7YtPl\m8fP3!p&@d&,D2tn^QP5G+[45A)qcp3jVbC"Prm\IO3E*FKhA"
%IJLi)E65q\ILHp+&_sCKQJa2U1]/&\3F8=j;`gq?aT+3T>`]6Y8cGbX02)H3@KH)$ToRQ.Jq5QhYQ7$f5)1I.+#IB+WC'e/+NG8+
%!gFhX[Eoh!e)752:K'qR6B@Y*po=iC#"U0kTVoTbo.0PB-&8nVP!"2)rh)g'E6Bgl9tOs4'iNU(e&9W98oQ(&,hU%P_$%.I!%=Lb
%G5#Loa,#BWm>'[QMlfKBaGq(H9i`.`MBXQ7^MF;c*Aq[SC*\q=_^.F#[jL#F\jMXG8[\?kN7,p>dU"_)C*(l4jQlXm%)(YNT@;<r
%'BmMV^DN">qqb5*/a>d8@H_D5ZKn/d:Gmq*Wji%i_BD_LG/7Ni*si(Na1nr"61Xn0_ZVrSL`(HX'!)Wc4^1S2W_)W6!6IL6?\&:[
%,]lR$&Jo?rmPR0Ver,2O;QjP&Gu!UKiR-'4cKC'q'uUbk,,aU]Q<o9+gjHqT:u#`8!e^n)of@>5@MOClhY;ni7BH5^i\_pR&HUR1
%D,e$M+UWL4[==_2qaGb>Jn\BDS`TsC+b\@?=[MSi@c`-4m9+GCiQ5FmQG3TdmY1q4'GaLoh:#W%/k&m=K&?kp>*)Yj*T9>CM-O_t
%R_#LAc..-g;<"Ds#`>3%<7V1GV!A2OT!*!MKWAGG13fC&CPLU_=g/Tt]%RdGa?2/oo5(lH^SPeGd0*.JXms'!j$qFd+AWn3n/Bpa
%3LVIinrXd)FL:k'^d^mQ[&e]f3Wc^m'2h51$6<u+5kqLHCDQ+Zoj"4'J#4['C!e+-#VS5BD[U<;dZlc>UhaXKoMBI/k&K'-9=r^m
%;YJV:1BdS3%?OVgQ18!!\ost6ESAgO=(l??8m2d?m7"uob8I!`Mrr+&MS]d/)_L+c$chncJ-G]f[!hnW7tu_gL3jT$SqsNg@)H11
%\Xri:ZO(OL(<\5\@==_U:g;akm)o=S+LEWO0I8kIL[`u+]5Z5rMM)hGLZK`8#tEY9)V.)fk7pH!bKhg)XN!eJ\J6ioKIGK*\!D'+
%6-3Z^U4?WZK+W<o>To2Uo[cSne%Naa`G1:aN#NWM$S^/8WY#5n.,5.t](E#.(I=ZE/<sbIUtD,8G$TWda??-V0`#>0Y?Yj6dLsoW
%M@a&si;aX="n9>;\63(%hMc4T5c!Zt%a.Q>KFbJ3>Zu(=%_/MT3o7Pn':8'd)fdXh*a%&6SXg<\p#:+`m7Zj3"btI+CG&jS.CIjK
%Cb-1JpoF+B[^@>AHN&=f/'oR4SaD0g-rg`mZ9;^Eb6T]aM8]HU9jY7<ab*Pcf=W,mHk\4I,Serta>B#X$:p=5'sC)4,)e?Dls"pg
%.m473rSRb)9`U/!qidp8Rpp<*_+;f`?8t=Gndg&<5E[)W;0:iq5kRG;PL&A+$BfG6YX:rgg9RkMpZ=a8<+d6&N)bIlAdZ8/dn+`f
%H@TT&WHrGB':Ga?f/R#dFX'$go&3%&kiVK#)Z6,G;C]5CBL2(*3kN,S,HOl%])1?%,=mD'dJi3`[PR6&W@eG`!m>iiOdbrC7CIe?
%K.8J%A=`4*3b\'/S%*jQX7S?/+b62jPN/P4ns\PgF?HhG=*\r8eQ]5ii#"kG0U(E-hm]R^L+VT2?aL5)[Rc#n,]?Gb,,,u'7$;g9
%m9r$cJ<?_)9[H6#(*OEG#\!n-+5*U8TO4^S0;A<&Wf/!tr1$A4ft9LPZEN,MbBRmUe.?g^Y5"0PFuH&3+ea<8F7o-g$8?:M$.HU/
%aJ=?D.ti38pbtD0[_$os^+RXmiNEqn_=B'*STpt0p(tO+mm*[]>A1r?ca"$c@YcjY!CAi#8A?8m#Yp7A]A_oY,!e`.g=Kd0l.2g4
%;o-(t+s:p0@n%=kT)@R>Y(TOKWi\q5,-^rC$=Zlg6:bUWR/X\>,/JrcX_@18R4G#4:NH.I"MI</@A"XdFZt>e2haC'"-c-r`.i@i
%5,-&epo*0udZ.Z@IY<cb=:mEY(;UQX!.?,CJU8\WXs2AJ,q'PWKce'(AT2R\ZVg#pQ6Rk0d/P*5Xl"#37\T%qF=XJ<n.;f@PVoDg
%G?`mK',stGA,q*Dqs`p"AX=0dT4D<mWNmp@RY7^qI%=jW<2GW9g;2%l"$Q]X?95I(bOhQ=d2@9r.:tj"?$QXZZr:KF)Wfarp4tRF
%W<b]7cSK^qh(La^V1WROVSEc$Lu'rh-:hBlNVYeU#PBk,MiI(>Gi#$oWb::Y$1_KeQf`5Y`$EoEG!n;0\4H7^2u6mZi).skCG:@K
%-?rJsd;)1oF*uonXTWh>k]K4cq@>Za":A#=ZDUE5FOD*500tj>h,SK&?9EQZYJ*CUc`4`,0f"j+D.uWW):Q^04:e_T-;ts0"9O+=
%B.7aR$)G?7;tLkJKhAXoWR6b8'lY:g'W2H'9I$<npCaFm&=2:QE=k_,B%EQf]^5V.^:WL()-]a%d:cJqUZ#,([Al`H+CoT+fTP4-
%T$.$gZDrLB$8j.SMXD$HD=1DSWG,:!gm4$m^o0b%[B?Vh!&b?Ch,:#k"XfiSX_eUoK'X"'WXLBX-\RI\a9_:,Gn_qdUL3V?ckIKl
%#9p\qob>_,g[X'75t90p9(<Vj61M,h,_XICl,KGh5V9WdESTl/Ci9pq)OY+eUcMTKV&B5kHX<W?<f^J#kb*?6JL*\p!(PW(](`bu
%r\m;)Z]?1?,n2@H$)OmNN7I9i*SX^R1-2dN3u%#djl@1hU&m'?T.[.hLJ7E,]BrF7:uk0K[)Ns;n?Gi/%&+?h$0:s,*U+PDA:`7d
%h%lV;0>gSbHP#hp&-t<o.`$-,N=:A8&RS=[CY]dDos>(Fc,38([n]ASq38[n1&Za*?mmt`DFth`1Aoq;k)T:o8"867J^IM&J.Y;S
%MAhVZ>`L3R`YL9!.Y6$>_I!;<]oTYDF!@GG).AO5X";gQ!$c\diC(67U0CKY>Kf?nId%WV:fZF/IACa;Q&bUP3Q\Y$F1m@J'lPJ/
%U2;VP*gpY-O&J.S6-(2Tq$!u"/S$]1:]$-f<"S"*(f^PZ.a0&eq?7`W3DpSGJRqs)#gkbMI3#0sliBAl?]&kL+?2r#M;X,t'e"$i
%Fl[d6p68B$4u-m&_3H!E(Zcl'DWmb2Pf)&-;om>SN)$l'q;!0KL`#AnaWRA;/0SYB_^'Q$8R/5m.;,@nWip<I7KaiUKW>#TU.08L
%d1OV&CUhPeq.LPDB;:RCn@FhGP!4P77SemW[(jHpc`JZ%,(+Yd_C^&-&H&3a')%W\HjT<6U86/F?.=GcEL'E,E=cXWEh!dp=32Wm
%hs5M36R8)=XiRrG&/RtaKL&9`Z-[F(_C&0-YJ(r;D2"r[G-!lelgVR22Co9,!2;bLm\lis1H(EA&ZmqI=tkcZq]`6!>=$*'Ub2X+
%k@*4\MX,eFAC"YYRA]W4o"df[bs)_/#r^4<7BEts(bI2]Z#UT:KH3oV;epP<"@:[a'Kst@IS6--2$hk9S%Ll3hlHgZUP'pb)/;'D
%at$T$Wr4RP.*b+HLJ[+@8^>&*X:[+Pqf7CPKE![-Cb"]7@I\Nj%Ke>DNI"\)"#,"Be5=npqRq;o9"eH?6Y&Sn(.AKtdY":8N(V^A
%hT!FNWdOW*bseQ)foPX#VhS@W8W)jFDT<A";4`/*F>cjFIkS##m\E$;br7ki,Y@i?m=[qA2VYU4R*R!@Km2WhHY:9g7:=Z4%;7`e
%Pk>;#J^s#1V.*=(Oc9eBAF`jK!?*t&!R*OAN.a[)(bCe=.!]#XCX7bnL+]/D<'J0(Fst7k8XAK6;V-oJ!jtco[([_A'n9)GT/@=1
%"E(Ou,=(!&cp[Su!"#$f@Beo<_Mioc+cY>tJ.`V]3Gs\5RL*b7[NalD*\WBWYTVfZ;IXfQlG1MB--5"g]f-SbVpk#'o6<ut5c))f
%n!?'^+JL4=*?LXjap:g`g(hdJ&@/!"'bCQ;Ff7><8o_acJ))A]^t!:oo7eV-p.JTTBe`GY(:7!tjun;NTq`25'qGg\k_RDC#_G]W
%L5P!S8NTh;#TTNo7cLdXZCs*>Z2``n%ZckeqN$\6Z5*/jYMfW%#.]o-a2sjAD03^^T<%HY?Z^B[Z4*Q`C_Rjh07&EM1K:.J1uAQI
%`s=`[03-o*6:ZZOO#5'QeRJQK%Bm;6(CM7kF=Bb:ZOsXFP=b6T&di=[n$53@r:2EE=.X4JJ4E*rV,">h^.?26]K^t5^BKZnJ_5p\
%)^klCO-gafjjCE:0'\XLi$4K%[f:34Q@t=7C!ZN%i=VY%F%Hm;l@O"4+FRXfcr%8>)<hc1dSM@pSV<aCn2d8YY0eI>E.o(@B)71c
%L$V.Zbk%'+A:hU$M^g(hj*Lmu!kj>PVpuWA[><&#:RdN#S%.U'+GLI^Joa;^s/fKu^o5FC`-^HgBSV0JR(]Gi_St1V4>0i`hDHDG
%Wc4EK4Fr]6.e\gpKCu8A(db.CcC7;"/*FI+\Q3#W#hjl(<iK=[Q=C>,5Cl:0>Gi235`JGm3%bQICKHlob8Vtb;b,AdX['cr69Z12
%^lU_lc'BqU3.tet33`Wi21#;+Yn?;U#9BLlp?MRKGU5JHCe\jD.Z`e/b/2n4o:W<'D7/KM(HSSTEqun)8)AguUb7"?]]H#+,;.kA
%7npH9+@A+I^nYq?W&%7G'-DA-*<>rI!k"%t@oTjsfV?9'*2:=0_OLnrWOobSdc?/o>0X*j0p1p<2stS\*#\Jn9/E8`Ffd&k25(Ap
%p1l3L4P$g#3pd?;19@@XQ;d9H?dFig"k)S"UAk8hVh[BLUj=0Q<eE7!BU*u4P&LIq[D`LUa\mGp!.A8,GkP<W1WR5[aBbsi2_O1@
%YQuEr;H4(T@n.t=&3!_DkbIsV>u?+LOiN.nj0,h1ZCf82/.e>OVs/A5@uK/^R21^h).B<e3SX#D5!$%o!9#a?W2K_e\cldlD'GX0
%fMi,E)Uu?l>K.RG&4m3KE(s>;cTIA;r8*k-:7@*3lfl[jot!q@WWX&/DL(m4]#npuM2#5g>@n7>R'1cFl;j0*BFp*764<Ra85R'I
%Jqr\SQH@auq-:I:YAI%$b<?^=obpAkIf[2]S2s@.[;MhMLO`@RUSt6e,sILX#>^r`-+L\.*btDKg3#(iK7A^VT1e>?nE0]M8BJ(j
%h=&$&^1rBE_>+efTu+2sD=0;oG="q`VF0`_S<TT$jCVke0p;`3Y#?J_B674qbpgpZ^hCY$;HH9ROS.k%n03Y<4m.'R:+en_.f![W
%8>&<M')cXK2UG<mX%jLU&tl$^Um%u(5sNrB)!e2D#Xh8P#!iDuFK@pf!X[G;5eE@^8Q[>feYTdfV(,lM_pl!,HHgJV]S4u78Xh0k
%^CVDHUoD?@5UdL#h(G8g/#K(M.X`-W;In%,O%H3N!>=N9r!Ha/%SH$4_mHAfIa2Ss5tNm2[J\(1-HRZMUs_^@0_4.XP)r!^\grR#
%_Q%@+i@u3lcN.rT^rm4TIj^KV!e/Jeg'EQ'9)QuO(M&C=.V"1t^iS)N4#!DAE03Yc>FA&ro^lb'&X-.XR3[tOQ+So89;nT0pH%4P
%gY\oNRLF29DfRhULKEZ+3c(^p_)tQ&J^TKo':2?#&s<O]h5*l70j_(:he>Y:IB-eqXr_FNjjYP;2MA#NPN)L**SI_DQ'Xi>31JJ!
%XMNYg]Q]_VT9OQ)KUqt[0ODS6.I.dMYM=%1pGM+SOGfhJe@ffdO^"$.>6XC>iOO2<nJF@lLsPTNP3f;aE$:u9/Y"EH<8H=B/TV%e
%=+D5]i686t$!(d_Ic":8UuW*_8Wu3-s'nRROuA.VW@]9sV9g0qGh6%X`(a*WFHaPf]C,T0TrLleUEf2$@L'Ur$>?VHDlFn!FruNQ
%jiDC\lip'F+nQ1[^Vs.bU\G+ZDHd-6PQbKXG"P!s9g)4&<N*6teqhn_kF]=6.5'e3')eI;[83F>(2Y]L)L,YM_$V68WPq$1T'3&>
%Wi'_7cCjh<4Gg0W-;iSe27<\d:]k)uUD1<gScmWHjs!C2o][\YgZH^r[m(482>I[AXO$-;:Kaj:VrZn&[1;:XYtR(++Q!e-9T%05
%Dks<c/ZGJcGI1Tl!Wap.+k8>-!QU;0iK[GbV:^)UB6)X8ItGUSJooY%"-E?k3(\D2#^e!Z%SkFi6&O0>8oNacXZ_fbPCM%j"-Ve;
%/0rFGKq<)O5qbTINIK?_U$lI%OMX?$4Kb%a$Ock4%W3%$0Lh9FebVlk#KX1rg:jR[LPi5_r3OE6$r.iPUN"YI0q@Q]KkCZJ<I8j>
%n(5]*P(IY1`TPE1\[Q:UK].KHC\R-JUbWkLarP2kmPtnN<g8=dI2ojW1lnUZ?C`IAgbY?Qf^"?Nmu4(:U#elm!ZnGC*d]@4e&k?d
%Q'd9f^A7mWjsBN:@<A>Fg5"uP,&::6:kIm8Vp1P08mp;`SZ-2l).oP0.&NsdBmFo(ZQQ:qb8k\fQ+/f/]L*UC$#agFMa[`SbP`c9
%_&E7U8uj%dU?<?!**mJ@bY9LX/BBlZ,9t&Dh+dm$R-+m:L<b2U8R-5ng/%?$&d`1(89a:bL!gefJqU&M]\uHV!bZ[XW'@u4DHffu
%&poe7RhW1TTi5<Kj;71R[p[Xj`@<CEUG$GJo^$tmrWjJ<JWde[FalHSgHnIfb4Q`$Emj1T#4-0YTVrKL!1Y!B84%Qp-Nb%d[m<Pt
%\l/r!gOQ6<Egk[8?3HI<(2mC-mT*\0[tK>bM4/343B!=mI$nLi?.N9!/_?^b&.;JrF.lcs8HQVSTRNT1/S2JW;-9:jPBL1?gkSC$
%S:HmQcr$AMmIfsC>l%'fmA:Xgg!"gN=OXq;UF(a$O6t#hXBagbXSV0dcEc5>@hK&I8'F.C8s2^Li0o'D_Bd8>"d=teFbnei(0)f;
%Gk5>%9r9/ASi?o<;&)dAijLC$O=RP%?/_^KW2etN6J$krU!.@foVaU%U.I7r4`r-E7IYq^D/Kcum#((*J()"0W0eIU&;\eqM(?RJ
%#q+7>Gf:/IN.EKKLhS#<FHW1>>s^cM,c2<52nI*t0&(['CossYA[iC,:u,0r.\;&k*W'U;44U4M;W8<ZN21'.Tf@4/I6M.cc$fc%
%414h=JmJ*3&F7\Q4(^+->Wm.`;@(^KHpWr0Pn!rR_IOKY2:k*m*CV*!o(8Yii,fe3&=&!u(ic0ESc''*o@m/,?[_N=4lM3C-eb5^
%V5UG!:W"6WT9Z/p;U>%uEso<o#FN:0H1_lO^6t(H<0-&8C#'"_6=$%1do+3m@m"cXek-Sb@:@kB.T_SdaNqAk:e3f/;)t&.",W<=
%:nX4:aTR.p/i;/8mBQnU2/79hCZAA5/H'uX!>CQZlm::5Sc[lJj&dk*/.IQ,N/;!OmL5]up>rpVh/WM_Ui_9:$RGLhD6$a9/(l59
%k79fO\AMKBfK.N@@l`h?61A](ZA,e(K8H+35J>[(O1S6;N2dcmnDN6!2%i)3+rmF"p*f$<._]#`agVFTc-=F_"iHZIYR/VZI0,Q8
%;gj+XT@kFZBo;Xn8MHCq"GW9-JrH%8-l$"N]DB>\$#Bfr.99=(dAiVa,<NkRoU<I1kk%mYl!&@+79D<bR1*Dmf>(.7ns\,ej2>UK
%Q;Sdk7(_c@'r8n7f:4lj(>G-jF>5&8!m<H%DYJgWJ8q$DF@)p4\q-+81Mt^\FF04S*_hrEH"=G0NTs:i.9Hk`=E."b/f&(;+on%T
%G!WJ!,USg_pd6IeKNl59<ZXW5feU9rC(0&LE/mN*P\5Y(:>T`oKb,q9Z]CdWkRtT94EEBA@am8@E#+uXZ[cH^$[D9PJCJ%C&%:uN
%#QQ'JM3K?eQ2m`WT93*N]q4!F;'P`V#$CULR)"K6Y,pbg(n\b(M8`N+&:f.*a^ADH__Q-nQ[f00J%SZd5KKODTEeEfp58kjT)%LU
%a5N0,11hXE.1:je2W4ZmhrM[bbunr]0Ue5'jAEm$mpXRfYIE?,q'L\kYKJ!i-ghA=BXDhIKI.f2P=/q3rbP`8XZ4huEII[T/RoHK
%U0ag<VaQ_FWZe-obtC5]_N6?+-^JrOd&6=s.ddsjfj+7OJ="ZRjgijAX<Tca+W&F'!5R/NUM52bX_lXJi7%-#j"utYO)87_W7StS
%RbPKDG\$ZXGCsVf6;j=O@t[6KE22j<5`2O\P&>3uW)l-4%f?F(/.0($/fHJ,0O_obS-qbc@LD9;Zqj`OEeC:U>!1s`-p<tre@,NN
%A`]p)#7*jpD2;Gj0B\h/<@=gJ$s4cq3e_p.<3UlH(hT684gJpcBtDDHb/FZQ>bS?/1@eVQF+nL0!$9i!'XH0U`[>#!C,.-ohH4*!
%q*tLtnFg^c5ch(A^a/L%AfX%4G).ArqPT!bK"FtA1b'q;X%TOVK*'1E3?s51EjUIJH/mKi"h%>@R5ueCQ"7g(ZW0ap[fe<H4m._Y
%K;T`P<P)JJ.V1>XGn/F&h6XmPdKWu"pM@C?P&2@8W]d9m1h#Q"iT"ggZG9P49-NXqKcN;l?J6fg3#Eo*^Y::T(m@;%6#9#B(@7U.
%Pq]X#l'^?hQIq*Oh'ah/3!t"#&=4^tTpbO<KP&/fF,@XIbr<15;Ue/b)uGqkn8qBBEnl[/f@t7R]F]oP&59,dZ]!72i\9:XmIM<q
%-d6_j!8))=(+7glm@hKn=(?o%)9aO$7rPFJr;@(@@7Tc96A\=RC\5l^9<P?_<4Om^]<M7BZXB-^[&)NE@uc$jDeA1upk2>k`=];)
%<8pqd?cb`>FQcuX%6E?c2I5oAq#mo0aPL9OXYX3:!:^><:C&Blp[Y)/oo8`/H_:YC0t7K=&l*eWTbl$I40U5W:#N*$Mgur_:@]\#
%c2]2:N%gZ7SkkA<*Ke2\`ke@<X'%C^U7?T;BNAt(`&W<u=]KnR(2G4V'-t&Kp?.h%l9,--@bh$jXfMg#mC'kg0cD^WJg_MF#OV*"
%2rB0uDcC0>,Z*nMbW_.5L<aJ6_=H8f?OOn\;;LSR/\@1o&7(K+acV"/(8][m3R0]iUV%0@`BlA>Gq2T!1dW>S(Vc]@^BMh(87>iR
%o<Ph;ps`uHd@07O:!<>9R.[h^(S(HMli/YFo9;igAtt3r@Qs_b<``Z<9CFViA(ZQufoQ3]$0KMFEkVO^&geXTR8Zcb?A$F/)a:Eu
%RXB+QV0@U,r73-cGLkGdgJYiR-8H7GO$^Y"(mHTGZn4C:$bD;ZAA8G'!J),b&C\#@"=tZL6c!XAB;k"\:K"T$6jlO0/uoS+G5H,o
%Ndn]24aIX[B15-B',HJH[@+r:NataloiSQ)9]\V_V-tYa9eTe1U\YMF:<#S$-&=Pn<G`bf5\oL3q:K!S(peT696bO(b^!6%V'8oQ
%-<FHWqg;^,DA5lS:EQgUg[B63BYst;oqF-C@c*l'CmD[WR[aQC_ph4uN+bFYYPEPRQs%hj,ioCf1BRc<)qB!0Ad13=W?T[%?DOje
%MG<3FO;ZTY9oHI.m5l7Dddg<1j1O<4"acjW@+LK)MO=q%K]?hf]B-'TX<J'=-NcEh)7e:l3@&Vd``]8ueIk6f)k2tHGIm7NU.5Gl
%Est@PQ!2%9<[QG$$Vg5UK+U'YnjK>V$rTg\C#BJXL+_3r5"K3$,TW&S%-]+fqJgls<sR"/?0Ur)Y+<t<[$)8B"%>pI6*kFO)W./-
%a7IF_.!]>NYDfu5dF3=DfO,pEN=UVrfgHg;fussT^gSuB9-T_unbZ#V"4bh6Y5d.G)qET-AKp9AG_u`=9ul"C9h`^0ZcjU+>1)fi
%Bo'U06$?]TBtbT3(i3fP4#6%F6<In3F(uI^1A*!Gd\'ll0pSYhTnq7=#.M29Ma4,*r#uKKf[1N)Si6;(i4CM=Oel\S:/tVdP/4EJ
%UFU+a3%,/1gn*g)n,g;j+LZd]aW8g`<j"_?;\-h5CJI50SN((OpCRs(dbj>e_@I,1dIfb:fB%R)8^N7&28F%.1f\ub$TS&@Q]l*%
%Yd,DQmDe#Y9GNb#NOoIf!VQ<i_cfUj>87:hZO$X\D%i\k2P+!j\3$>?Gteo-hj)Sd*.FudjA`.UTNTI>A'!>MEMg9NktI)u(W,dE
%226'7rCa4_o#IDG2l]k\VUDG!g(oQDC.H(ZiRi`p6i"M[mi!M^GZJ;T@WWQa?ZmKtpZ]Zf]WK7OX?LndfAXo=/$/K:KuQ#M;JVs!
%YX/I=3G%Y]>*Q-ZG-6+oM3>S&*_k;RU9I6T7b(0Ak^Bol>?7]k,E3qY(Y7Y6B0??@=-_$`6O>XF9]ucNpa]hM45ap_0;M5+\a<Go
%O3\#`TOmIS0`)HP%;8fOcJDSUZ7F<WqnnfG'+Bqk*E@/Gnticmg2B_KLpS37>'K6F"=+`E1ienfZ7us&es<Or&0QB/`r/.S-9F19
%Sl5ZN-QYjA`TiSZ8iq@4l,Nj>il`!_]+uW%OV^7[gXF'TFB9HP3o,8'QDt'RQk1s-;:)C7A(J9(0DqI`:N+"<9S7X_dI>s9*^MSa
%,a<n2NJk(-:c^&S#pG?ue!t?2o"i_>F>9"d12>(1(5CTSD7fbF.GgTagklb$R4Bn/[c57ldV5$lX*Zbe$ppY&?&[&[g,ju4DN`pD
%n#0_+*p9>gHScZGCQKb&^c[*@DK>c1;j<^u`]3BlZ42RO.791?NGlZo<VaQ'"\jSckClUS_C^9gbCY83cA\4a9)\=mJn8W?_lsS)
%km2rTKEJ+9Q54j9F$<qp?c>7@@Vhc[\qnd-fkk,4i-6jd2oXH*$3IM$3IX5oNT,n-2:3:%XF()nB@\dgpt8e6(8g,*GNr;1=')i!
%'MkC;?7;,qnR[bcV&cr,gj@0+.gubWG4od'B[<`EJOP2S)Xt&og9]&SN8;Z_hm>''H;rWA^T&U.<#l6\e$ik^=KCatahQ!r6Z\^N
%+sRFGelg95SkQG^hZ)Gp+Hs._pM937<<qdp#uVL,7.SE)*m?YoJR#uGMC:GZcP#B>P-$[@q>q^02TcC:dumPVNf=P[$.b!,-AIK,
%ZH#fq(t\nkh.>&G(!h!I,Pb6>+3?-I_-GOZ9NW!#pC7<+`P_1poH:R6!5+"k7'F"2T^giq0)$$YJRfV=1ZpZUnD&lo3S^?;Vm;I+
%dZV5TU!ZpdBGbFAgOjAaf<.Nk^6%9KX(#NT%_UX$UfK)6bFn@aEHg3Z:XZ_!,&<U>mV+Q-$j?l-b2_/Cl-\nM1a!22d*/M!0M$!u
%/qX^#[R9t-#NC7sKeS$=fI^%tL1]oFq;li(55X_"0--XpbZTiA^@PJSH4;K<*'$_H^d$+20.&#[RCUAg%9$;[KUOV@1iStRN9,D^
%0u,t6=%F_!6:oR;Jmq>]?"gTU5UN&+e(m@e#9#,%D+3OP0)?NfdVV0oP9,L=)od3k5n'6W&H26&:4<%>_Z)I6,bSF9d3o3]/LAdN
%:(TD_!\sZiRct3;6YmMIX/F=g+L?_,K+$,l(Gp1Wk61Yl#4E(T*7$dh@<r22i5<$u2%R#RC>+8]KF?%0B;#m]i/Zrk]]E-[>#M&k
%Vj*F\&4's9'fochoo8#!)]^_q.AfS$_$('uS`?I-9aiQ-bD2e^U=cX@'1Xq</E_d(G$:6q">$?0#ga^dS+%'L!E`2%BP.#F1_c?R
%JPW;4b\RY"V3YA//YH%c4Cp&fb,9bD&9Bb/_m`0a%/DTA7pm+qWWTC[g+k]T'3;3*Os1%n7Gn06K&NhF0p!qP@PliM-d1M&k0`?3
%4.j=kM,.-_X>KCNC>fB+BQYm%]D*KSqp=)=ou)e(f,MWA")*!"(,UkuAmkX0N"W6SZC!$j"-<,3Nu&*2;UVp(;MK^VZRVf#l;rM5
%MH^t(E!4KDG=Le-m(tP*3'cb%:5,2BXg+6e+3cho^n*K%E%qA#P=Nd"H=C0?"?s$i)9iSjQUq7DDS(uCDCH;:)2Mr=3gsa5O_T8n
%%BBK/<ptlg037?$PuU<`(m4;oWm4\=)`pLb&LO07NP*VG(T78pHtZK1luHkP64WcK=\I"GNZQHkUFC%AnWG-L/&T``rs&[4;4LFm
%-$[*d*#8P`-P*5]#`9Qs/O"d_69RJU+<1PjL9k)>r)Q@!12m1P7uIo,bGn+'=hFGD@Kq+lWl6(@AGd=QI$1iB7#3H,TZ'V*GXYcI
%5W:M=$/0'eb>PK<!"W!bW4AX$=+I3[QdhF1a.TAR2:nE]0)L5+g2qogVF"?;A<V*,H;ZI3=,GS$S)D`Y^bAOR`-%L'!h`<1%[q5Q
%9Z,RA)?0kQSQCD7Xg/5N+cU:"0mDjI;)j)A93B,&S:^jB['@S(\%J,(aKY6*g_'#bIB(FF:(q1Y_9@Qt%7Nm*!dci9[q&dAk=%48
%\)O%0;\bSbA-"hV=#Ha'Sn;c<_HUEO31S15<*R3'.VhMh;?)Tc*)']AUEo(86d[<8"=:C4M;"PM&t?;Zb5mkKE-,\Qn^]fAQ;G:%
%Mrhdk7P5V%bh11[A2b\(#@S^dAGd19r_?)0l'geNB;Ka2pdNq'/RN>F`#O:s#ou%VBiGP.<9/Q:N\+Yg6q3k.+lV!erL*r:m8(ge
%'<X#@jbGe:q]c^OORV%>ia`Xa=g7<q">utLSn/@*cI78POC-qgha0eRUG:"E?-YkN13s]uN4$RWeG.?SO:bWsiK'l@7*#X=b^#7U
%f`k*9)38hnlYi@T>=)5!2D2[j_R+iFI"IabUaA!G<taP7D#,leo$2mn@dldED>tE&`Kl/qQ\2gP83[`^3kf.PLbkDOAY?R._J'uQ
%mIs%\(7q=ice^rVTGTOTO+R^jMRH#uZM*Z[W<nS(,/BARE98_q7_]638&a(PWi/SD4ORasU&u!+N8@&;JWV<$S+gI!mnPhO-T`Og
%/(%QWc"!.^nA"li(tXkC8hf+%62Y<f9u]7DDl;b+Erti/mKXD=/J,qH/Rnp9ZMMrsU$bL7OY&DeKYH%^>qj>*NXLk1Bd]l2HL6*V
%b__lO0c6hjheWtE#HQ8"5LF=$:'+,QdpiJ>d#O#/M-iQK-N-'S!IGI*b#&i=eWc-p)^90b"<ftkN6aJ^F2RQ^X=7YIA-mt+>P\Wl
%?<qr('=nXOP+%s%YP;kTO1"1sRND,sp)n>mSS=h+7!q?YXKn1mhc-c$M.5,tao][`UlAg(_nr$+QZAK:\`hlf8lqC(GE+.HLsu>p
%NO+WuMRNnmHWQW6aJ\TWB(U65a:G."&K^ihgRb9IX;2[R0:E,6jgbhon7kJ82`<pKM40H^6_oIK/!'@k#5]'0'->Eh#!AV1=R8Xf
%.Z$UpCS2?n,Y_*DXJ;7]\QK6+k-f$'Ytb<g_j+!p&d)]q=(J)$b\Xk&-K(:11C0+)WMJf6>R2\7k\id9bmNJc&A:A1MTpIm[gidK
%2)XrI=Q>Ia\2b^TYTM!2V.$Ng_l![>>/hJ3lX1r]c8SgjC*9qk.;GjM^YOj_TN3VZC+[U"+eZQuZS_@iYWAR-`V%1aM-2fB_/7P^
%l#,=t*Y!"*9H_,CeQs?=)jC?H4hDA9R$UIEji#:/&\CI)gKEQ2Mhu=;oqU&an'^CXg/mIG;-H7Le.]4:?u0aVB2dBHj`GnF>#3p5
%Suk_sO(*70;IR^KE)k;Oa>>@me[D"=k@4L85b*Yk#NM9S:J:lNbXFGD-k57A`2jjadRGCh`!rKt<p$<&2l-[EKA*S/e/,WcQdH&"
%a2PDW[:*HC([m0JIZ&gp<mS!Vk+s)6erPth3(*V'+<M6.=U*'?Jn(%^&od2WCP:$Rk3SJ6IP,VB6+g8^UdaW"@lb!/Ya)0sL&nB(
%KZZQGA1FInp0`U6Qj[fnh0U,Nl>BL_]\l)tm]jG?%mlJ'fMiaX&*,3iKp;QP-p,WS7]W&#!Y!5%%M1;$Poo[3:c9NCA+FNHAGnM!
%>sKTh$.P!<)ST3I^k4RZFm7+O4dX]gc!$"]TTl@QIte7eCh?Z?K85QhkOo2$>`DsORo2;ASlr87Q=`Q=a]?3r3]$+<2/RdB3BNCf
%>H5oMN.'_;@)btXB3)u[8J]MF[mM=j_I^)'41%bCN'`KZ*D4s2V]MHD\NP+g:u:;_EXAqW7%=L0RW1Q5?BooB1FHbR4]j^u4I/AM
%iXeF:<Z:ac(-5]\H]g?`W^X^>8?Al-Y:ZO,O@X"j<Jd/=V`^:0;5]"W1Z!H'7P5`jF>TA8_G[+t>2R*$Y?AXL$XS`e:m9rY_m.u6
%\$?@ZeU*"K.fU2[i^oY&9$*hApDDc5LE5bd<R'HnHNI35B+JZ5mGtOGr/MIsP)2Y2Gdel])7!N0BFs8h%;-_082Gq&'I0sPg$Y@h
%.gSW'>(BaFr!qgC='3/5='4:HfUIZoM83[I1$"-f?>7p:XK3b$XJHoYW!LY1K!IGq=h*hZIW*cs]TifPh5XD`'uqQ_q8EgHK>p,M
%2Rp#G$)Q:ns5hMR+XuUXZ9DY[RIWF!UQ=0u_H3/iV>@_B>4p^sd8Vh/#4[?S.b)FJ?0+]WY12M%)3midUn4[0$$6'Xg5[K=N``+"
%Z9hFWQ6oiJAc%-94H>kL5TH)YSFZd@OAJKseN"<KM?+P`SrI(1nZ/#bJZ4oHgZalb#u#K>"+eTG>]/\Yb'o^*e`fRD\_.akZL2Wl
%T_n42c3,tQdm<EGGQ"39K:6fkJ%X2:BYoc%j"b0O,qVnaVIucG_XhI[je>8/0cX<8O)P-PVm-o.3b1tFdja8U@#2iXktE3pVR%`f
%'r4#5[;"=9*D`uN\7=,Rm9)#L,ZCoV7qj1u"a59\Me:-pMU@AeUG&f@M-[X5TXie6<i$#lDMI9Op*]);;ZF\TJUU`oR6p@Ba\t\i
%*A"d2mb<V_&c`j?5TpEUi<cB6A.Oo_:h,,P>2Po2bCeJ;bpGnl<=f.I:QEALXNH-9Lu.]Te.Wf(5@etoC#b.7`el:OPki9l5G6E%
%,hXPf;q!`b#t<R+W(>`ig`DZ>6-^&>9lsrf/f>9[Ri!k:\r.2BG/@I7mkrl9P?J[Ra4o9Q<X`d6P[pRW.ku@8KEVs'E:D\eYiP6q
%+9[!C2XDRYLc0WKFT_\D3.s`uPS)9f`j9>6o+58b+6B8"p7;j2H&C9:V?#9YY1+7X+GH/69f^+>f45C*_E9iZ:q:W0iN-FXGY!:]
%j"Wf#GpEm,1Pb4YG:"neGh#inOp?_np!4<gI-$YAMaJ]rpl#r_R,[`\pV&-30HC4aN"F@`7RRg):iJao&b;N8n`@CBK2gaF/uRo.
%[;RW@Vaa\ukU:_E?WEs4kiJ?=L<r3rfO`BApqtkLHkr\JIhruA,W9]#R^)Qb(Lp[J5<_@`o&hUff(351S_-rXA"Nt[cP6?GM<=I5
%""4;=MKUs0<6p+T+)4*lYY/@_AHtLTTYbo&SJ]+UMJl91PdF5GJ`YW1n?3FH2&I'M#-U%-:-<K[]0'@A<3HI_;P>0,j1o):+#!HU
%;aNE/>d((*hGh>QW,j?a;u@%X]<\`\Umc]AcN`KkNTmOi&S67;54U#?mZqSL&YmON0>jl)\b7Fc\mb@Y%Hu;/+0XIgT1l;XJ2$0'
%ds/paT<]EK?)tK<0*LR#-E"$C(_')ArW]/136mtoKCufrn,ua29,Q$EYQMjpA'CuD8muKC+bKV\:S6Z<Ml#?*WY)%j=L=-op?p6'
%lF1<JghZqE&G:12,su?]*]B,^K+rDVh(JfUBGrr8KF2adOG6Uhkcp5b-?RW`9q\#5MC43LZQK6R36"4>"r+QYNG5W[K7FNmLGsII
%k&+c&I,0=Q-Zb^j"\KqC7+.h\ij-R>3B/3=]sIHd$lLjh6/^:Tr[:Q7Ak%QOI`VqkRCYg?jN)8h"YGo_]C%8H`SE5^Y=r)>Q&q&q
%JZNO:)WKmYh1^$Y69isU`ttM+C[OLu/;7n(Ta\u.&fURM,K4+#LLA8P=i'C*'emV_O`I"PK*oQa4]E2RFJSeN=(d_;n)6Y4XIiG3
%1aJo^"@D*Hee^sCN_m5<=(DEi?>+$(,>,3TK995LSnT=%9=LsuX2S.pAV:Mo#$"0#k2[CrX(CnI"[d:E.(k4a:%"LudZ.gb_Ql4e
%+At11.GL/(2XbO@7[L]!.+gM$PL8<[q__?f$E&-QK;+eF@1F!PqP$@\FGp))*rZpMH%%Rp^CeRi')C?Nctj&ds,9n/-8Hcse6"-\
%j:V#]!Z/nlo..)&"9,PniI-k563eQY<G4*!EFPPO;(EASYM,,JcoXZI8T-jk45U$\U]tQ.>Uegd*8?//s,C`T]J\XJndEdJ%&"cf
%/X`KV5`B_3!G'Mt/B8QGk9*1O2c!*MQXW5p1e(^o1&7E5'=e5%Pd*rlB@\7P=Ch\YI/m"hIT&&*4UgLm8GV%(lPq"lq`1cLAj-m&
%d(<%9=.#>OiG,a"9rX1.(9U)9N>)a.o=&ahGoKqCJ1_AM:=poJR8ipd?I03?#tgSr6Hre=$@N\EQd-IUIMM&;QZr3:qPYHb'(o/_
%aJeDG#K:A&>*UX:jXo)Z%_%BU`nh#VTG(J]Y;E\ZPET$`ZM.(,RR(SJ#7qMUkue?$@NkdiibNonB36F0SQVl23D%B!d2],Ke[a=g
%kX:p1[AjZf-ikc.]Pks:9D"-!4gH%bIOS3qQAOPq[6ga?VBTu*n"%<DZ=.=W-HPX+%ZL=6<(3GL-^]$3.Gqp8._d`99D'91I;oHo
%ek[2_f36m_L9RnU2Hm+njn7)Z\o&pfj=[_ek$1)sK;c#_GG&59fjuZ[Y/?toK*""t5`(,\RmNY97Ok1F$3MGAV_eRa!o[Ip+#k-+
%OTQSA:GQRiLlbdq70+c"#,SkH>+BqMg8VBMakC9-.ed#);He3h=D;ClD;?kbRICRsb`q>n#8fs<$LF7Z]^-Bl-(>h<aoM\f#PPg(
%Eth3,B$uU$CT+Y@Z,nJY*@GBXUo1;X(eem8CIQY4>Z"6`cuS3WYJ$2o-$_eV,H@ZnEhliDa+6nse)9PR6tZm6P!F_r7bpNrRYXGW
%9W5h,-#<_@S+iU647.q6_(@`=iit.aR_6%BT2[>JoB5VE*s\@2SJZl6?8DatJLZXNN`[^6'h#Z,QqHjlf9Iu:\*>I2A!-H"[(kWH
%!)F&4Ki/XR?$njA+*i8<[n<>#B1`Ms1),aa7k%%b<^-J)O;4&0okeVI2ZCh&)t+s(7JJ:BCO5M8PB8tIU,1[b)0i/mHF(s*im+kd
%c&9FS1#k,9,k2,f99:7M8Z1s_`B_3fi>;g/]T'"V/:((eihs\AU/;a@_5ZKS0!7WcK[8tGU)nZ'40rXbeh@H15$p#7B@-4Yd*ZpL
%+/1!Ee1Wj$9T!>58DV%b3+tuI%I-R*pP2%uLE.q,THIi]@`m8%2jL%MBcJ;-8)7/fjM,=Ll[5-"W!pmIm4+``,%J"H1M(VRW=7FQ
%bEL4V@.jrtS@@KML(/@LZc>Y%1Ga?1OKbAtb6dt(*dFpNFOjC(e]76*"C=Z#b^rAC1pSMTc\mF?FZ7KE<Jf[uSu6gHcXOI;Pu1uU
%4\8#UWQ45@<#EV"OK]gmp++gL`dJ-s3,B_C1a_+YiAYUSYPfL"]Vl0<>_JRR$Y<>lVoZ5Eb0rBiA]>\:6bmF$,7Obrpf2O]P%<D>
%m?P/UKPJe8o#h:00Xi1QbljdIlL8I5lM!?e%=.ggV(jfePYZ)fKO2`XPK*]7WXTL*:K?-C/*UkFFqd?EbMjDF7)DJ^q'0YQW,$g#
%.ogeR38oN-a]AoThm$K.CDm@/</e$qlg1b'/r4U.F[P(#[!Vl/^LT8G;RI17=%Y?Tm+,m,UqA9M$>+_$:X-[9KL/5fNC?aW$g>hV
%:bHn2Gb%Y*jZ2^%Srm.k(>29_&9b$3DFH;C,W/Y8J'L"a21oW^,]VfORh;1)b1#b]E$Rh#S=]?6JoX*mC+]fX/>](KI"k2bjudJj
%-*qQnQ]F*<P2?enT\*7t/^:n%rc&eRK*hD?D#4g<<1L$aaff8BkQ)H;)?h;>"=1Y-A<>(fDU:1,iBk=4J;"+tPb6<WVVsY<Nd/am
%cqs1],c*65[DZTpJY_Di!Mj6"ZK8H-MQ5AO*?BuNRYoJt5)<e`.*5aK%]f")41>81aii0m:<L#O\T,95:sqF,!1!o!bf=9/VE$Kp
%fT&nk!)nG],%l*/QP[V5#+WlJ%-%cA.T?(nN<YW/j\A564-MMX"ISFpbg+L>61Qt2r@pq,op;4c)mHb%jaq]5*lR-fMbT+8Q=lM'
%5tPnu`:(ileUbgh#u"mFcsHFm)&W549XF&-Vg6Pt6'C[goF&uEJOKMpTBURAmMntEm,Ks^XY)>FS5mW<:3E<@CKk*?O@\g%i[\$j
%;ptL.rC3J7!(kIX63tUn<;.^WS&l(DFg6QJ'F*+\Hl]mie`5[-C&K'GGoYfDVu:W/@C$Ldi_e;onDdb\1)PnP4EPOn1W9C4f#*P.
%T9oKW4*!$M3Q_TJ>b*4R>Ura=9i,Lc68.r6d,f2>Ut$5h&3.3=#rZ6A)jJr9T)5-.l((GTPd:.@Z'4E:*M%5u-2eCD4Jj'+/FjV^
%8aj0nRO/5)Op9ETT3(mt_eM1j\T1+88g<9LS>dh1EGE#r-%XQ]ehQ'b6,!/4@'.a;#NR+@X<Ac_fI;IO8<jCF:o]l?^gB0%D&Hn7
%P_?bL7RtlU,*]GKXl0&0n`:U0dRA3mO+At>4/^[E((`f(9C5#of@:_&:(MLLE])s4*r;;M;TlFGA5Lt&",@-Qb9?7mT)q.9U`t_L
%99#+EV$SG"osqit*2(!l]T-\V5O$NgI4kB(]'DlAm5,49Xp;/b>XR_X='a5%]=Ybi36<DBqfN@a;FSS-<3;rG=OkJs`)S]A'bXd%
%K1DE+/)i*_bA>oup.h-RH\i%sH/@4As36R.1<shLSaHoU6`Und;UNF>qG@uN$CDbmUTRu[Jg@q$#a3-2@*"h4/B_#a>p*im`\E:F
%VE[3]_h26Y$<g2<&<;EfA\TRYXl1)%>&e383;Sb?\=,-FQ&f*4bi`@%k2K2;8?:<`DUD:p&^Vhf6(-j^(FkD;,BeK;"S/J:L2-=&
%1n$5LlB*l@rQeI9&ba&9b5n3%?ipG4if0a%_Qh!=XBNcW3t!8b!@Fu3,2hAuY7a`3D8J7SKM*4tZ`>4%j9mBo[$:GT\#S;g.GKZB
%Mq*KsSY!+#5]R43X#3]^MJD5a@5&8uJh.+Edq'&<mIee3A/BP,QBE\9JaOEr%#?eZa#a</78EKfdB^b!pkj9VdZ'?S7XPBM(V_Ib
%N8K-8WYA*/qACWghGc"_^_9@pWHCf9.8ArMEEL+fF2]J"f'L9u@iEVrcAlS/hjlLM20[$gH94-0?&J.47pU(bZ^FtUO<HAH%=7l,
%Tr2NVEiPeJ59\s3(Mu_9/G<Yt!/4rn`1]Yg/4F6M>4fQcGR_,t;[j(U[^I3F0#aIs]GtF:ogLDP[8XUDiU)hnZk5tP8Wc-h*SlIp
%3e7Lfl'I`Xi_;QR\'=)sU-L!K8T@bZYjM$m26)mPB<q5k&.;V\A1=b,fYA$?M%-Q3PXSXLOM\2`N(\85\UQsY^(in>'TF59]Mf;n
%j</RTY]>H-"@D_,b?D$.B^>&bA&7,gAK\?/@4\#L0Q<ObjTH->$u'EC;S(+/`MO>71lmE$.SdFA:-uc(QDQr%9ZGILkniAgE@56H
%plI/K(R>7@k&+e\ZK]b;1rTkk/lcd0`DFn[$2pWB>l\_TBM47eK33prh-X"-hnj$P0".E66FZ_:4J2_6;2\E$mJDl?RD@.gBCF=a
%XJq#srkkt"]nOd@Ji<4opehMP")'J48U5fSR@kg#F_!AAk<Km/<cr!BTG(V.cQm"@"O7o`\I!hBMqtB?0_m2bq;9i)/;'=q"pg`)
%[:E:NF/g9Nb;!&9Y+=Q/!I*t21%(a>V@:TSLVRCME/%9UH5g=;OIqd,=?P1J;`!gc+c<+N\n%Dbp)k0.+ZL*;>n-utFiCW;pId*c
%J8(HeT?!+93S5,jojm=pQPWs9B.0M'dZZji*]*m.ndOMAI-N>BZ.Z?u$tb]NY,KkoCpkQ(k#-V;+"d;W@Ba>jd3IcK^=J&O!_hX9
%Nc`n7-C0[=2FZ6Ro#1DgSJ!ZDDZ)'j>EP5pdS-eMJn@WTKBi%3B!fVVmTC!!cqOEab(D$@i/$E^>.3j3X2Sg#Q4BB.;)D?;>0=(b
%.;oD-bh9W76E+Q`ES0He9JrA$o3m\Ri<B7uoOMk94Y=f+7iGArfDQ/U3XTra%#dM37(`WBhRI=)5R8/k*@/M+Q2R`\6_U_L>QcZQ
%#uIZA>ZE)T[/0YCBYh.LHOp@m*EFs:ls5l1,p<qi+`J[=9=tA0n5<?dBjmf\luQZm#a]1U"K]-i$hd8l=<gj%c0#Mt.%tH0)>UQc
%JHIJV4TnUP7OP.&O\m[RN*cPp<Kh<t,!$dddp;a$I2[>r5a.'jh?ZXQ&h.tAFqD'$If/e'h-'PI\iSoJO@5WO)RQ.Cp?\,3R_B@j
%C2_inVNE'd"merNmUS-`r;JM<ah;ec?.u=73gW-a=]PFSXj>K-F]-W+^HQkJDDu#^8VXUm'^g80)hJ%%&U)J8K.RoeH,sSh"c1@9
%'SSA!6&Gs2"[6.ad41DC1W%k8DLuCB/k@O=k;<m!Vr]*M>!jO]ZK:]i.%,<pM0i]n(_/JjO;uQ(T$*g9Qos/fo7[F].[C(9(NlT[
%!3"jca91T6To?;i^N=T."_XicVX48HCF#8)k,d18AB1C@#bSP<l28J;='5bo6YZ0!ODD2?6)n;U1(F"<d4#GSP<BA67C4r+FBg,5
%e4i:eiT\?;VaNlQ@>:A?&]Ous2po1?bZ+f9Ph;O7VT][B:+1RAR7.kpj"oc;,A\J'oddoS>@?U1=b<0R"0Jo79H%qjrO5!Y)3u-;
%RbLb=s"M=SH[Zt]\rf;Zhe3;LgfM>ak0@!sj=BS29<RR)pc(aIEY;5tK.4h7X-*1^ZQi@E>rdG0=da&b2T-R&iX[?B&BJ7<j\4B^
%VLB7,#$qtVN5_JbCu9"A4,'@01'iE`p.Ocu+AkmVD9/F!NZ[>r43'#$%To)3FhCtO'5U_,ojir[Vo7@K<L?"<YZ'e3GM!Hu:r/MO
%D_G&?R*nZR]-oFN4.['D4R!n@An??7@.Kb)C;ZoNl#Oq$Vk@]_\n$'NV-SB0Fg%.m*J.cFR74a(C`_QPc8K+G.Hpl2B0mKjRm-oG
%]k.[-paC#tk&(aN`$'0_f*IDIaoH)3NEpRPNtsO.1Uo<j:PeS$"Mlj@e8.De!F4-g)JLgYHlC%]e&;sq)IKHq&B=qPbYT?+d\l3h
%G/_OSY^9D#>c&!5!(g]rVG7k3Q-M3^Y/@pDYp:Oa=LGT&L7krg^;'1t3q@(94(NT"!Q*mA.V%N7D1JuE-NG/\#%[ZTgFX[V)S?ID
%Tp;iL'>0!$7Tqj_gFiYFc:i>#ZNZ\Kd.7COC+gGg`uu`j*[9lfBQ\@l0n_Ga:gd+i*Im:`h3G4]km4.M/@>Q6ThVM!?l8s]4Ooq<
%LDMs.*l_=)8.)?T#fshm:QReuV?`k`qF$]^>!tXLB%]i_b]4tc7W+N(j<A95AR$/Xo5i/eTAs+0F+]\5<>;l7\fWngAS1(We-]-<
%3;dtJoC,"$e8E>/a.3G'/Yt4sL!o3FKX:Kg]3PApJ+HUlMf$[jG)DdM2T?Qk7W>Rp3i+DaG8^0j^qp,$]X;p@K%NsKR[g6:SK&EE
%S+n"[6ZBoGM.KNd"eb!aC(duaH35E5VPe-3B[c*Oq?6%IE1_nHB1CfP_J/l.PgHdcA[W`p?]PCX?G"]Q*.'0a4i-]ca<hX<6K#oI
%RR.9hP?titj6Gh0S2_GugJ.;N!%/fq%K'Bd204=JnDchQ2T5l;2P1N66\A.:G/g-,C.`6rp9A;>+TRC/2qd\W+<(Hb+>&oMF.C4d
%RB>b/0t"\DY+*sX([;VsTu][l6rCooW1L<H&e%SFngePO48@m9$RQV;or1U=9=A@HaLVJ9,(E'1,AK1HonGR*%g/0]RX?2(C*>@a
%\"_gkY_<IA3b3F=V=[U4MYR3G>HRH'k13$P<_&pk^f%>)B%W,I)9"KQ5EOr!1">%B-R.KU+R/)QTSP<k.KIq*.N%`F)O5U)cV))s
%GP?,]SUi1ZWQ/Q*B^cR&l#qn[cZV-]D+Nb5;'tQN%I_YEgH@,e^Lq(n-ObF!>*(m.1E^lSb1"P:>^kJRn#/-$qP5Y"n"?q)fLePn
%,1[e6/e/^@8D0$b!W7)\I9gc8]F-m-L67t<h91_EXrrPgpL^"b,&^5Y-1S\(-W](BZQg/[M:Pe"m=csIbHRS%IgU%)Ij<a[8^Z,G
%M%R`#D7$gD<">kE"t&^O4X."6'Zo&c%8EfaomUN0g:(B]GTLNT[b=ac/-uE8d#fd%ZCp2"-7ii!0$#A/FX(_Mjeu9cGtsBW2CCG0
%]>NQ#Ha46SK-m/AQMWSMT^Eh_!Ne;PQhAeR"9>of8u<_o7ollb(ClZ"n>52ECti'[k[)imVU.bK3KR]-P;)>O<##i=h<V''=AsjV
%Gc]sY*XGhJ"kWt8TAKkcn9hPaW!l"9qPsOTCO*Zn$?CVB4/cec!qp_$lsba-)9a^U*`;eo+",WSRHs>NNT;&4E/0F@;&f]Gj&M;&
%1k[Qp=`+>%G[STLY*W)n`>4'oc4qlb!!30So\/mPBkW2"bIt*YS>9V*g@In.HpfY/r1[$*L;mmZ4^c6QV9?CT`$tX*[R9DeHpSGU
%!3g#g"qAb83K=kM[[p01TOHKBrH8VBr&qBsKjEP<S@qHWa3/8=$oKtCdR22-[pJqM#U\mN`D.Z*`=.G4>@;)'#Pi*^&/D/hF;NEh
%mUkXVDMC*#<2,Hco]m&22_787Xd)J22<uDU4`U2f7d\kLb'k8l(o#oe&J:Q4]^(=XXka%A>_(0Q)Bdd'icd\WeHKZS0k@jaQ=P:k
%g.lrNGLc(BJN;821hNrWE)8u5#"^a*b\>a]1g=I(g"SH[;7i+VQmSOchS<'sI.tjLZRJ86(ccVLNJSCfGu2-ZcQ[eE@VUaLk;Hc9
%Q3V+:$u1V`$@nD<::B#-28H8L8/@jq^qfDWCb+OpT=X:dJ.B>gN5#O0SpU5ta&=!69gDX@X16SIq?^hYDS##+a<1f9+JjOIp[Ag>
%ZIffI8jc"DUT)a?=tf9+.6I_ibXeh:3Oj#qCsPoombu=@Ae\m7QDJ7/R%e%"#n9@m>`4CUPX2SH:l#I*cf&.0%$!2(>3H=)V7Pkm
%kVaAN%+kp#_c^gX2-4rj=lt&t(4dfU3C-98.nn%;lICrP`a2'<nA*39/gs_t_&(?$KQE/;*(<0nnu(pbcT]HaAE%3f"<*G&;IF15
%-qSH%BbKV7l`'ui.qSPbqHU?gQ@Q`0669@BArIqt!)_6!4'5<cj##3CAe?J`J,P-YV)<.,A.Vfeks+'91d8jQjE\X8Gr)K4U<XE<
%/r,d,pl0B=Cdj[E.[&7qglTq+p)nHHZr1?ulR=2`K+u]B#.--GWZ$fDgU`.U;1/WeQCI#r2%L[8pD`G3EY=)9'oH\3;Nb8iI1S0*
%K3"@H.q!L94n$\XXfk-#9"?*n_YqEaH%%/SREJBI?X=U8:R(d)[GFPr3oO3c3hEX8aM]t&._4c$:n*t`@pPfL@?m>PTcgX+>>^/\
%C1KR#crl(dL"cKZ3.4&"-,lsom-26>'=#n/:r4u^!QI3DY55bOhL%t;8=V*EMMh9phEglt6eo/DLp5%Fa]$VKLfJW@($&Sj.QNI]
%$l7XNHid=/BE:RKh't]bakWKYVD?$^V.hn`TqfpmEmgCJ<d-O=Z`pDQq9)e'cj0p8(euhFE$='NbPlmGQ8^CQq6g-ro(En405/<<
%Ci%AU(X>WSUTV`NkroXn/GlgWJMXpL'<I?_Z:bV;cnQ?W'l7T/Qk%AG5\$)9:%r@&4ia[P9cf>^W/98+@,^`:V_qGNYa59.5;Ct]
%>1Za>X;@np>&UJ@.J^;<:1Z`A=?/Y^[)>,SL(Tf(.\*VNE>IFG-_<pFP&>p+_M]_D?*,/1D1X6#$>ts&S_bo>(tAP>k]nZ?FiIf"
%2tXP@!DpbI4)5Q$4HM)3`8$TRJNhDkITlHL'VZ2Veei$6K6Di(QtXQP)\65kk=@(8fqna@L))m)>dfb2X,2E!MO`XUETa6?\#5)Y
%=((Ol0Z\rM"C:k^[EocOGuCSV=o<,e+@IW0+>>!SRbd\NoS8Qc],E\'=CQZ<03&8d5'\I<"bj2DHnsrM[tMZS76Rdb9(kp0OSY^&
%CU;5$!pQuX;XlmuG>W/YmnRTVUdO#$KAXHhc"X:W67odQ+Oa0L2F&d@l:B9':)#'Z-VP(^b=GGoB?^d6Cet&H*N#(a,D2MF`#LrG
%nVtG"BkL61KeDWAH;"',-/Hq=QE]4K,1]s/_do=^lGum"q+u.],r]YUi_i%B<RD]$jJ&q9^:q`e8bbRg6g)#IC\'sM$^["Zd!S0o
%AlhAt%oEM,qi&t7hD,B'Lbm=7b]nj(J/RsS$m.5pi_%g=)6?sH1WBga5&DCW<u\q8)PbGB`?#''>OI9b)3ea["WRU\@><Jm86in<
%9I6DR<U7jLbPGP'H'#t,!Sf6TL9<1)&sl?Im\a1#8d0(.`2(?,^thV@EE=Cc%o[Jc=V[uKIQ'-(,gA-Jbj?B9MZ2>&B"36tB.dn4
%P+Y,pcbs.*''hu[i9k0oC_EHQ"Bo+jF-PD(G[=Z\QHXm_k\GYnPH1]4OVn<kaFrTa9OH-chEGH1h*@d"k;n9@Wkni?0XQ8cB\]hs
%Q&&EO_s1>pZo?!eEjf'[jKXYs'WjuO1f_d*;Fi1Y$To)W_p3&(E.LW>kEF3WBu.HZ7ec[>o*AoTJrL>r;r+HIhuT#Mh76C5!YEq8
%[CicYAj!#4*(TUsN<[T+\qZUrMlYg!7p$#9RfbY,E:.5,3Nd;(b@2_,),q*=jS=%4bK8Dj)K"(aGK]uj3_\%_nBO/\8Pk%V?BNYs
%Zb\eW8NCF0--MWrKSXD=E[Q#OItI(EIG#K98>:d>U#._^L`!%`>K:S<a40p9mJ">M3Og(:$*3<1B0-7,SRg\U+JHg$encicN0)m`
%kTM;R1ePn1^=uSuYb'2m+64T'4I_%>=AtsIHlJ*?!bl6p'4s'kZ&!Cp`X_Xpe&R,hN?*ef4S""DVE+-N[B-slj-hS*E]r*dC%(P%
%(<l.B!:BDr6V%aS6'rhi\lHEC6*TRW,&HG3>PG<_s51[1'.I&upE5L3&;,<lOUCUUT-6Z7f=.gGP!=mfS/B,\<NsLL(16L6n$:S:
%clp8ODJQJgmf^T%b4=@%4]PGl.Od@H@gQMh7j377PP]su`2faE6@o;h.s&k;S]CP/2<UG/j44?"?t[!.ci^,O;t!Rs5tb*FPW*a3
%KJ6TnK^O*j65]0=Gg6f2Zue5=FIo[&)0,=[4dCT1I'RR)'Ht<:/di$<II6AubF.4(l!i"5l78CPO9&JJf0rE&N[i$5&nrFI1J>@_
%-71+gS^'6t?(8<X"L/GhS&\\3!#_])7,Gih^j&L,P.ZJ>$=jQRG7qjd:D8>%06,3!$-H*&0Qml$lQM0Hk%bi)M(o^0:l"2;$"G*(
%`,/ik4]B\YL=rT>QY2]d+geRr[.0!Yd;t!MI`^8).4eW2]0bB-5d^okY%U0t;nNs^2cnlD4s`!ZVs#eF)ReGI=G4`L<lZJ[=%]1=
%)YhfO4;CO@j3l3ZE+4>QKL0Q"`T9f]8@XAt<hm`R>d$FsNTHFaoqr?*e<\97T4.i@I8,)3Pr9p-&F.EqMNYFCjcc*T/WCS45d%]t
%dQfQ]C/Wb!oCP,\&07(K1V[S-KoS=-=YKo.,o\[C=Cr6R9[a`r3#Pp.NNTiA#`q4#+R5A$CrMAW:29/W$o.MW*cES01P-IB\bZ"Y
%.;\:&IT0f.n1,(_M+kPj5jRGd'*7"iD6[g]c"%'_3`T=FrP2ZPg(%[Nl#`N@A:3P^J-0!?8G8p2:;W$&Q_VI2">QPf\Dcl]c"O"J
%l1hmWq97U2ZY^<G;Bn[CUVA:T9d!2jX'=N+Qg4/8GiUG(0>(et3\o7`e[Je![)WRo`/A5ln=/+2<+8oOEgt%dN[<Lp`QZ8e%EQPF
%0Kc9`a+Q,XdC=N5;b)EGd3A]Abt_e%VT(Ur8B*[C!WAna%j`]FhO`X.Li>*Pi'WPDE_Q[E&4YcK@lA"]WJrkHEAMZoLM($(\*b]Y
%$Gbk@\VW/qO_^S&44'(p"gP[Cdcu]CJ-r`&B.iWT7Uoskj%u,XP#-qQ,,O&tdHm+#83grf&urJ),KEB7^M`pu$X]udVDlJoj\5k1
%d=WuC=FUA\Ug3\I)P5SG$p3Zbr>[0HE#3U4Pm7@2ikmI(-P]`p7cH2=:fcsSI.kM7_DXaT#VYRY4&L>5N,<HBOR1QV.sI)Q6YYdo
%\`#58qQ7i*@E=]d\hkCOb03+-9>hDp6a&70k*9Wsk!-I6bK'qjN)euJk,(*TN/%q,eep@&QELR=lBm7c9Mk\^OYIas(HGb>k__1l
%pd(C]+'d,Z_^-H+*A>.ZnLn@J]=^E@'t0>EdkrgPe#-O8'8IM4?h?a^PPu62-lNUD&qoN*AE/@:./FUgJ-]f`,V_B4kT]>+QRc"V
%]cJ5RH>qCN?)1#o)X]2%iRET6L-taQ2MnSg0DK":ncmi+i<okB5uK`k:!_G"-nZHW(24#PCRQhlQN+MSAepp`%1Uc1U?ae-^_D=X
%3"_;US<O+?9b.n4nUf1ll:VEO=Hq3FQB6or>E7aO,JFsSSS;AS%0[;A)."lM&6t-,jl8NZpMg.bUH7Y/E-OjkIZqSMlq@`n9*#'u
%UU(((Y]8DgDP0C2-6jh)Xd.L*K.)@L"XH2c*N"bZg"3E:^f(a=EhLVlAHDrk&S`+h)J2ugL?<C)gaN2J"C#-=;LeG&dGH@cGV2c*
%1uN%o@LEA?Z%kR;W%YT`_\dR#'55c<,a+r6gH5+l)RUjdI+k>IrT`*a">,p-$=4tpnqZjs(L*Da)KG>B1ulfOTnn4=<QVe5kLSnS
%M)2<(4C;WT>_TLbnsF9!2N(_*%^9b"cXk"E$*&LeA8#X@s037"1F0Nh'6tj#SL:[hUlD8CJQVC>XoXTO@L3.4LVt>:Lq6Tb%OCX6
%/g`_#oG&/ifCXaT@LH4L$_Wpk*%!K/?Hj<9;uu>/jW7<;,R+G!@%Zb.-pnrl5#cP0BUa-UYUn+)U8PZKY7)2XRi-(I\3Yc*H)Js(
%C+48OQ/`2>f6nS[oel_X,<\L$=0?QD3pB,MJY,VS?:f6HlKcQ/_uV#H#CJXNm%dau<>k]p]<rr:"]_D=4)tfc3uj%ei6qD.'E<@(
%r`e==3Kk2[N4(8//-Z>f*EFL7rBpm^,0c2.`q`+iK4pDf(1bcCTO",28B;pM,Q93N4`"G"V*Qo@FbcW$T_*D?M^]e6V2d,i,#*X.
%X=/8$dA74WerlsTnUfO>4!q,>a,-`RN>l"5q)t5E9^6Jqg:nN*6Jm`DS(1eGck7DN:5UUdTLY-h-^ig.#.Wl!P81)qBt1fI^.U)5
%-cG^c1DIQQ,Z2VV0H<C?Uk,u2-3[UdgC>Z.)OMni3G8HsKuP9,RKS?_%FnE@d&49@q_bQu/<GI.[o;`]Q_gm-^Jrc9noh6'T_CU>
%/FkX:E77*"XOcN(-4R:aU,W-oYN^h=C6B0tgGs8.(R9!H5mON-Oc[kDnL&H:8NEV?!BO&g$tn.5990ta:Bl=oM'Qs$Q^eQ_@T$ZB
%4`[rNjgYpakQqiOEV:ddGGU_L3?t!'?/Bj%jEAcuA)Fd&"s7DY6[)_RX7j`L/hBHYNRCMbKOqeu-8bb]K_GL*/3FD4U!bj"r\ZiJ
%#mNJ0-kk[n<"Hjqfif*bU0"Ur28]gGZ4P!s;38J(=;#+G1U"ih+oi.CHkX1c\SX#.U9J^DLRXc`9?7:s:'Xh(-QEgVX1??AP=(6>
%q[]pH<Q5E#SD!W5f?oIFFco14/*^c1<e!<qD2Apt&.@jHJTZ:cjt#0@,%c:*+TD%-!X\O%!E*(:X.L^gJ@SEPH^PPKnkK(1a>U/r
%@_<an2Wl?s%5/XDXbEV$rRUe<]Vs4?`u?G=hb5u?ammG8dpGAo5!sEK^TX(G;_O<]Nh4+-jSu3N`U:@*=&0e36lXZlO0Zbc83t64
%TJ_6Vmc\j@agrkeUgrYXb<%cVUpZsnZ%@5SR'$DdWs/i,M`oK#i98JHNSaL['Ka7D,U-8-$DYWFboj.TkU+>b`kP)P?Ca3\>Z4+o
%Fed9DrJkS$b<*98)^Cs8WC)BW$rCJlD`(dnpt[7Y^CCD2`(nQ(_[%F*.r+tBRemm_mGHXI&,&#"lBgcPDs@TtUM?K"[SXZ,P@p.i
%e*HNGhW0#VYqO33GBaFVG#aP0GPE..Jg]9sY68"^c'KVKY@9`,K9W.l;b1_nGB9VlC,bU$s)=nMBa+.`9O\H8h3ca-U,-:mKspRt
%HOeX6Q'2BbDsbtTk*a7h334RPoA#YgO9N/=CsL#G:d\Z*&JKHp4nu\K;$kEieI^+p,&2?&84dh*2Lib0_*rjl%6/KeJ,4P&Vs@r&
%hpV!3SW`R7H<$hJMGRrX?@FdGLdtD?J@\qM79<3NML[s[I@Q2OXghp3cB1B:@DPT'#2t-,L]uUib#If/]RFL,_[?^4G^D;]5]GYY
%gPg9=I::9a:KU5KN<LB58P5\`.WE25"42BtnW53J1G@l$g^-stk)C;H$mGjF`(d/B]0?TnQ4<U[rZ1VOj"!!Q'<-FNQ4[aC8Fiul
%6pMOq_I0uf^6G\i,"OBoTlhecUMKoSWt?P68ImAXHDW<ZrYdt<(u"6J)eHBh=sQVa*6"(4]f=1#&KnTOAI1W;\q)F[7K'"U5gKUW
%QFYPm0)paJ(UCZTBe"6c3/XJWC^k5Y4RdR>`#g,j:qPO]N2gj6W<!/#Fh;bQ1e8t:KXRp&YO]8hr^X]6](SSWk/XkicOGuo-mG8C
%mZ&E@B;]d/G98Ib@'Cs#4WmQe!X.k#HoFXokAt5rK'7T4,=I>g*[!l,g_h`[H'J^q:gP!-PF<<F]jq]u/^H5QC:1^iBdJ.lUc-O4
%YkCe_4PPgI4jrU&'JE;lYL:nQ;><oQe\F>N*ub*JqOWg[#_#n1kE/@5Jcf453n5aEj;3NqE*SFppNj\n&8*jfDA?rgf`o,hDZLGs
%b"jAsXNoYLHnfjQVDYhgF,6_7i!A>.XH?,q;`lN>\6WSUq./m`nW_2@cD2/N8?ZMX4VKk!a<_OVM&Ed0d_BD%$Q@[l1eY<[a^bdd
%3s<J"6$-Z^^'5;0=>AX4PD^##5;pQR<sG9S5meb9:4j,k^k8ATDHBD*jC'&]LTQn!H@F\GrtZ0U$nt*s.[I5H,d8\)quD8(rm0#>
%;_:67J<R!H^`4[LE6RlrbDDn-F8@e7=Aka+%pf?gWN=GANZaod=,d$Ah8h:`K_<7.B(D;f^g34IOTo[S'I6,pcVTfe6%$beE^kBr
%hB=SOc]O)]Q4UbH)#EQ?4RN<1U05-ci5@Ll,\7",UMMr3C3\A=jWF3gEERP[s-X:8C+R%5+Wu^WL'0n'LCb]po'VomY=ci;=8L!J
%ekZeUFuP^r6Xcl>#+$L(gqYZ@8E<<CL8f?G\-e[KJ)-0)jg81H/3(+`fFCte`MCK!H^OqIl)O;F5=:l@S:b4QVToZ@!:2Png<JDc
%\8"N'Q/B$pN"1h##?S.d??^WUr15jsN)Ts&:A5ZGEL!FQI,bZ\^V&B[#?@lm>-mpFe9GU40spfcXeID_#p%^tD7A.+?XpPFi<aQN
%Lf/8H)$`0""e+a%2CugXU39X45b_F7,2(ccQX0';oPN,0a!IKoYR>.ILU_?D'ZWcg\>$f0Qrqg%dW[4_W+bMi2eT[&X3W6ZjX,"[
%!%]XHmJfn/%oq?;lOc"Qef7khD!k'l$''Mq.)Q.7TpF'\1c@(+#5HIP?:1hHhAm!C:6sb5f42Z5Y?QiArH./+]%?7(12m=Y9+6'$
%D3f_(RM#!+'\HDbiT3l]1he5^P!cmG(kiR$)`j[G%if,S&HI6,i5:3?I(2Y-:J/He)^2WB2Nh)MA3!9#V2#/`e:+F$bG9ig?;=qO
%%g]L,mO$V@)$Wd$O-UX=:Nt6O032obU5*NE2qsfX!HEiRE@$SRikn$g)/>"'lQ?]s8nknL2ZO`pF1P<tc@GBFS\WpD\tlqJMr:ip
%NUtOHJf-Lgj1@?_kYu:,?#Q?G)+@Y.?XS$IfI^dWk@6'rShY%Y:#bjQ_H+"G4&`&UQ$5\ebenAAL>R<8o%Fhf*=Qu?l-U#Ho+?lg
%-WLRf=Lk4Y,2aD$eH/&WP^JcEEr^ka'83jUL-uUDg^UHijne)b!iF2u$N3p]*T99hboIq/LFZLdTA^Xc\n;<0<]-:t_=)R/1J>/2
%F_3\$imi1hh)Ql5`B(Gq`sAO*SE%ZPs!pk>pDAS(l>QOVJ,ShcnJD6&J,E)$s':*NTCMs\l[L.(dJs03s"P@c:Fbh2rNFOsrP-[`
%s7Yg"^\r)crEoSKq<e4XO67VbO8i$uPI`Rk8.Nn05COXXJko!5<@6>44'6%Zi'F/HE9/46V+VlM`63=a/0=6$O2D`V-BSZkD<I>X
%UMLOqi[T23;@TIlGOAKlVO()HO+.#kYi657)?VMKCX<O3Dj7\@j\o$S%MPoW_c::U@P<nG'CocKI$!I'<B:VjZKmGO>tMUrhi7^%
%a0?p8ZsNPg4:TfThefm&rr'Z#2O,(kl8s%SQbTtY8T/@mI/dkfo/AGmF+0dU,5q@\*^RAYS+o&+3L20BA+95bDYL1nIG3cPE5@rV
%Jn)EH,f@=3g9ZtVf%%;PRF(1YRodY/e``Ns1)0rf3LZH4?[mKBs,0ZerU#*nMiJ"#o("O*rXU*::)JbSJ].:qN]N6/Y%n;f`/2%g
%a4Bu/>btQo0I^R]4h]lf-hR;WO6cggZjiID^>9@5N:ldpVZNU`id=8'[Ma&Toim0>;EoVR=24-Nig;(K)<o8r=AU@S5-Ut@BSjdk
%kO=DU0ths;?M=>qe!c6a\"'#sp8:\^9%`kS*>/F$s.8Z2J3X#)mTebTPLMImprBrC55'-M5DS.>o6J7"7JqQ,O6canbKlaLq(\L'
%kjuFTB=u+5.=tLrq"aKK*$1R?IF<0ff?Dk0lVHF(pj'neDY3tiF7<Q9cg362*mTpAJEPmjo8gA4XUu/;_uK:9.7cOuWNc:`)Z%b*
%+cte?[isBWn`AVtRH#qq@1PkP.ER`;An[]92-p&"qp4d(AZhYTg9'#eO!L=:0hnn4(KtQ<@IrW+2S>ES9)]k?VIFEJf6jl:37]"i
%'O]2)eambZg!VeLno9qhMOU`Q3<)91Z<s*JRs4aN^Hrpcr:u[@dV<W#lk!PU"R@"UTB%/JG+_1fl^NN`hul,Z=3TGb!g89qF1Wn^
%R6)YlE$:XQ$L1j%9k\Vl\bLU>qr.?3$l]]0oK=39KdZV\pVTT!EQag>LGSnd/'RT)9mubgQpL+BK0'D-[PbaZ]fA@%$u=]m(f-eq
%KThD6qp6ca\,<dH+iTZ)U[Ps6G!G:5j_sBAiUO6UqD,Q@L<a"%W/GPfg\l3cn=:h(nV?j_@cI#^8oEsr:A=fe'#AW\2;n560*:84
%n5f+QNqmL-NNr;[BDS7X>9J7h.e_7[6J";[]^dkgoTn9Z<4(Sq25fK0SQ5XEb&GQ/c<&AL&-'h.-2HR_JA:VA]2."&P%Z5jSbu4h
%N5X\lM?J:J-sdpYXFOe+Z+dBJNkA/S_Mm?d"+)s/Q+5?De]IUPAJ/e1Y'MeT5Sck7XAWKs,`g1&1656l0o?KU!\TLQ%K*,2/U%>h
%9aV=.jhhMIdH\7klTNkkV><7_#pPYO;2AIQqZpD+9\si]lqC*bBNK@q0:]GmZ0.!`I#mOR%#+Z/T4286<mRMPrc8Kp@+&5m%j+MW
%k:m1eC"M:c!$f[#rj-h"4U524juTtZ3`tl7Q*,jO<@8I_htHWuQ/Yb8"sDBdKH$O]+Wf)<9g/uN@ul_ab#,C6%>p7E&:q4J_j#33
%@PAFaa3)a2O%^b"2G9uP0Afg;0ts*.;B1lr(&'onglGt*6gf=Dk%o'd&A?7lD<Q-$Z/b^'-D.R#mk4VJehH?HGWP-97I`9kao>T\
%mqWs=qGReGWa6DT\;r/^&5R^HXh!Oi2_ROIZ4/q9KG6#2g>8c&m/B.anGL`g+,3>m(jeI2?bVf^a82bEVS3^dkah8.qN4L_ae*)%
%CnFV2rVY,ZD[55N9osa+<qfh43Oue<[a%!'1#*3-]Ub]q?(gXRlWng#8#J]KoR9<bgQVh/+u@?L]<f]ObsfAZf*Y?J)p*=HDA"FV
%^ejmQ`2PY'bYqJ?IP'g*GU>9^KXc8F`uq6M`$jcQ5*rQ\_e!:?*g=]@!uJ<iX<:n5.Q+D9T)Z]`c0&cRp#(r4i5`)U"khL9XD#du
%>l-QgjO>=Igb(;Th:CJKB9d4jeta/$H?.@,J[%CS`t("M'4U\6V^6V$oNR@5rb<\Q\R.%J$"J:Q^Ao>bV]3+&HQ7smW>F`(MO?au
%Pn4?2GC1LL=AOFWpZQeSme?V;$Ks,>I.UITid^eD0i$^g]\]]0-0sf3?uL2DW:t]NOW,f>?-;V#KSO49[9L>*@`aWoq$h[!<MQMf
%*AsE("/[O'`A)QP^Q(=b/[,-nQ2j2=aG\rGetWa_TV-SMgKO'h9qkH'US00Ve0g8.B#&orE$*8+o,5\XI\4]Np><'?>;l]b7Ip2>
%#l2AFb8Y7-s6Jk,+$A<@:&`DrY;c9k%?^Y/+eaD^oZpq[6Ige:pYhgM2Mnf>1?hJB=5SpUlJKX(WbG]:q3T_C9@knX$Ud7];"=#`
%&%rh)0_'<gBQT<O"g<Lnj=S'ZE1q=o#JMFIUAskd)+Ma^FRSnU6t.1?$F3bn'V86sVWql_j=0@_jP8.$luMOUpU'[:<8T%,nS':9
%U(\:6&A,/foc=d?>SQo*rMN2f>(4MdRh9C#9$He`,;Xh;3d\GPd#2V-]GB!EC>%"AeZWJ]R&b:[5"CUiroH(MXFo)$VMF)32,^Mi
%@^=&)I#O8to8@:q;@tr]YX>4kMZ6WqH)(#-mB:"[TCRtks64]G/V,ZI0CTU>r8!h\JSTX>ppt1sTe2p\hoIL5kRN`GiW[hXq/Dc1
%8W2uN<76h:D7,=MNkq9MCq?gfcHuB9a5PP$n'@k:o_mqOQHZsK7)S3>5^fBmqt]2:97$D\N_l.Lht_CI?``sDg:q&:Y)oBu^A\gp
%^3X#aCXrKG/^qt9JsI@\^GWRMUj7$A^s@IX*tj>9V)AddrGhUZSbmP8qW;G\ree6qrIDoS+*f226&6?9qePmL5^]V^3qdt.^CF&O
%+2?YEY/9Gd+eLo^,H"UE[t8m:WB&uP^/@R\q;g7Sn,5;5HXCOMmlrsMH[NRSY&tVsI!U&?cTY\MWqsF&O5KPOm)RrZ3W,JFYIAo*
%k1?O.]][K$MdCUt^OOU1HJsqBmUP]PkgT2'l.>0Iht#C"r`<)ZI2*1)+oAQcF"kWePnSEZ*n/>IS@1HDT8ipj>O:p'pj7p9C`h/V
%HSh\s:Ih=j4uf@CBWUcb'I(`<f6E.q4"hELRBZ0##f6"Lc#;TIZak%j5!E`[3i86R2[fYM5Aej$lR`o)TlBg"&I*kVRk^sC"`<f/
%UAP"H<m_73<R^q,k&($gI^K^d3)0&m2<j!<rime8:@Tr.IrViP;pA/LR+;>7Hk$"ZhL7(V*7C&Aos:N8hYN;PY@["of-6%cLRr8W
%Z^rotAH#h[J]Q#=qbAI'r,SEYDWcME=Sj1VpX0tg\kpjUZj+\^l5t7sf]&LbPX`,'j\LZ$2Pn`hjKGQ?ps[XLfqFt:Z0R,`1@I/g
%K:dYlbP1lI6DYSqi!H_ShCeHPi?)G"GSKJY48e-fnL!Zls7KffN1l!XS"N-cBAhYfY*)`I9r^p5s$);5nm21b:&a^fJ,I(\qOIJ(
%en,73%ZS58,3e[VH3(2WB21_a7Kk!mlRYqRa;YnAMhp&QR%DDLa'jjr.Q+M)?^o_<57^VdRb,8D$']nO?.#%U+.is@'#*l,,mS!G
%o=+2G!ZRcSh9XF082$Ikl1f0CQX>_mc?^aDK:HQ=)_I&@qAdu-h\f-qJ%EO;n^c+/1iVL*a!d,%bE"og^=:^O4u0/%bH%t*RD16_
%'Xl,5qUMDaT;B*19=q_ZYiC7)7TRbc7i[RekephMFJn>!cA,j-pE.Ng`LFIe-p]#Gr/>=OE4?/fi>Sic'<gB@r0C"Y`\Ha*G\i-k
%_^3_pKU>`$iKLBHhu+HfoCLVdIIqrTOUXP3&fTk<IssAKk4Oj]k'MDsqXJpd5=TODr:9QLB_d(>i+ZT,s)fr`-W>Gcp%HA\IU/Sl
%T73qQPMu8V-234`g^1\Zn>%7@pKp,N>6uNVNpe7F'=4a;TUSmWqY]W.n2BuURH`!a;UtBkfcq"sX'`nf4rBd^Va'j\L)dBYerRj,
%X3mR(0^;SoDd>!0&mU[JO#d-AT8.otgQ8Daqo^&P3W/JC]&llfqnq;QaO_7+2hsV9o(/2VkLVlG2&7c0\'OX+;^,]lNbR@FQJu?g
%P<6`gMJI=o9<h>tM7\HAo9PuU\GuBOk8F,9\1hsdlOAbWofkXOr$.Vo?XIh!HMd$KE%+PZSpr\ci`?PO!.-<:8f_Lrbg3,1SYR)#
%=Gk_"AaoAjaAH(4a'1lT2V\6&VaHl#n'<Wo6_=2Hmgl-t^"#@GFG,AS/:L>,%/W_CqDss-NdX\"O2JOo?gmbra03hg^>bcgq7/LL
%5Nd)$I=?J0\"#FM,X.M+&G]jc*oG:hs7)n70%#_EoqhS4b?s]2s88RkU->Q+XfHs4b:u$=ZN<M_<3h1'Tk;gGT3$-Q1Wo(T=o8rd
%pq98s3;.Jl^(5SVq0L5.Mg@VbCFf;YNpik>oi'_ln`s8+n"YebCDJ%0\W#P%pNpQP\ftKc3'=kBGC9FP"$1nDhb-iGr+H@cC]!oZ
%[t7,aJ'>>;j8Wo`>BXjVEio0aeN]R!2,>^YO!]):Q@uUkB[B8K,ZPt,WiiW7&:`"GIYBr:g'JRabjJSS`P^YR3,F?jV`jhbLaN^B
%jsS><,@eNZo^T.:Nbd&Yd<4m/q[CsK_Tg*QkKM[&i/U3KJ3-BWWU+<d%rf!=kL6bpVo]`5IiC!oLHJVD1PJ1I\eMrS.@S/(M@o"]
%e!&#P40UrQB#Qj%r\YZjcI6?XLQn#[QleIedtao9-SR.Q:-r'(e,\W'$%P#L2r[7Sbp$SSPG1`r7nao*_4V&b0h##?RqYnPY\p!b
%fWt!##A:bKE0HM5Sb[A&m9G^ndEAi1e)LrSiUY\q+)t`j-t\cX:8s81GDGJS'IZmdM#Y<r+Vo4Ce+n&2dQB9iG_C7PaLJBmLoQI(
%)V3oQNuNRnmDm&2T:QrG80^&qq\(rJ$a'M&^Z),@\/\441P\$6\s,*c@Sgnb3_u[EQ==8S4\U"W6^*@jV7\&2qr"$EWL(4B<<"*q
%k?b&4k=D<rmrMSd[<fln4thr#e.4g&C`e8G:,u"!;0X-tm!2D(H`DC^[OdPKUBLO[6b-h%FrQFLiYmrAh[UWLp$,G`o*/ErW3b.n
%*abk[8+4Q6W"Qgs?#A!c$[3YW!A!aTM90X4GBO.gWONEd"lsZU>>I9Q!tt9Md6$I2g]"?7RB/[a(oHXcWKB[!frN2<PZ7TKs%X)Q
%8M9'NJ!U^h9)^+=](&KkGnB^/Z]'knfDW4qG_k7d/HQ`!]>8-2"X^=lbqX9]'4E)=W>nVn+b;ckh*;r]6I5'&U)GEll:oHgH'BDg
%a7]kjLQ,T'4OS]qZVs\7MD,tm8XR"q+7H0VZB<-\[tn.t(]P%k-J`WMC]QGp?LSo1Gm]p>R.=pVSGCZ3B$D3j>DeZ_$rV)lIBWd&
%hVc7/ITo`L76F2m!Y<LZYjJDVU^;46r`c(N>Q@oLM.--n]N(N%4.,%3P58gc^jr"<?f];R)C5su#"@ObJ/3;ARul7Y0Bd9"iBZ2;
%`#?LkM[8TBFX`#Ekj[/#Ei![NqX]+[T5Wsae]U@?3d+I:$f`N4Ak,;cp8-A!Z(pa'YMm2c46i--+lA>$FkcTDm&1sdg9X;gNp<&h
%40%W"gJQ9>Nudo;jk*GV["BA6Y=MlWG#T0[k1JL2,=c2\ZYlAXqmPunpF29NB4E-GDV?)W&FHD1JQ$D^['dH?N1Nd\7g1fLk+K2Y
%!p)r,d>j+Ik&]eCN:!QJ4HAiWg7"NX>f)S+[>3'Dqej0\.i>R7B=$+A'o_E>W*UfPYYDMMeCMfe0]Zf<HKjAuL'9%O>#CD6I-c*C
%%@H0"&'H!;2/.7gf=AYK\T-=LbfrX2@;b6,''>!\2^Y;qh5_O7r>!PYNW2u0:i3.[\Xa2[nV4NH3]9kT.Wa?@NJoM/`0g@<6NmiV
%<PI+?$;So'>#ofc9poPre=_T/nPe+Ra+jF?M/G6$6FFPpDN`!+N?FIbKKuDrcPu-p08_,J/B8R2([A/c04:_\82anm<q:JaHp&cW
%h@7I4?G.:S/dD9Co(h&G88h]"\(t,C]S+$78WcZ7+'c2n7oFgd!W@sjjVIuUVPZg>$7k0k.Ol--CIKE+oR'c*b^-So;KS0XAE@SL
%`BMY*jB.!YY4fAF&)_9UH25n2#8m%4CMD)849T`=7Q\U$U+r!P:-QZGDJ6)9dZ-&t<S]!DM?,/1<Dl$#,%_H9_L.HU#5&u-?+Y1%
%NRH*,SkSDJ*2@fBC.;l2NXZV\@ta!-mFf#eq/@OPml>=L(uT74,5nl^GUT"+O]\QBb:%[sC%BM"R;I1F@n<1FM3`!Xp`_L@=gc=)
%/Ti0q7Sh<^Ib54"4k++M>*=+JMP!!9'SY)Em`mAS&/EfV+6Ia*P=rc\j?XTQA<s)G\[+g.CN>SNoeagmWDU4]".s,c":\DF`R>K5
%NZ$ofHF)$fm-ml&q':#5l9XS0FpFEWB!G?/RKH\'17l"%%IG8_)V#G$M+gNaddd-$7#r*QA#!:HT5('HDN[XU*[+NC:#F!<g%?QF
%:nD0DV>H%`8T&Il@YiHp'QF$YkFD#771Xa%Rpl7EG<Oj"6-,ZN,E.$&h&@aJj$VDAMh&;KCG7CcH786^L'Zbnc1uF@H')"uGEj^o
%?3EkRpqIpB+tuV>nbngk,A&8O%j/gI>.;JpMpsa7lh'=._"&&Qb_n:u1]+J'O_13Vh7SP>3D%JTpb-Fp@k!b/C(Br+^b)T]--O;3
%>hAlMYqONDVW>"C)h0jEU5,9_d5M]re">>1rOC@kkbmA*Mc@n`pL%>RCo_Tnp-k$r`Ukk=(O_K^?[P5VpL/nYOrjluE7(*WhiA;/
%ntEKSoajk2QUfSJ^'D+i?r!_D4G^f60q13B,BT_oJ<L[S3A%7tds$9=Tl-7[3H`e*&$)21GK+Zb?-sm\r3cm;b:0$aaP'_gX?VJZ
%Bj;r-HqJYcCM`OR=U:R^&*#Rn+Z5G\I&IrP^!@Za+6qrd)@`\/ib@X37s5Ed!hC+Q3hF('P1qZ2GM%!W(YR$G-eK$QgpW617uocS
%%iV@JOSdHAd^AkemG9<bTp*MjViG/BB2*]aCV$CS]Bk>CR`N$G:30+]p9kt=8?g$X&<;2N0XiMQk52K';X`;QpN%SRj4(]QT8qdu
%rQLfm!:V]sYiVMl#mkciR9LB'^EFD`NRC#O9\@'BKQjFVh0!#J(iVs$P<tgY3h'm3#(GD7i7C7EKl@^ZOcU&n,^61>c=u_uiorJ)
%pDN%#NADI4TJLGg]f?Ffp>uWp.[_NlfA><BS56c+=\+`0SGrM0TQI0=gX8j?K%@t%3b"6PosV9k_I\rPQMJ5LL\tH9TO8p%i_Ta3
%3uEt8jng&6Q'8F$C:DHZP4&YE3"_#t1Sf<r<9)(-`s$NB:k"5U$bLZYmtL>_F6AAo1.qA;3]<m1nsGC76iJZVS7uQOI0hD=n$!BD
%8K<VurHVh5UlBG7kSi^p36NY*8#kQA"B\mq(bA.5IP4!17-\'%r)@^Jpa0?.k\_N;<:XJK59_)s7Qf<Fj_j`]PnqL"Jc1T96?bD:
%4]$+mjdL/H8:T.AgFjnJ8k$u^b#n!i*Y)PlcLQE;C2gf9rBc;%iY#LC>m&g,D$1^pQYJ^DMhDQL%=k%$GZ%^.4E[/TV+IgF@%:#`
%`&3hO#.?N^"GC`VkK9`p_[-q.-:3'?8p=A.!RuP<NdM9i<QY\D(/>&#4*MG,rA\4:j_A?b+0q,s0_8W(g%UEOm23[\2W8@ac>,pn
%n%<h%'KG8umD<E=%i_J2#]7a/M7Y/t\qC%h9\:ci:gn<K,<RQKH?r\U>FK!JUE[l2$r/n+Ub0.60t.K2VU:/G':"+USL71lWcZa1
%-;H')k/1cW_TWlq.a!*\5sK:dOQ5pqnNMHs6&H[is-b;aFIXVjV/BgVjV=L8#jc85PYsuS8u!@0nHM'aLu]F'jpdnQW(^"C:5]BV
%iMtY1DoKe;MaVk2i3+h)<o`]c3A%@e9]">8H?,ApP_XDZY">1]lWg*D[oBq.oOhZTpF?ls06'XrV?H%,:h7Ue0YKiACh"NNQ)[5'
%bi8m+N:94NgoA[#\0kg%._UT4.<_2R_On[MSa-3G((._^,RqtDE`ck*(\mS+lYKj&7[5oS]e@C!X)&3:LQc4QiE<&Te\JLtXV?BZ
%dF4k_&RAYEOO9*4fB%3a(lBRt^[LY"q",CjduhD7s)oUS(Y:2<.`%6Hk6<0!*.`bc8ubQfLY-&m[Z^%m"K*OX_O9'X_48((4(bZ8
%4cGhV7>"[<`PKSmkT%]alNuq-EHZe))Q'7:+O?96^Br8k:.[u;j@(02qrT0Rb7^V<p`]@I3"@O>gif;nJ;%boF7$29mh=Q2)M^>L
%WjeT1;H?[%ZoE,C$'(N<7%-Qe;E/,HbgS_jZ:(ie>tNYY?ZS/$@h1Mj*G<W5VNY'WCjsADkd\1[66Q(f2&Q8VfV`U%XiVN;LVPHo
%j&;4ORM$7Xrt(P>kYkOA,u\JU)88p1/7<nRFalq'4IqfUHU5q_jmTO>P6!FQE6:"u\^g1'Q"LCt%OqGo3gWf,qJRD;5g;Oh<2P:Q
%QVu%&k7,D4*KojGV9O[.D#EF'(ZB16eCu;m9`Ha0g<QU\Z]o9WVb+hI:M%f"4!LQ"E\WUg/'H7^c>3^8hOO=s@sMXU8to`#<t6MY
%k!Y8cAURgA[Z7M3^Z9:&`Z8qX`^Oe-_Jf9p-'D7%%E)Kk80$j->^^.l7/g+jb1#DZ\%dn=RnMW1l;=9Is2nZrpN7Cs#m6Qtjq/VK
%o_JpgVpsc7F^LmBYWVm?cp<?s%H]3qS?NhI`R[^Ua+hgW>$6M6qsd)pq,T:aR9X"iN[=76P&lheFteC^%5FDOc@X`[Oc"qtJn)oW
%jfC9N,==-arP7@>Dpfasi=_2lI/Dq"dEJ8k:@"Cmrt(5h<BZpK&HT1QesWEblp.Pp5,<+:3ChNT3?SO$:UW7SHsIdqIb9=%4u=Wt
%>:'mS(6$_q)tn:3%"[jUK*\l%X0$5,<-r-)NsWY=d_1ZhEr@U:A'1lQ:!FX`Ce^>F*kF*3F%b_*.Tm=OUiNfNhO/D&pE-]]2r/24
%p%$-4p1o@=Z;a0P9A"0I"XALL^C*sq5),1@r(E.:,2<,F5;rHA^%Q*JcEr/3TM51Q4XKO]l_^HjG?M=0k;D5WT['!\[T:[.1)@p@
%>A,OB9gfg2TZG5D:VuR>T_DCnh,eQgpYpS-2],]YW+pFNeE@f5]W&($b?CXm`&fNb?4UA`oKpU#0/i`^L$IIVHG?_03:q50q#Z"p
%$)'IOI;C9t\Tb0BFQ>3]g/KG4\I?^()3rBqLRdTYQR.!A(Wuib/a^p,Q.eTPe'`OO-Zi$5qb^,1%..[`R@h@7(W*CO+m[GBCWB>f
%47YauX@I$c*-K=MS?p*m^p-I>;M.2PYZi.Op2PeJ0B'/-Voo(4dHL\uB-@NLRtV=n62Vs=(!]NiZH1e?:WOZKl^!8b!6ShnJD<1H
%PU3YS:F3@5f`X*^[I*>,1eK].oTI=/)M].>O56/=SS9.2W9Y+p3*tRmT>4l?37h(-p4d[-4\SD\`0K>df!Xd4K3*GV9Il+%K_1O&
%Y\OLWa2`lk8Q$`OhM;#7Z>e0-]dZ`nW98JdU/rQrJ5Se0?ZV<jZKoL\=J+kc7g)oE]l>&,qjYT?$+(Ek8U3!!XL]+DgSakFU?tNd
%:7,_fVUsc5e3A/+5<Y=YI$XGiW"PHW1"p=;pB+@<'0"#^"a$XuQ:0uigVT"*VC(Y)=Y2Y.XJkh?(&fm+:/qM"p?!]nj\e^inMk\D
%:K8#RP&AELk6ZOQ;t;2gZVd#VOrgUQ\Rloj8TPmbnDs3BR7.@&kto5O'''20S6Ia9[\U@MXJpc-iV:q2p,#C91;b]W4\@hL^fkfq
%U^*bXf$^?t@()pQXK0G<0paX7V8]K]"]uZHS$Qp<9k^sq`@oE<Hm/h(Vl5@?B+GB!*5Nc9W=d\#A@<^d8<,'<T1W*'`b(D'hc]V!
%::2>uK^`(YH'VD_8^1S+"J);TPKphY7BI_d@R\,0]5,n2T!8`U.C6B8i>+:]CR!puAKOJ-0kT:O&%S&HRg'_//W4/:grDn->g,+Q
%KpF-^-"H<;%b9B1)!ZZ$8srm7Wec_e,Rh)$IKf4@DPqPJI)k_k\l8AY5BP""U-Qk@K2_Gs*J]'CojmM7gO@Wq>;+5FJ!UBTFP3$/
%,WN1])n2%mF<+ApW3&Z[0pe"<oCg90H<ojtdif]0o\C1GrQ$3mM`Ju[DK&6Q@Y];2ZNRtdQ\a*Aeip+<UOU&>PFNDfBEC_.=$Aq4
%f%d,q2,S[eB`aWr3677l_:X(i@IkP^qUCG@FP3+M:].-$X$N8udCq^@mb[Jma6lB.]YUh@$Fb%*90,*nne?4$WX/5Z3;i\^&=-&N
%+:mg]-3V9\I(pVFGk*)I4,dqGbh@<.H]BqCE^jr4mN<k(7+B5hIn=i655[I^*[;Q3hRFs;\,Mp+.$6^9Ok`S:SC0-WHG*fFFIrM`
%_aKho]tT#NLj/X@HYL'2[k9@OWC;]1:]i^(qNss$7D`*G*&eY&:)e@-2C-25qf8@N>E1;LnB[ZC-m11u'/eujWaW[qXH[[C%\8O7
%9IX_U.Q]]$_!\2m7k^qbpA-p`7r3BjJqs<!+O$$Ja$a&#gOB_M<f3X37pke%.Lc=1p>@FB[t21'.QF0s/L098F8Pt3g`E*Bj)]Qp
%DNE*qE7*]eH[K^i4[-?qkP"]+*hV3IF*i:PO3d4`\NN,8;,n^1gZ*@%Hu>"kmI@_M5.ASqpA!DaTA/CIH[K^lcgC854[-?qkP"]+
%*hV3IF*i:PO3d4`\NN-ca630kg`E)W4+JEFgZ*@%Hu>"kmI@_M5.ASqpA!DaTA*(QH@0UkcgC85rP/3ahBcOBq;a(3jo9TQ<cW@7
%if,_([,-iL\&.t!g%L(S.:7[`Y:/b"1Clp<,G)-H\Ve:I1lS:8b87-1=.@l8`e)DZC]>nV-1^A\R#G;U3uQ<sI][/-;2kMbD1IO0
%S51db@lnBl[8/P$Nd@\m>d<N3&[ZNV4,c"$e-oo2a@M>eo3@>'EHrDDC-%_H.jXO`,C.l:4`!_dW^YJbRE@ZN\9p(3o=uC@#>La=
%XYl>d)6r5AKsPmR1.Ge$+#7Z#8L9;:%$Rhl9nr[boVp3rfr8\-XAWEHP?]hJYtI]rpaJ*//T/h'17B#LMf'^fHtgX-O:j8fd\;dK
%?BLgNs.C(o?2Z<"TeD4^jU_/GUWUNIms."IGNlP*r,aOJcB9QDlFp'*M,r+9atf,88-U7_H;tJKn$L7g$GtF>Cp'p6E(RU=F,4"i
%A=rE`=FZ*4=/5RC1j@&HWWMBF`hdr$a,l=d?$icVDdb7-oi)+DC"J8XURrRIobB*(FK0jdar#!J>5=\`je%eS8hg7V<VCL+?MaD4
%1H*p+Cq#bfS!HWe")U9-9A@^hC9d:goucOu4crQpKW/s)kqP^$"5EC:#1"Kb^;G9O-kBs\aW(dOo+kq:5p[dkW3@QE95>eFL4<!@
%`H9@8IGCa/Ni0i47Xo?;`snsRS'L:=*g]LW@<4lf/EH$W$7JmL$>K;`qda-a?jVDtRE$+CerYGup%7PeRFE?+dtiWWem]PTdGGb'
%f(Tb@]gU`.KqO<4>ig@[N=uC4=q^cHC/lPTXBj*LW-V7KFi\sQM%?[%/r-%;]SSO"?"NL[6KLXY85]\\P"R_Tr*%"19f0uXCA`*Y
%?1aLIIRtS6rN]+>1eDZnN!IJ^q;:3[ep5T_-PaN5L)DC_:6*=KVm+!09$@UDS`Ml=/Fk/G/b2u^q\q6(GoVe,NEWk;W<7/-gmtP<
%5%TAEDOh:j9LIgtg..^S^:;T>cE&qB__joMF"GS3F@5"d3D7H@5bo*fJ'O_k,=T>==P*BX0&PX%]QtR0C5_.Za,27MLSO=#FN#23
%ioa_c.Y%mRg/Y#fRh+;oC*+d?oq/573?QJsJ(Bi&j_7OW(!pu)STM[Pf;&12pSu$\\N@*G.b'h*\+4E4IfpQ8)(/uq:bg\4r%>Q_
%,:W*S-0NXO`!l0_N\"[5D+H#P<D>OepetQL&rd\'Wk)p-;Ame\i6*DoOsi8"PLBu,aM<P:Ua;-5AFgt'$SA!9G/\a3]3<P[4#j"I
%W_+Q%h\"n^R"XfMP?"AENU!rW:nL.)82Y"(`MRJ'_;<a#\YL?V,Qg9lhka%E0W`,83T97"krCh^&?DH56!#Gan"ppF4[q&\a:mH-
%<Mt`#8nI<IX>a.>(G]We2bbo.MXfRSLjAm)?+m<29[*/7_\lRXd.i1NeE:T1[%sE:YunS`R;>m9TE`8IkI$L4%7fn3fh5o<8]oV\
%md#jQ0LNRL8glanbr&*CXqKMgdRn`9%'Y!i2$]UL.i_c&k5bue(;jCj(Q1"_P.d(uDg72IW.VKmrqk5Yao^`l2i%k-]8;\;$=(B8
%.ran69#h9]7-7((2EOq'HjThJ-;g6jp?OCE9mhmC%)R.PNi:^B=H++[rh=bBp%E+53m&W]>9h!j.ldr:Tgpch$@APZb7Kqg0!<GN
%DKQ_fI(X<`FK3Q?$tLINpEjY'-!kAQR"q^ugXb!4T_"Os&ZG52#;[9H3fJh^DMf&kbo@b@l>#:pmFQ4n<LTGk*);[^ZHu_L-B%i2
%<*SGfo$B@=_%#dJ,inY7+)atDL1')6@,=0HQ]=3",oV(].o^JNO!NB;9@5B3R36WjBE'<mIR0mm$Lacs2oa#$)XYd%M'u*H``Yp:
%:^Gp\F;A2M=JBaSM+AJ`!Db>XaT%R!2;W.9ULEm_Z+:)Irc='!3\VftYM$FOGDVF9V!K.GBfN7g29@XP(*0M&;GJB2\?>,EZ&\/V
%g))^UQc=$;RXYSM*lU=V*X'6jM)Ja;H@`hNaRQhX?g]RlWN(8QK=&e,<:B<QmTg'1kS-gTD\"?PV>@iJI0lt%PaPC%R^ODt:!0Ko
%MV/j[(Oje!ecN,F#Xu^(2``$mNN5BeK>RpLU6<+[gsktE_37h*N3Q@X2u3CXUJbk.]-Q6Ne,FdRhUn0c29<!m'k$HW:l$&=Nf)?_
%G;5g+\:?T<+>Em&)iNK'DW66seV$9cV'dNlh"f^:jVG$aIS#qe8duq.A6<lf.f:1C?tVQ\Hi^iKmach9!ZHAL0J5[p/j^UsE,&;@
%CC!>2\-9G!e]UdUa-bATQs8R:3"<tIdSRBZEfe@OXgefm:p,odRsi.%KZ1B36j>K^cut=YBj?=Z`X%(?L]%$a8I2]t(2C^[^a7eZ
%!m'8PW0bg(l&,8&cD,36kBP,E2U?c.OWt7'/9Po<Qq#/i`&"B-MQ+p6EC%A2.@`am>"hq3IU?;mEp"7`O0`W(.V@&`R]Js?Efc:I
%I5>?B0h]V4LPl*).?2WiEpF?[Bo')IMl(`uV7_rLXI;S^%eW_4[+c-\GP3ZGo>6&[c&,PcX1:oZ.6Y'UhYHflGFFD/\gD0"P'hI.
%AMjs#VS:>Y,pK4j#p!YIVb2a]LJ/0^=,!+CN_>iiOM+BaP"_fjri%G<%Q6;b:B.H#<-n3h2N>.aI:%k157oq3apUpl9<aW("pH3?
%7X<+o<EnIt)i\emL!@]fdW@?:G-BJZ-TIrqerbG@0=_(pn..64?`Vq_TK3EulCC$`om<j=l=\qiLST^2QAR2g18;WlcFq@HDkA=_
%/'E.l*t\,:6hc8j+P8;5m;n'hP^%G]"6Prs_=1l1Q+5<&,tqL/rLeQtIUHRr07AY2\Pe]+LGe]Rad,_cNI,T!.IZ`"N1ljrG'j!2
%Z.>nfoF@S*q@!J>YWg)9o5Rmjh?+^^>a%WOf=TC8#Hn6c(+4,LKIE"ginO\n5q$9L:E;Htak'OBG7-'#")8Y7lU.*#3d<<;=r)q\
%/qhK[`<+M8^0uWrcT^FY!rF4NOS^/MM5o-S6_VWN7Y)VFL(&S>#'4)=^;O2nmkXt,UfR90PrV]-H7!4-WF_dF%t$)14&.T>5O#)t
%:)l]lKN!l7QBt.E<k=SaL-ufH'U>OAM!AI?FX-Fk%jo?lL\tB75c+rg9=q5V%Lt7fA8skaJJP\n*Zo83_d'SnpPl3\+$kU,oM_rs
%8#B/*nf[kgLT\bB:9NDXoeq6Z.9,6TUZdD$T'Yn"\H_d9TDmj+].Yemru3%t_tD5GhJ4^tN)H6p/b%:hEs!6*QB-"D6Rc'M`Rjp^
%^+Pl*)Qlt\S)MYHSF9h"N:.gRNKU<C4JD&=H(c5uL5K1Kf7SM_LYf"83%Je5@8o\'GGblk'&!Fp_)O9,<n2jFRu;-4$"']=J()JC
%==4(DSgH*ilZrTCkWm2[%tQ$#[A,uE<@kh*ke<nMmi#_oldm1jlR`JCRUNeF&4HdX.Lj&d9>5FU?Bq[[*jR!!!@:/`1l()0UVrat
%Q)MCc$ka8BAE>gm60Vpom[e-fatbjkruH\Rl120Ur5(KFClP/A(Ln.9E\RJS@bl*bT2)e6&aRfG]MB$NkH`ENMoi+T<`43>P:=.P
%+.%P!I;iS(k_?r/q'#c5;I;Uns/pCMl]W'".Jl12pYV.bhG.Uk_Mf7O$:@Dr;=jaA:!/)9p:Cl:FqKJ,-cl/Q['UB!8StWsb2O#.
%/6t5NEV)#$(otmi9>p!)$A>`?]T[,3\=[[!2pCfSLBkL#n4d4u5M$l:a)2s;riY8qknN9$SIipL3qEEBbHdNdOUqph[s^b>X^COr
%mRl=4of8Y9F[T$J*4k27Nr*7T+T+Ou[^UK/%kCN!D;cbN:S?c,SHm*'I'.\Vrua4cs7T>0In3%1=&>JI`_5]EhF%8';qYrblb2$Y
%gJXlqh&JoS.7mW#T4dpjc&W3]7QAJ+KW4GSe1]b4#cO$Zn%eo*E<H+?5)mLKiT+XC_;'g#P/&%rKHuuA>DS>O@hOXX,Z.7p.4.o^
%ossF3DQ^+)\4Rl/hl3V,Y'9*rT`D"7faOsu9,>""A(T'_1aKpB#q<9NKO;i38/)T&N6IbZnN,nH0&<\/.*e"6TX>h00u?jiC3NO6
%5e,Tmr,c^^hJ!URBDd-#oKElD^Z.TLFBJJ42BdC!?h/(!1TRg+LkH#Pr(?8$115n(!TjQ+/_W7s^AWq]@34PjdlC*DB!2'/KG,QW
%[aY:$+m.IlL[JTKT-Xi:b#5et?b$'$&6D<j8_(r5+$)@k0K0;sGc.>]<!5(U<pgS@O2Ph9628pHELqh(&cm'3iaFin>a'>!=l8Wq
%F(;REcV;@g7lP45NXk&L'gR0-njB2>:M.'[mKc=iYDppnCfq"Bm?redG)^J%>iI.Z)5P,[-F-de9RCe*]I+6LPW='aO>1-<qKQ*X
%a#.RhkW8J(I>2H`iFZTdF6;j#E(;*6^`=`g<-C+m#In!/oBBDse)Un+^C;!H"4:!%SLGOfELiE'8a".Q5K/G"LCp&P_g`'ko4fJs
%:?u9)iT*+,7MsMue).#.X4-_":&_a4P?3JM_RZ5QSkHO*GY"PG4DX:-Y?.%N"_C\B5(0(mJL.1,MJ=rl.L"CWnc+=q$P.;tjspTo
%=i`NeHoe0KY".P1M.M1_<M]k'W+e;<agt<m/C1t/@>]s`7$jf:RIW]B(H.)[#,$ka<OZroqB<(*.E66A):p_U;7.!B_cf1rET7S5
%rAYXkjHU6#80^&qq\(rJ$a,%]^4e!Y/n[jf"EBZ3E9URT7sZSUVc.k6Z*9N8*kBGN[7U-Nb4t[jJFA,7?q"uXK;Kr;\DXWTE6$s/
%,"O%dE=Ge;(e)hc\Aj)4,H!M)AGZoPp/3.;KYm=_A']MUhc&(cPk,563*:f^b+W(HHFo/+>A]Cu%fCM.YcCjgLD4qL^:NHlC;Q;$
%H]8\s>XOeG*UIO!emD@JgsO-=*<Spc*Nl"8C+?@g8ca4mi7:herI@;L?1^lP1b6[/2jpa5%N))0_9?n!1nDnE6GT13>^knoq:-JG
%6>l@<#uLqO2]9u%Dh?,a\A+GCCtE5iA&8_'n[W6#T\)Kb4UsX`/21L$DN:-[Rg9ZV$ps0a4MX)ph*;r]!_bPlb[o\)NZ]\GZgAf[
%_Aq;\QXmUM:%CjT?-H'+P6ES]CkO'BiduTkVk1t!)?[`P\onkFMgl!pPAW?7[K)ds0DKMDhQSbnNE/nE'i:tl3m+Na_fSP6EgT-B
%%_<0Oi6N?IfZ%iFC9!([jU&0.]ER&].R]_5\*:XBC:e4S%mI=HosVMC$>]2An]sUS!BkY@aH<#N8g4NLMSsiB/aOfBJ]kui2Y&om
%E$4RX@LZbq70N;'qb+>)dG_4&PZOFPp#l3A52Xd!&'1*9;9+^.,n[uf@n45*]_'o)G196+\M&-UNL.%/fMT+`^Whf(Tqabt<:$Qd
%3O>KlT"Q0;%.`%JcWlJNoh7I";)^flCUBl)V6RYq7Xee#XIJDD^+DItI<lnL4W>&SFOTB&L1j)R#b5X^U9+m+/NoZWNXBU(HF'@J
%9g_WHa,[aiem!GZ@lrrkO/"e/&4sdC%K%O=R]#uajKlh>g[FP;G%!7tV:MeWTOh0;9Whb>flpNPW8,5_e>Lao%Yb-:,?dr'!o\@9
%ap-(0Ob`$.k*iY=R-WPb_;%$;''A>OQS:@>IgL0aZ5]!)ddC+qir0;If#E3>CT'-j^YI+hl?L5$:`ULS%@+J@W(+cC%:[P/\"SD-
%Rjqc]6NsCN)(d@#\>IKU!c!t-m[qWc4#YSi8bC1hKb2\1f\Ig2gD`F,;[J#Qhk)jW8R>r?O][Vs?n^#8,@A5_Yu]K346Q-3q"iFE
%;L*,k?YZLq%J%JTp2s+&m\-GbkK@`:Pp.m?Df?1^3<dK(bAeg#V\7A&LfSsJTP/(T7&-tQ%\m31D/c"<"1]dIafKl[C\1:9L9,b3
%jQm/Q"I@u%X$(@U6Q#sl3\Oha(/oLHR>92mE"Y1O4IO[DV!a6t9)5`6F7M%TEC3s4P]i!_*YEOacm_H+7^f=mI#LM<,Z'0i+EJ"W
%3TdqskEm3bSRXdMdeu0qo?PmFd/@M<R,]$W/_>Tb)#8+pU@1*\k8:$7Yq(rc=u8>U9p/&Cj:V=BO3Y"NZ<XK5)kde&\#L>uMnq=^
%Z30Qof5ebWo'o50d?F0p+#^daX/O@U>`12e-Uod:;HQZZm`a)c?+PBpI@/bD:0R4SWlGcaPqd%-=X8PUS>AcfQFpd2N4.!"=AI4N
%eQY.!ETWWSNiP)h9uIM`"di(@f:j<s^2J4Wq-b%C2%36NI#Sq$3No+sA431RJi/Z^WD5K<T/ZpF]cUh(7_.;</K0UB9pY]/#Us:4
%.GadW-G*T[)fe;^YB9dU36CR4=UZaq79Ar,J90"[qkAkZ`'oOnc8"hm*/+7S1;]C7:qAS^&B9L,R27:m7SstaR26GuF=j:,,(t$"
%DlJU`8`iH,'_(eORhpY($i]V8]Ei=KFb@#G0k+aXo'g)CXbht\]L\T7:+1$e"=t&qbe-Kq0s`O&(MW"lhp%)SFS-I%jVp+6Z':1,
%<KDr9/nnI*.[#;m)+8ZASlB%6PW\YZit#d0oWU+sqF1O6qG[9c+.([tr=kcM&b+k_;J'8]Co_Tnp-k$r`Ukk=(O_K^?[P5VpL/o7
%3il!#?uZ<J"<(ni1*7R6)JOK^+e0f1Y;a-/Rp-GCD(6OXK*Y-lZ`0]S6:Z>+R(\j#7J1]tcAt3>%F[G;DE?ogFYid;=:VVeH=W2r
%(1DAH`KR\drm0sC0$)YEG>\;Q%r*\b9NjPs(..3F_mk[>:CqQ,o0F!@p"c1,97FiFU[cgm2c5U$*ckldYUn.8nZ:d84"RoOdrC.;
%a)R6dgj=VnOj%\.LjAX66hd6ng'YADD'<2C0APutU(fY6b]N+UVKg[f\%AMQWk6H7k^m3Zol?L2_R?r8i("h0c@^*.K7LL4nM&jm
%I?T!'p:[(;\K@a+h>MHfNpgWKbQ36TJUoBX+>m:%SQb.k`T_<^6"Hat&(=@?:>8-\Vjc(?f@>f\B9ZE&Oh'.EM`1(r7KC15;CR9g
%d#Nd$O<_;'F`C0'B+[qc@D0u0%r7]W(^HUGHgT'TaL!lr85mVMah@E1(?^)!^!/m4I,X_lVZTUmlKLl%/IP`(j62:j!n8k\9R8=L
%oFZjiIP:F=Iht'm=>dpmZbD1A#[Y7&@8T#kS"b)\lk/WtK6NgkKn/?Nk5A5<-S$/QHsr@f_[hm7E]`OCMe'FikEH7d:s'm1YrQZa
%a(4NYno'*>9IgeE93A0<LQ14_i_[kdcO3[0k2=TDe/;Lm/p6.gH@l>%E5)8q7YuRI6$>Z]?$H3GEk;#m?TI=f+MtJ_*bP?q_Ei%W
%KDe[8<r[cI&lXEVY8_D/J]$+"Vb97#\L&:UdXPR.kC,,tiUq-;[8f;KLVq`IZb51R)VhK<^X/[b\-1Dif7<R9)eiRe4Lj(.ghK2D
%"/'9X.;K#fhmC3b%9FFOaZ3KIXqU_1^c(A3J.O@(>e)Zo*1/K^C%!oA,H9f-JE&:l8%o1P21"0>RY7QC@crH'kNLQ@S1p8WFl^c%
%/>XZ:*#>c]=a1I:Le$^8E+it2CI`R:]QT2I39PGO_IWo^)s1+n?6jM,qUH,WJI*8a+"GY''Z-[>%XITn0LFip7n&_DJ>5lcY#TMU
%@r<#D9VW+m-H^ZP3gXZS8k0n7ij:IL5'VJ3^P/(3Uf<TQl@OKA:a*mBHfBJQmXl38^A]uc;Wp)3HqW9[+Y<o#&1'VM:BR@.FPU.O
%Vk>Z41Hf-1q,PDH_=Lj':/B\@M[37TGPSC[`Q3%W7!]j2Y:rIIj7*mF/Zj_#hUWEfEgRr5LNWNt8Y)aE>bI.e<4YQkB4H#W/$b9i
%ED*m?"Qju+AB/^E]gJ3(@igl"W^JD^is#F@0FDCaWm:[T-Y-u/Xq&Ablo%.`5D9Vo,@dIU;!:n%BjfMU_]g><^n3PfBBsk!Wk>%k
%I5)4;ARkYIi%KPZhE=m-SuR"S5u6%CVs<):oe+PfWI";<^#Qjl<U]KWp$Sf*pJehQWnom=msYjp4B:jAWcp4QVs<):p$Sf*pJehQ
%Wnom=mhgDOhE=m-SuR#1WI"==Dq2JWX`X<Pqu-,YrqM75rL8;ks5Q?Dofmm(r',]0mJHVcps["Xq(KM^LYmR[0E:^shu<D+^\n&n
%s8M>nTE"c>^]!3UJ,K-rf2(<'o%U?ts2X#Gqt8_$s7>.I#8$gTrpZgMrU[f$o,n#%^AohGfU)~>
%AI9_PrivateDataEnd
